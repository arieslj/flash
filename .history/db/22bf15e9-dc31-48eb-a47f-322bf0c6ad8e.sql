select
    dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_name 网点
    ,am.merge_column 关联信息
    ,am.abnormal_time 异常日期
    ,case
        when aq.abnormal_money is not null then aq.abnormal_money                -- 处罚金额这在申诉之后固化
        when am.isdel = 1 then 0.00
        else am.punish_money
    end 处罚金额
    ,CASE am.`punish_category`
        When 1 then '虚假问题件/虚假留仓件'
        When 2 then '5天以内未妥投，且超24小时未更新'
        When 3 then '5天以上未妥投/未中转，且超24小时未更新'
        When 4 then '对问题件解决不及时'
        When 5 then '包裹配送时间超三天'
        When 6 then '未在客户要求的改约时间之前派送包裹'
        When 7 then '包裹丢失'
        When 8 then '包裹破损'
        When 9 then '其他'
        When 10 then '揽件时称量包裹不准确'
        When 11 then '出纳回款不及时'
        When 12 then '迟到罚款 每分钟10泰铢'
        When 13 then '揽收或中转包裹未及时发出'
        When 14 then '仓管对工单处理不及时'
        When 15 then '仓管未及时处理问题件包裹'
        When 16 then '客户投诉罚款 已废弃'
        When 17 then '故意不接公司电话 自定义'
        When 18 then '仓管未交接SPEED/优先包裹给快递员'
        When 19 then 'PRI或者speed包裹未妥投'
        When 20 then '虚假妥投'
        When 21 then '客户投诉'
        When 22 then '快递员公款超时未上缴'
        When 23 then 'miniCS工单处理不及时'
        When 24 then '客户投诉-虚假问题件/虚假留仓件'
        When 25 then '揽收禁运包裹'
        When 26 then '早退罚款'
        When 27 then '班车发车晚点'
        When 28 then '虚假回复工单'
        When 29 then '未妥投包裹没有标记'
        When 30 then '未妥投包裹没有入仓'
        When 31 then 'SPEED/PRI件派送中未及时联系客户'
        When 32 then '仓管未及时交接SPEED/PRI优先包裹'
        When 33 then '揽收不及时'
        When 34 then '网点应盘点包裹未清零'
        When 35 then '漏揽收'
        When 36 then '包裹外包装不合格'
        When 37 then '超大件'
        When 38 then '多面单'
        When 39 then '不称重包裹未入仓'
        When 40 then '上传虚假照片'
        When 41 then '网点到件漏扫描'
        When 42 then '虚假撤销'
        When 43 then '虚假揽件标记'
        When 44 then '外协员工日交接不满50件包裹'
        When 45 then '超大集包处罚'
        When 46 then '不集包'
        When 47 then '理赔处理不及时'
        When 48 then '面单粘贴不规范'
        When 49 then '未换单'
        When 50 then '集包标签不规范'
        When 51 then '未及时关闭揽件任务'
        When 52 then '虚假上报（虚假违规件上报）'
        When 53 then '虚假错分'
        When 54 then '物品类型错误（水果件）'
        When 55 then '虚假上报车辆里程'
        When 56 then '物品类型错误（文件）'
        When 57 then '旷工罚款'
        When 58 then '虚假取消揽件任务'
        When 59 then '72h未联系客户道歉'
        When 60 then '虚假标记拒收'
        When 61 then '外协投诉主管未及时道歉'
        When 62 then '外协投诉客户不接受道歉'
        When 63 then '揽派件照片不合格'
        When 64 then '揽件任务未及时分配'
        When 65 then '网点未及时上传回款凭证'
        When 66 then '网点上传虚假回款凭证'
    end as '处罚原因'
    ,case am.`punish_sub_category`
        when 1   then '超大件'
        when 2   then   '违禁品'
        when 3   then '寄件人电话号码是空号'
        when 4   then   '收件人电话号码是空号'
        when 5   then    '虛假上报车里程模糊'
        when 6   then    '虛假上报车里程'
        when 7   then '重量差（复秤-揽收）（0.5kg,2kg]'
        when 8   then    '重量差（复秤-揽收）（2kg,5kg]'
        when 9   then    '重量差（复秤-揽收）>5kg'
        when 10   then   '重量差（复秤-揽收）<-0.5kg'
        when 11   then   '重量差（复秤-揽收）（1kg,3kg]'
        when 12   then '重量差（复秤-揽收）（3kg,6kg]'
        when 13   then   '重量差（复秤-揽收）>6kg'
        when 14   then    '重量差（复秤-揽收）<-1kg'
        when 15   then   '尺寸差（复秤-揽收）(10cm,20cm]'
        when 16   then   '尺寸差（复秤-揽收）(20cm,30cm]'
        when 17   then    '尺寸差（复秤-揽收）>30cm'
        when 18   then   '尺寸差（复秤-揽收）<-10cm'
        when 22   then    '虛假上报车里程 虚假-图片与数字不符合'
        when 23   then    '虛假上报车里程 虚假-滥用油卡'
    end as '具体原因'
    ,case acc.`complaints_type`
        when 6 then '服务态度类投诉 1级'
        when 2 then '虚假揽件改约时间/取消揽件任务 2级'
        when 1 then '虚假妥投 3级'
        when 3 then '派件虚假留仓件/问题件 4级'
        when 7 then '操作规范类投诉 5级'
        when 5 then '其他 6级'
        when 4 then '普通客诉 已弃用，仅供展示历史'
    end as 投诉大类
    ,case acc.complaints_sub_type
        when 1 then '业务不熟练'
        when 2 then '虚假签收'
        when 3 then '以不礼貌的态度对待客户'
        when 4   then '揽/派件动作慢'
        when 5 then '未经客户同意投递他处'
        when 6   then '未经客户同意改约时间'
        when 7 then '不接客户电话'
        when 8   then '包裹丢失 没有数据'
        when 9 then '改约的时间和客户沟通的时间不一致'
        when 10   then '未提前电话联系客户'
        when 11   then '包裹破损 没有数据'
        when 12   then '未按照改约时间派件'
        when 13    then '未按订单带包装'
        when 14   then '不找零钱'
        when 15    then '客户通话记录内未看到员工电话'
        when 16    then '未经客户允许取消揽件任务'
        when 17   then '未给客户回执'
        when 18   then '拨打电话时间太短，客户来不及接电话'
        when 19   then '未经客户允许退件'
        when 20    then '没有上门'
        when 21    then '其他'
        when 22   then '未经客户同意改约揽件时间'
        when 23    then '改约的揽件时间和客户要求的时间不一致'
        when 24    then '没有按照改约时间揽件'
        when 25    then '揽件前未提前联系客户'
        when 26    then '答应客户揽件，但最终没有揽'
        when 27    then '很晚才打电话联系客户'
        when 28    then '货物多/体积大，因骑摩托而拒绝上门揽收'
        when 29    then '因为超过当日截单时间，要求客户取消'
        when 30    then '声称不是自己负责的区域，要求客户取消'
        when 31    then '拨打电话时间太短，客户来不及接电话'
        when 32    then '不接听客户回复的电话'
        when 33    then '答应客户今天上门，但最终没有揽收'
        when 34    then '没有上门揽件，也没有打电话联系客户'
        when 35    then '货物不属于超大件/违禁品'
        when 36    then '没有收到包裹，且快递员没有联系客户'
        when 37    then '快递员拒绝上门派送'
        when 38    then '快递员擅自将包裹放在门口或他处'
        when 39    then '快递员没有按约定的时间派送'
        when 40    then '代替客户签收包裹'
        when   41   then '快说话不礼貌/没有礼貌/不愿意服务'
        when 42    then '说话不礼貌/没有礼貌/不愿意服务'
        when   43    then '快递员抛包裹'
        when   44    then '报复/骚扰客户'
        when 45   then '快递员收错COD金额'
        when   46   then '虚假妥投'
        when   47    then '派件虚假留仓件/问题件'
        when 48   then '虚假揽件改约时间/取消揽件任务'
        when   49   then '抛客户包裹'
        when 50    then '录入客户信息不正确'
        when 51    then '送货前未电话联系'
        when 52    then '未在约定时间上门'
        when   53    then '上门前不电话联系'
        when   54    then '以不礼貌的态度对待客户'
        when   55    then '录入客户信息不正确'
        when   56    then '与客户发生肢体接触'
        when   57    then '辱骂客户'
        when   58    then '威胁客户'
        when   59    then '上门揽件慢'
        when   60    then '快递员拒绝上门揽件'
        when 61    then '未经客户同意标记收件人拒收'
        when 62    then '未按照系统地址送货导致收件人拒收'
        when 63 then '情况不属实，快递员虚假标记'
        when 64 then '情况不属实，快递员诱导客户改约时间'
        when 65 then '包裹长时间未派送'
        when 66 then '未经同意拒收包裹'
        when 67 then '已交费仍索要COD'
        when 68 then '投递时要求开箱'
        when 69 then '不当场扫描揽收'
        when 70 then '揽派件速度慢'
    end as '投诉原因'
    ,am.edit_reason 备注
    ,am.staff_info_id 工号
    ,hsi.name 员工姓名
    ,hjt.job_name 员工职位
    ,case
        when coalesce(am.isappeal, aq.isappeal) = 1 then '未申诉'
        when coalesce(am.isappeal, aq.isappeal) = 2 then '申诉中'
        when coalesce(am.isappeal, aq.isappeal) = 3 then '保持原判'
        when coalesce(am.isappeal, aq.isappeal) = 4 then '已变更'
        when coalesce(am.isappeal, aq.isappeal) = 5 or am.isdel = 1 then '已删除'
    end 状态
    ,case
        when am.isdel = 1 then 0.00
        when am.isappeal = 1 then '-'
        when am.isappeal = 2 then '-'
        when am.isdel = 0 then am.punish_money
    end 申诉后的金额
from bi_pro.abnormal_message am
left join bi_pro.abnormal_customer_complaint acc on acc.abnormal_message_id = am.id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = am.staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join bi_pro.abnormal_qaqc aq on aq.abnormal_message_id = am.id
where
    am.abnormal_object = 0
    and am.abnormal_time >= '2023-02-01'
    and am.abnormal_time < '2023-03-01'
    and am.state = 1
    and (am.isdel = 0 or (am.isdel = 1 and am.isappeal != 1));
;-- -. . -..- - / . -. - .-. -.--
select
    dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_name 网点
    ,am.merge_column 关联信息
    ,am.abnormal_time 异常日期
    ,case
        when aq.abnormal_money is not null then aq.abnormal_money                -- 处罚金额这在申诉之后固化
        when am.isdel = 1 then 0.00
        else am.punish_money
    end 处罚金额
    ,CASE am.`punish_category`
        When 1 then '虚假问题件/虚假留仓件'
        When 2 then '5天以内未妥投，且超24小时未更新'
        When 3 then '5天以上未妥投/未中转，且超24小时未更新'
        When 4 then '对问题件解决不及时'
        When 5 then '包裹配送时间超三天'
        When 6 then '未在客户要求的改约时间之前派送包裹'
        When 7 then '包裹丢失'
        When 8 then '包裹破损'
        When 9 then '其他'
        When 10 then '揽件时称量包裹不准确'
        When 11 then '出纳回款不及时'
        When 12 then '迟到罚款 每分钟10泰铢'
        When 13 then '揽收或中转包裹未及时发出'
        When 14 then '仓管对工单处理不及时'
        When 15 then '仓管未及时处理问题件包裹'
        When 16 then '客户投诉罚款 已废弃'
        When 17 then '故意不接公司电话 自定义'
        When 18 then '仓管未交接SPEED/优先包裹给快递员'
        When 19 then 'PRI或者speed包裹未妥投'
        When 20 then '虚假妥投'
        When 21 then '客户投诉'
        When 22 then '快递员公款超时未上缴'
        When 23 then 'miniCS工单处理不及时'
        When 24 then '客户投诉-虚假问题件/虚假留仓件'
        When 25 then '揽收禁运包裹'
        When 26 then '早退罚款'
        When 27 then '班车发车晚点'
        When 28 then '虚假回复工单'
        When 29 then '未妥投包裹没有标记'
        When 30 then '未妥投包裹没有入仓'
        When 31 then 'SPEED/PRI件派送中未及时联系客户'
        When 32 then '仓管未及时交接SPEED/PRI优先包裹'
        When 33 then '揽收不及时'
        When 34 then '网点应盘点包裹未清零'
        When 35 then '漏揽收'
        When 36 then '包裹外包装不合格'
        When 37 then '超大件'
        When 38 then '多面单'
        When 39 then '不称重包裹未入仓'
        When 40 then '上传虚假照片'
        When 41 then '网点到件漏扫描'
        When 42 then '虚假撤销'
        When 43 then '虚假揽件标记'
        When 44 then '外协员工日交接不满50件包裹'
        When 45 then '超大集包处罚'
        When 46 then '不集包'
        When 47 then '理赔处理不及时'
        When 48 then '面单粘贴不规范'
        When 49 then '未换单'
        When 50 then '集包标签不规范'
        When 51 then '未及时关闭揽件任务'
        When 52 then '虚假上报（虚假违规件上报）'
        When 53 then '虚假错分'
        When 54 then '物品类型错误（水果件）'
        When 55 then '虚假上报车辆里程'
        When 56 then '物品类型错误（文件）'
        When 57 then '旷工罚款'
        When 58 then '虚假取消揽件任务'
        When 59 then '72h未联系客户道歉'
        When 60 then '虚假标记拒收'
        When 61 then '外协投诉主管未及时道歉'
        When 62 then '外协投诉客户不接受道歉'
        When 63 then '揽派件照片不合格'
        When 64 then '揽件任务未及时分配'
        When 65 then '网点未及时上传回款凭证'
        When 66 then '网点上传虚假回款凭证'
    end as '处罚原因'
    ,case am.`punish_sub_category`
        when 1   then '超大件'
        when 2   then   '违禁品'
        when 3   then '寄件人电话号码是空号'
        when 4   then   '收件人电话号码是空号'
        when 5   then    '虛假上报车里程模糊'
        when 6   then    '虛假上报车里程'
        when 7   then '重量差（复秤-揽收）（0.5kg,2kg]'
        when 8   then    '重量差（复秤-揽收）（2kg,5kg]'
        when 9   then    '重量差（复秤-揽收）>5kg'
        when 10   then   '重量差（复秤-揽收）<-0.5kg'
        when 11   then   '重量差（复秤-揽收）（1kg,3kg]'
        when 12   then '重量差（复秤-揽收）（3kg,6kg]'
        when 13   then   '重量差（复秤-揽收）>6kg'
        when 14   then    '重量差（复秤-揽收）<-1kg'
        when 15   then   '尺寸差（复秤-揽收）(10cm,20cm]'
        when 16   then   '尺寸差（复秤-揽收）(20cm,30cm]'
        when 17   then    '尺寸差（复秤-揽收）>30cm'
        when 18   then   '尺寸差（复秤-揽收）<-10cm'
        when 22   then    '虛假上报车里程 虚假-图片与数字不符合'
        when 23   then    '虛假上报车里程 虚假-滥用油卡'
    end as '具体原因'
    ,case acc.`complaints_type`
        when 6 then '服务态度类投诉 1级'
        when 2 then '虚假揽件改约时间/取消揽件任务 2级'
        when 1 then '虚假妥投 3级'
        when 3 then '派件虚假留仓件/问题件 4级'
        when 7 then '操作规范类投诉 5级'
        when 5 then '其他 6级'
        when 4 then '普通客诉 已弃用，仅供展示历史'
    end as 投诉大类
    ,case acc.complaints_sub_type
        when 1 then '业务不熟练'
        when 2 then '虚假签收'
        when 3 then '以不礼貌的态度对待客户'
        when 4   then '揽/派件动作慢'
        when 5 then '未经客户同意投递他处'
        when 6   then '未经客户同意改约时间'
        when 7 then '不接客户电话'
        when 8   then '包裹丢失 没有数据'
        when 9 then '改约的时间和客户沟通的时间不一致'
        when 10   then '未提前电话联系客户'
        when 11   then '包裹破损 没有数据'
        when 12   then '未按照改约时间派件'
        when 13    then '未按订单带包装'
        when 14   then '不找零钱'
        when 15    then '客户通话记录内未看到员工电话'
        when 16    then '未经客户允许取消揽件任务'
        when 17   then '未给客户回执'
        when 18   then '拨打电话时间太短，客户来不及接电话'
        when 19   then '未经客户允许退件'
        when 20    then '没有上门'
        when 21    then '其他'
        when 22   then '未经客户同意改约揽件时间'
        when 23    then '改约的揽件时间和客户要求的时间不一致'
        when 24    then '没有按照改约时间揽件'
        when 25    then '揽件前未提前联系客户'
        when 26    then '答应客户揽件，但最终没有揽'
        when 27    then '很晚才打电话联系客户'
        when 28    then '货物多/体积大，因骑摩托而拒绝上门揽收'
        when 29    then '因为超过当日截单时间，要求客户取消'
        when 30    then '声称不是自己负责的区域，要求客户取消'
        when 31    then '拨打电话时间太短，客户来不及接电话'
        when 32    then '不接听客户回复的电话'
        when 33    then '答应客户今天上门，但最终没有揽收'
        when 34    then '没有上门揽件，也没有打电话联系客户'
        when 35    then '货物不属于超大件/违禁品'
        when 36    then '没有收到包裹，且快递员没有联系客户'
        when 37    then '快递员拒绝上门派送'
        when 38    then '快递员擅自将包裹放在门口或他处'
        when 39    then '快递员没有按约定的时间派送'
        when 40    then '代替客户签收包裹'
        when   41   then '快说话不礼貌/没有礼貌/不愿意服务'
        when 42    then '说话不礼貌/没有礼貌/不愿意服务'
        when   43    then '快递员抛包裹'
        when   44    then '报复/骚扰客户'
        when 45   then '快递员收错COD金额'
        when   46   then '虚假妥投'
        when   47    then '派件虚假留仓件/问题件'
        when 48   then '虚假揽件改约时间/取消揽件任务'
        when   49   then '抛客户包裹'
        when 50    then '录入客户信息不正确'
        when 51    then '送货前未电话联系'
        when 52    then '未在约定时间上门'
        when   53    then '上门前不电话联系'
        when   54    then '以不礼貌的态度对待客户'
        when   55    then '录入客户信息不正确'
        when   56    then '与客户发生肢体接触'
        when   57    then '辱骂客户'
        when   58    then '威胁客户'
        when   59    then '上门揽件慢'
        when   60    then '快递员拒绝上门揽件'
        when 61    then '未经客户同意标记收件人拒收'
        when 62    then '未按照系统地址送货导致收件人拒收'
        when 63 then '情况不属实，快递员虚假标记'
        when 64 then '情况不属实，快递员诱导客户改约时间'
        when 65 then '包裹长时间未派送'
        when 66 then '未经同意拒收包裹'
        when 67 then '已交费仍索要COD'
        when 68 then '投递时要求开箱'
        when 69 then '不当场扫描揽收'
        when 70 then '揽派件速度慢'
    end as '投诉原因'
    ,am.edit_reason 备注
    ,am.staff_info_id 工号
    ,hsi.name 员工姓名
    ,hjt.job_name 员工职位
    ,case
        when coalesce(am.isappeal, aq.isappeal) = 1 then '未申诉'
        when coalesce(am.isappeal, aq.isappeal) = 2 then '申诉中'
        when coalesce(am.isappeal, aq.isappeal) = 3 then '保持原判'
        when coalesce(am.isappeal, aq.isappeal) = 4 then '已变更'
        when coalesce(am.isappeal, aq.isappeal) = 5 or am.isdel = 1 then '已删除'
    end 状态
    ,case
        when am.isdel = 1 then 0.00
        when am.isappeal = 1 then '-'
        when am.isappeal = 2 then '-'
        when am.isdel = 0 then am.punish_money
    end 申诉后的金额
from bi_pro.abnormal_message am
left join bi_pro.abnormal_customer_complaint acc on acc.abnormal_message_id = am.id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = am.staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join bi_pro.abnormal_qaqc aq on aq.abnormal_message_id = am.id
where
    am.abnormal_object = 0
    and am.abnormal_time >= '2023-02-01'
    and am.abnormal_time < '2023-03-01'
    and am.state = 1
    and (am.isdel = 0 or (am.isdel = 1 and am.isappeal != 1))
    and dt.region_name in ('Area14','Area3','Area6','Bulky Area 1','Bulky Area 2','Bulky Area 3','Bulky Area 4','Bulky Area 5','Bulky Area 6','Bulky Area 7','Bulky Area 8','Bulky Area 9','CDC Area 1','CDC Area 2');
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
    join t1 on t1.id = wo.loseparcel_task_id
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,las.staff_info_id 最后有效路由操作人
    ,las_ss.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join t1 on t1.pno = pr.pno
                where  pr.route_action in ('RECEIVED','RECEIVE_WAREHOUSE_SCAN','SORTING_SCAN','DELIVERY_TICKET_CREATION_SCAN','ARRIVAL_WAREHOUSE_SCAN','SHIPMENT_WAREHOUSE_SCAN','DETAIN_WAREHOUSE','DELIVERY_CONFIRM','DIFFICULTY_HANDOVER','DELIVERY_MARKER','REPLACE_PNO','SEAL','UNSEAL','PARCEL_HEADLESS_PRINTED','STAFF_INFO_UPDATE_WEIGHT','STORE_KEEPER_UPDATE_WEIGHT','STORE_SORTER_UPDATE_WEIGHT','DISCARD_RETURN_BKK','DELIVERY_TRANSFER','PICKUP_RETURN_RECEIPT','FLASH_HOME_SCAN','ARRIVAL_WAREHOUSE_SCAN','INVENTORY','SORTING_SCAN')
                    and pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las on las.pno = t1.pno
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join fle_staging.sys_store las_ss on las_ss.id = las.store_id
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 30 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 30 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join
    (
        select
            wo.pnos
            ,wo.created_at
            ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
        from bi_pro.work_order wo
        join t1 on t1.pno = wo.pnos
    ) fir on fir.pnos = t1.pno and fir.rn = 1
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,las.staff_info_id 最后有效路由操作人
    ,las_ss.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join t1 on t1.pno = pr.pno
                where  pr.route_action in ('RECEIVED','RECEIVE_WAREHOUSE_SCAN','SORTING_SCAN','DELIVERY_TICKET_CREATION_SCAN','ARRIVAL_WAREHOUSE_SCAN','SHIPMENT_WAREHOUSE_SCAN','DETAIN_WAREHOUSE','DELIVERY_CONFIRM','DIFFICULTY_HANDOVER','DELIVERY_MARKER','REPLACE_PNO','SEAL','UNSEAL','PARCEL_HEADLESS_PRINTED','STAFF_INFO_UPDATE_WEIGHT','STORE_KEEPER_UPDATE_WEIGHT','STORE_SORTER_UPDATE_WEIGHT','DISCARD_RETURN_BKK','DELIVERY_TRANSFER','PICKUP_RETURN_RECEIPT','FLASH_HOME_SCAN','seal.ARRIVAL_WAREHOUSE_SCAN','INVENTORY','SORTING_SCAN')
                    and pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las on las.pno = t1.pno
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join fle_staging.sys_store las_ss on las_ss.id = las.store_id
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 30 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 30 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join
    (
        select
            wo.pnos
            ,wo.created_at
            ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
        from bi_pro.work_order wo
        join t1 on t1.pno = wo.pnos
    ) fir on fir.pnos = t1.pno and fir.rn = 1
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2;
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= '2023-03-14'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.sorting_no 区域
    ,smr.name Area
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= '2023-03-13'
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= '2023-03-14'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= '2023-03-13'
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= '2023-03-14'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= '2023-03-14'
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join fle_staging.sys_store las_ss on las_ss.id = las.store_id
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 30 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 30 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,pi.returned
    ,pi2.cod_amount/100 cod金额
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_2023_03_14 t on t.pno = pi.pno
left join fle_staging.parcel_info pi2 on if(pi.returned = 1, pi.customary_pno, pi.pno) = pi2.pno;
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= '2023-03-13'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= '2023-03-13'
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= curdate()
        and wo.created_at < date_add(curdate(), interval 1 day)
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= curdate()
    and wo.created_at < date_add(curdate(), interval 1 day)
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= date_sub(curdate(), interval 1 day)
        and wo.created_at < curdate()
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707') then 'Shopee'
        when wo.client_id in ('AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601') then 'Lazada'
        when wo.client_id in ('AA0660','AA0661','AA0703') then 'Tiktok'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1

where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= date_sub(curdate(), interval 1 day)
    and wo.created_at < curdate()
    and wo.client_id in ('AA0386','AA0425','AA0427','AA0569','AA0572','AA0574','AA0606','AA0612','AA0657','AA0707','AA0330','AA0415','AA0428','AA0442','AA0461','AA0477','AA0538','AA0601','AA0660','AA0661','AA0703');
;-- -. . -..- - / . -. - .-. -.--
select
            wo.id
            ,cg.name cg_name
            ,count(wo.id) over (partition by wo.pnos) pno_count
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2022-12-01 18:00:00'
            and wo.store_id = 22
            and ss.id is not null;
;-- -. . -..- - / . -. - .-. -.--
select
            wo.id
            ,cg.name cg_name
            ,wo.pnos
            ,count(wo.id) over (partition by wo.pnos) pno_count
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2022-12-01 18:00:00'
            and wo.store_id = 22
            and ss.id is not null;
;-- -. . -..- - / . -. - .-. -.--
select
            wo.id
            ,cg.name cg_name
            ,wo.pnos
            ,count(wo.id) over (partition by wo.pnos) pno_count
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2022-12-01 18:00:00'
            and wo.store_id = 22
            and ss.id is not null;
;-- -. . -..- - / . -. - .-. -.--
select * from bi_pro.parcel_lose_task plt where  plt.pno = 'TH07012YKWYK9F-2';
;-- -. . -..- - / . -. - .-. -.--
select * from bi_pro.parcel_lose_task plt where  plt.pno = 'TH07012YKWYK9F';
;-- -. . -..- - / . -. - .-. -.--
select * from bi_pro.parcel_lose_task plt where  plt.pno = 'TH02023V2GZB0H';
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal 应处理工单数
    ,t2.already_deal 完结工单数
    ,t1.not_already_deal 应处理工单当月未完成单数
    ,t1.deal_rate 当月工单完结率
    ,zl.zl_num 滞留工单单数
    ,t2.deal_avg_time 完结工单单均处理时长
    ,cf.repeat_num 工单重复包裹数
from
    ( -- 当月产生
         select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1) +interval 18 hour), wo.id,  null)) not_already_deal                                                          should_not_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1) + interval 18 hour)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2
    ) t1
left join
     (-- 当月完结，已回复和已关闭的工单按照最后一次回复时间认定为结束时间
         select
             month(wo.latest_reply_at) month_d
            ,,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    (
        select
            '12' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-01-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2022-12-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-02-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-01-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-03-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-02-28 18:00:00')
                )
        group by 1,2
    ) zl on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal 应处理工单数
    ,t2.already_deal 完结工单数
    ,t1.not_already_deal 应处理工单当月未完成单数
    ,t1.deal_rate 当月工单完结率
    ,zl.zl_num 滞留工单单数
    ,t2.deal_avg_time 完结工单单均处理时长
    ,cf.repeat_num 工单重复包裹数
from
    ( -- 当月产生
         select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1) +interval 18 hour), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1) + interval 18 hour)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2
    ) t1
left join
     (-- 当月完结，已回复和已关闭的工单按照最后一次回复时间认定为结束时间
         select
             month(wo.latest_reply_at) month_d
            ,,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    (
        select
            '12' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-01-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2022-12-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-02-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-01-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-03-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-02-28 18:00:00')
                )
        group by 1,2
    ) zl on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal 应处理工单数
    ,t2.already_deal 完结工单数
    ,t1.not_already_deal 应处理工单当月未完成单数
    ,t1.deal_rate 当月工单完结率
    ,zl.zl_num 滞留工单单数
    ,t2.deal_avg_time 完结工单单均处理时长
    ,cf.repeat_num 工单重复包裹数
from
    ( -- 当月产生
         select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2
    ) t1
left join
     (-- 当月完结，已回复和已关闭的工单按照最后一次回复时间认定为结束时间
         select
             month(wo.latest_reply_at) month_d
            ,,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    (
        select
            '12' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-01-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2022-12-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-02-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-01-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-03-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-02-28 18:00:00')
                )
        group by 1,2
    ) zl on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
             month(wo.latest_reply_at) month_d
            ,,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
             month(wo.latest_reply_at) month_d
            ,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal 应处理工单数
    ,t2.already_deal 完结工单数
    ,t1.not_already_deal 应处理工单当月未完成单数
    ,t1.deal_rate 当月工单完结率
    ,zl.zl_num 滞留工单单数
    ,t2.deal_avg_time 完结工单单均处理时长
    ,cf.repeat_num 工单重复包裹数
from
    ( -- 当月产生
         select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2
    ) t1
left join
     (-- 当月完结，已回复和已关闭的工单按照最后一次回复时间认定为结束时间
         select
             month(wo.latest_reply_at) month_d
            ,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    (
        select
            '12' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-01-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2022-12-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-02-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-01-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-03-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-02-28 18:00:00')
                )
        group by 1,2
    ) zl on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','KAM TH','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal 应处理工单数
    ,t2.already_deal 完结工单数
    ,t1.not_already_deal 应处理工单当月未完成单数
    ,t1.deal_rate 当月工单完结率
    ,zl.zl_num 滞留工单单数
    ,t2.deal_avg_time 完结工单单均处理时长
    ,cf.repeat_num 工单重复包裹数
from
    ( -- 当月产生
         select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2
    ) t1
left join
     (-- 当月完结，已回复和已关闭的工单按照最后一次回复时间认定为结束时间
         select
             month(wo.latest_reply_at) month_d
            ,cg.name cg_name
            ,count(distinct wo.id)  already_deal
            ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
         where wo.latest_reply_at >= '2022-12-01 00:00:00'
            and wo.latest_reply_at < '2023-03-01 00:00:00'
            and wo.store_id = 22
            and ss.id is not null
            and wo.status in (3, 4)
         group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    (
        select
            '12' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-01-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2022-12-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-02-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-01-31 18:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,cg.name cg_name
            ,count(distinct wo.id) zl_num
        from bi_pro.work_order wo
        left join fle_staging.sys_store ss on ss.id = wo.created_store_id
        left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
        join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            ss.id is not null
            and wo.created_at >= '2022-01-01'
            and wo.created_at < '2023-03-01'
            and wo.store_id = 22
            and
                (
                    wo.status in (1,2)
                    or (wo.status in (3,4) and wo.latest_reply_at >= '2023-02-28 18:00:00')
                )
        group by 1,2
    ) zl on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.month_d
            ,t.cg_name
            ,count(distinct t.pnos) repeat_num
        from
            (
                select
                    wo.id
                    ,cg.name cg_name
                    ,wo.pnos
                    ,month(date_add(wo.created_at, interval 6 hour))  month_d
                    ,count(wo.id) over (partition by month(date_add(wo.created_at, interval 6 hour)),wo.pnos) pno_count
                from bi_pro.work_order wo
                left join fle_staging.sys_store ss on ss.id = wo.created_store_id
                left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
                join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    wo.created_at > '2022-11-30 18:00:00'
                    and wo.created_at < '2023-02-28 18:00:00'
                    and wo.store_id = 22
                    and ss.id is not null
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
     month(date_add(wo.created_at, interval 6 hour))  所属月份
     ,cg.name 项目组
#      ,count(distinct wo.id) should_deal
#      ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at <= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
    ,wo.order_no 工单号
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
 from bi_pro.work_order wo
 left join fle_staging.sys_store ss on ss.id = wo.created_store_id
 left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
 join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
 where
    wo.created_at > '2022-11-28 18:00:00'
    and wo.created_at < '2023-03-01 18:00:00'
    and wo.store_id = 22
    and ss.id is not null;
;-- -. . -..- - / . -. - .-. -.--
select
     month(wo.latest_reply_at) 月份
    ,cg.name 项目组
#     ,count(distinct wo.id)  already_deal
#     ,sum(timestampdiff(second, wo.created_at, wo.latest_reply_at) / 3600) /count(distinct wo.id) deal_avg_time
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 工单最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where wo.latest_reply_at >= '2022-11-01 00:00:00'
and wo.latest_reply_at < '2023-03-11 00:00:00'
and wo.store_id = 22
and ss.id is not null
and wo.status in (3, 4);
;-- -. . -..- - / . -. - .-. -.--
select
#     cg.name cg_name
#     ,wo.created_at 工单创建时间
#     ,wo.latest_reply_at 工单最后回复时间
#     ,case wo.status
#         when 1 then '未阅读'
#         when 2 then '已经阅读'
#         when 3 then '已回复'
#         when 4 then '已关闭'
#     end 工单状态
count(*)
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where
    ss.id is not null
    and wo.created_at >= '2022-01-01'
    and wo.created_at < '2023-03-01'
    and wo.store_id = 22;
;-- -. . -..- - / . -. - .-. -.--
select
    cg.name cg_name
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 工单最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where
    ss.id is not null
    and wo.created_at >= '2022-01-01'
    and wo.created_at < '2023-03-01'
    and wo.store_id = 22;
;-- -. . -..- - / . -. - .-. -.--
elect
    cg.name cg_name
    ,wo.order_no
    ,wo.client_id
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 工单最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where
    ss.id is not null
    and wo.created_at >= '2022-01-01'
    and wo.created_at < '2023-03-01'
    and wo.store_id = 22;
;-- -. . -..- - / . -. - .-. -.--
select
    cg.name cg_name
    ,wo.order_no
    ,wo.client_id
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 工单最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where
    ss.id is not null
    and wo.created_at >= '2022-01-01'
    and wo.created_at < '2023-03-01'
    and wo.store_id = 22;
;-- -. . -..- - / . -. - .-. -.--
select
    cg.name cg_name
    ,wo.order_no
    ,wo.client_id
    ,wo.pnos
    ,wo.created_at 工单创建时间
    ,wo.latest_reply_at 工单最后回复时间
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
from bi_pro.work_order wo
left join fle_staging.sys_store ss on ss.id = wo.created_store_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
where
    ss.id is not null
    and wo.created_at >= '2022-01-01'
    and wo.created_at < '2023-03-01'
    and wo.store_id = 22;
;-- -. . -..- - / . -. - .-. -.--
select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
             month(date_add(wo.created_at, interval 6 hour))  month_d
             ,cg.name cg_name
             ,count(distinct wo.id) should_deal
             ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
             ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) dealnum
         from bi_pro.work_order wo
         left join fle_staging.sys_store ss on ss.id = wo.created_store_id
         left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
         join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
         where
            wo.created_at > '2022-11-30 18:00:00'
            and wo.created_at < '2023-02-28 18:00:00'
            and wo.store_id = 22
            and ss.id is not null
         group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
     month(date_add(wo.created_at, interval 6 hour))  month_d
     ,cg.name cg_name
#      ,count(distinct wo.id) should_deal
#      ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) dealnum
    ,wo.id
    ,if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), 1,  null) not_already_deal
    ,if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), 1, null) dealnum
 from bi_pro.work_order wo
 left join fle_staging.sys_store ss on ss.id = wo.created_store_id
 left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
 join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
 where
    wo.created_at > '2022-11-30 18:00:00'
    and wo.created_at < '2023-02-28 18:00:00'
    and wo.store_id = 22
    and ss.id is not null
    and cg.name = 'Shopee'
    and month(date_add(wo.created_at, interval 6 hour)) = 2;
;-- -. . -..- - / . -. - .-. -.--
select
     month(date_add(wo.created_at, interval 6 hour))  month_d
     ,cg.name cg_name
#      ,count(distinct wo.id) should_deal
#      ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) dealnum
    ,wo.id
    ,wo.status
    ,wo.created_at
    ,wo.latest_reply_at
    ,if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), 1,  null) not_already_deal
    ,if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), 1, null) dealnum
 from bi_pro.work_order wo
 left join fle_staging.sys_store ss on ss.id = wo.created_store_id
 left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
 join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
 where
    wo.created_at > '2022-11-30 18:00:00'
    and wo.created_at < '2023-02-28 18:00:00'
    and wo.store_id = 22
    and ss.id is not null
    and cg.name = 'Shopee'
    and month(date_add(wo.created_at, interval 6 hour)) = 2;
;-- -. . -..- - / . -. - .-. -.--
select
     month(date_add(wo.created_at, interval 6 hour))  month_d
     ,cg.name cg_name
#      ,count(distinct wo.id) should_deal
#      ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) dealnum
    ,wo.id
    ,wo.status
    ,wo.created_at
    ,wo.order_no
    ,wo.latest_reply_at
    ,if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), 1,  null) not_already_deal
    ,if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), 1, null) dealnum
 from bi_pro.work_order wo
 left join fle_staging.sys_store ss on ss.id = wo.created_store_id
 left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
 join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
 where
    wo.created_at > '2022-11-30 18:00:00'
    and wo.created_at < '2023-02-28 18:00:00'
    and wo.store_id = 22
    and ss.id is not null
    and cg.name = 'Shopee'
    and month(date_add(wo.created_at, interval 6 hour)) = 2;
;-- -. . -..- - / . -. - .-. -.--
select
     month(date_add(wo.created_at, interval 6 hour))  month_d
     ,cg.name cg_name
#      ,count(distinct wo.id) should_deal
#      ,count(distinct if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), wo.id,  null)) not_already_deal
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) / count(distinct wo.id) deal_rate
#      ,count(distinct if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), wo.id, null)) dealnum
    ,wo.id
    ,wo.status
    ,wo.created_at
    ,wo.order_no
    ,wo.pnos
    ,wo.latest_reply_at
    ,if(wo.status in (1, 2) or (wo.status in (3, 4) and wo.latest_reply_at >= date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour)), 1,  null) not_already_deal
    ,if(wo.status in (3, 4) and wo.latest_reply_at < date_add(adddate(last_day(date_add(wo.created_at, interval 6 hour)), 1), interval 18 hour), 1, null) dealnum
 from bi_pro.work_order wo
 left join fle_staging.sys_store ss on ss.id = wo.created_store_id
 left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = wo.client_id and cgkr.deleted = 0  -- 已经删除的关联关系不要，要不然会造成数据重复
 join fle_staging.customer_group cg on  cgkr.customer_group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
 where
    wo.created_at > '2022-11-30 18:00:00'
    and wo.created_at < '2023-02-28 18:00:00'
    and wo.store_id = 22
    and ss.id is not null
    and cg.name = 'Shopee'
    and month(date_add(wo.created_at, interval 6 hour)) = 2;
;-- -. . -..- - / . -. - .-. -.--
select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end 项目组
            ,di.id
            ,pi.cod_enabled
#             ,count(distinct cdt.id ) should_deal
#             ,count(distinct if(di.state = 0 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
#             ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end 项目组
            ,di.id
            ,pi.cod_enabled
#             ,count(distinct cdt.id ) should_deal
#             ,count(distinct if(di.state = 0 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
#             ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
            and pi.cod_enabled is null;
;-- -. . -..- - / . -. - .-. -.--
select
    dr.route_action
    ,count(dr.id) num
from fle_staging.diff_route dr
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    dr.route_action
    ,count(dr.id) num
from fle_staging.diff_route dr
left join fle_staging.diff_info di on di.id = dr.diff_info_id
where
    di.state = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.state
    ,count(cdt.id)
from fle_staging.customer_diff_ticket cdt
where
    cdt.first_operated_at is not null;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal '应处理问题件数(剔除lost)'
    ,t2.deal_num 完结问题件数
    ,t1.should_not 应处理问题件数当月未完成
    ,t1.month_deal_ratio 当月问题件完结率
    ,zl.zl_num 滞留问题件单数
    ,t1.dam_short_ratio 破损短少问题件占比
    ,t1.cod_ratio COD金额问题件占比
    ,t1.other_ratio 其他问题件占比
    ,t2.avg_deal_time 完结问题件单均处理时长
    ,t2.dam_short_avg_time 破损短少问题件单均完结时长
    ,t2.cod_avg_time COD金额问题件单均完结时长
    ,t2.other_avg_time 其他问题件单均完结时长
    ,t1.jiedan_avg_time '问题件单均接单时长'
    ,t1.fin_avg_time '问题件单均接单-结单时长'
    ,cf.repeat_num 问题件重复包裹数
from
    ( -- 应处理
        select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 )) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2
    ) t1
left join
    ( -- 已完结
        select
            month(date_add(cdt.created_at, interval 7 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-12-31 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1 -- 已处理
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    ( -- 滞留
        select
            '12' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2022-12-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2022-12-31 17:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-01-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-01-31 11:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-02-28 11:00:00' -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-02-28 17:00:00')
                )
        group by 1,2
    ) zl  on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.cg_name
            ,t.month_d
            ,count(distinct t.pno) repeat_num
        from
            (
                select
                    cdt.id
                    ,month(date_add(cdt.created_at, interval 13 hour)) month_d
                    ,case
                        when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                        when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                        when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                        else cg.name
                    end cg_name
                    ,di.pno
                    ,count(cdt.id) over (partition by month(date_add(cdt.created_at, interval 13 hour)), di.pno) pno_count
                from fle_staging.customer_diff_ticket cdt
                left join fle_staging.diff_info di on di.id = cdt.diff_info_id
                join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    di.diff_marker_category not in (7,22)
                    and cdt.created_at >= '2022-11-30 11:00:00'
                    and cdt.created_at < '2023-02-28 11:00:00'
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 )) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and di.updated_at < date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 )) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal '应处理问题件数(剔除lost)'
    ,t2.deal_num 完结问题件数
    ,t1.should_not 应处理问题件数当月未完成
    ,t1.month_deal_ratio 当月问题件完结率
    ,zl.zl_num 滞留问题件单数
    ,t1.dam_short_ratio 破损短少问题件占比
    ,t1.cod_ratio COD金额问题件占比
    ,t1.other_ratio 其他问题件占比
    ,t2.avg_deal_time 完结问题件单均处理时长
    ,t2.dam_short_avg_time 破损短少问题件单均完结时长
    ,t2.cod_avg_time COD金额问题件单均完结时长
    ,t2.other_avg_time 其他问题件单均完结时长
    ,t1.jiedan_avg_time '问题件单均接单时长'
    ,t1.fin_avg_time '问题件单均接单-结单时长'
    ,cf.repeat_num 问题件重复包裹数
from
    ( -- 应处理
        select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and di.updated_at < date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 )) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2
    ) t1
left join
    ( -- 已完结
        select
            month(date_add(cdt.created_at, interval 7 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-12-31 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1 -- 已处理
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    ( -- 滞留
        select
            '12' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2022-12-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2022-12-31 17:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-01-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-01-31 11:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-02-28 11:00:00' -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-02-28 17:00:00')
                )
        group by 1,2
    ) zl  on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.cg_name
            ,t.month_d
            ,count(distinct t.pno) repeat_num
        from
            (
                select
                    cdt.id
                    ,month(date_add(cdt.created_at, interval 13 hour)) month_d
                    ,case
                        when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                        when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                        when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                        else cg.name
                    end cg_name
                    ,di.pno
                    ,count(cdt.id) over (partition by month(date_add(cdt.created_at, interval 13 hour)), di.pno) pno_count
                from fle_staging.customer_diff_ticket cdt
                left join fle_staging.diff_info di on di.id = cdt.diff_info_id
                join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    di.diff_marker_category not in (7,22)
                    and cdt.created_at >= '2022-11-30 11:00:00'
                    and cdt.created_at < '2023-02-28 11:00:00'
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
            month(date_add(cdt.created_at, interval 7 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-11-30 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal '应处理问题件数(剔除lost)'
    ,t2.deal_num 完结问题件数
    ,t1.should_not 应处理问题件数当月未完成
    ,t1.month_deal_ratio 当月问题件完结率
    ,zl.zl_num 滞留问题件单数
    ,t1.dam_short_ratio 破损短少问题件占比
    ,t1.cod_ratio COD金额问题件占比
    ,t1.other_ratio 其他问题件占比
    ,t2.avg_deal_time 完结问题件单均处理时长
    ,t2.dam_short_avg_time 破损短少问题件单均完结时长
    ,t2.cod_avg_time COD金额问题件单均完结时长
    ,t2.other_avg_time 其他问题件单均完结时长
    ,t1.jiedan_avg_time '问题件单均接单时长'
    ,t1.fin_avg_time '问题件单均接单-结单时长'
    ,cf.repeat_num 问题件重复包裹数
from
    ( -- 应处理
        select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and di.updated_at < date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 )) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2
    ) t1
left join
    ( -- 已完结
        select
            month(date_add(cdt.created_at, interval 7 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-11-30 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1 -- 已处理
        group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    ( -- 滞留
        select
            '12' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2022-12-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2022-12-31 17:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-01-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-01-31 11:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-02-28 11:00:00' -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-02-28 17:00:00')
                )
        group by 1,2
    ) zl  on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.cg_name
            ,t.month_d
            ,count(distinct t.pno) repeat_num
        from
            (
                select
                    cdt.id
                    ,month(date_add(cdt.created_at, interval 13 hour)) month_d
                    ,case
                        when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                        when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                        when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                        else cg.name
                    end cg_name
                    ,di.pno
                    ,count(cdt.id) over (partition by month(date_add(cdt.created_at, interval 13 hour)), di.pno) pno_count
                from fle_staging.customer_diff_ticket cdt
                left join fle_staging.diff_info di on di.id = cdt.diff_info_id
                join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    di.diff_marker_category not in (7,22)
                    and cdt.created_at >= '2022-11-30 11:00:00'
                    and cdt.created_at < '2023-02-28 11:00:00'
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on plt.pno = pi.pno
where
    plt.state = 6
    and plt.duty_result = 1
    and pi.state not in (5,7,8,9)
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on plt.pno = pi.pno
where
    plt.state = 6
    and plt.duty_result = 1
    and pi.state not in (5,7,8,9)
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal '应处理问题件数(剔除lost)'
    ,t2.deal_num 完结问题件数
    ,t1.should_not 应处理问题件数当月未完成
    ,t1.month_deal_ratio 当月问题件完结率
    ,zl.zl_num 滞留问题件单数
    ,t1.dam_short_ratio 破损短少问题件占比
    ,t1.cod_ratio COD金额问题件占比
    ,t1.other_ratio 其他问题件占比
    ,t2.avg_deal_time 完结问题件单均处理时长
    ,t2.dam_short_avg_time 破损短少问题件单均完结时长
    ,t2.cod_avg_time COD金额问题件单均完结时长
    ,t2.other_avg_time 其他问题件单均完结时长
    ,t1.jiedan_avg_time '问题件单均接单时长'
    ,t1.fin_avg_time '问题件单均接单-结单时长'
    ,cf.repeat_num 问题件重复包裹数
from
    ( -- 应处理
        select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and di.updated_at < date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 ))/count(distinct if(cdt.state = 1,cdt.id, null)) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2
    ) t1
left join
    ( -- 已完结
        select
            month(date_add(cdt.created_at, interval 7 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-11-30 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1 -- 已处理
        group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    ( -- 滞留
        select
            '12' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2022-12-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2022-12-31 17:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-01-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-01-31 11:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-02-28 11:00:00' -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-02-28 17:00:00')
                )
        group by 1,2
    ) zl  on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.cg_name
            ,t.month_d
            ,count(distinct t.pno) repeat_num
        from
            (
                select
                    cdt.id
                    ,month(date_add(cdt.created_at, interval 13 hour)) month_d
                    ,case
                        when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                        when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                        when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                        else cg.name
                    end cg_name
                    ,di.pno
                    ,count(cdt.id) over (partition by month(date_add(cdt.created_at, interval 13 hour)), di.pno) pno_count
                from fle_staging.customer_diff_ticket cdt
                left join fle_staging.diff_info di on di.id = cdt.diff_info_id
                join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    di.diff_marker_category not in (7,22)
                    and cdt.created_at >= '2022-11-30 11:00:00'
                    and cdt.created_at < '2023-02-28 11:00:00'
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select DATE_ADD(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), INTERVAL 10 DAY);
;-- -. . -..- - / . -. - .-. -.--
SELECT DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 MONTH), '%Y-%m-10');
;-- -. . -..- - / . -. - .-. -.--
select
    t1.month_d 月份
    ,t1.cg_name 项目组
    ,t1.should_deal '应处理问题件数(剔除lost)'
    ,t2.deal_num 完结问题件数
    ,t1.should_not 应处理问题件数当月未完成
    ,t1.month_deal_ratio 当月问题件完结率
    ,zl.zl_num 滞留问题件单数
    ,t1.dam_short_ratio 破损短少问题件占比
    ,t1.cod_ratio COD金额问题件占比
    ,t1.other_ratio 其他问题件占比
    ,t2.avg_deal_time 完结问题件单均处理时长
    ,t2.dam_short_avg_time 破损短少问题件单均完结时长
    ,t2.cod_avg_time COD金额问题件单均完结时长
    ,t2.other_avg_time 其他问题件单均完结时长
    ,t1.jiedan_avg_time '问题件单均接单时长'
    ,t1.fin_avg_time '问题件单均接单-结单时长'
    ,cf.repeat_num 问题件重复包裹数
from
    ( -- 应处理
        select
            month(date_add(cdt.created_at, interval 13 hour)) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) should_deal
            ,count(distinct if(di.state != 1 or ( di.state = 1 and di.updated_at > date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour)), cdt.id, null))  should_not
            ,count(distinct if(di.state = 1 and di.updated_at < date_add(adddate(last_day(date_add(cdt.created_at, interval 6 hour)), 1),interval 11 hour), cdt.id, null))/count(distinct cdt.id ) month_deal_ratio
            ,count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) dam_short_ratio
            ,count(distinct if(pi.cod_enabled = 1, cdt.id, null))/count(distinct cdt.id) cod_ratio
            ,count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))/count(distinct cdt.id ) other_ratio
            ,sum(if(cdt.state != 0, timestampdiff(second , cdt.created_at, cdt.first_operated_at)/3600, 0 ))/count(distinct if(cdt.state != 0 ,cdt.id, null)) jiedan_avg_time
            ,sum(if(cdt.state = 1, timestampdiff(second ,cdt.first_operated_at, cdt.updated_at)/3600, 0 ))/count(distinct if(cdt.state = 1,cdt.id, null)) fin_avg_time
        from fle_staging.customer_diff_ticket cdt
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2022-11-30 11:00:00'
            and cdt.created_at < '2023-02-28 11:00:00'
        group by 1,2
    ) t1
left join
    ( -- 已完结
        select
            month(cdt.updated_at) month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id ) deal_num
            ,sum(timestampdiff(second, cdt.created_at, cdt.updated_at)/3600)/count(distinct cdt.id) avg_deal_time
            ,sum(if(di.diff_marker_category in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(di.diff_marker_category in (5,6,20,21), cdt.id, null)) dam_short_avg_time
            ,sum(if(pi.cod_enabled = 1, timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 1, cdt.id, null)) cod_avg_time
            ,sum(if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), timestampdiff(second, cdt.created_at, cdt.updated_at)/3600, 0))/count(distinct if(pi.cod_enabled = 0 and di.diff_marker_category not in (5,6,20,21), cdt.id, null))  other_avg_time
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        where
            di.diff_marker_category not in (7,22)
            and cdt.updated_at >= '2022-11-30 17:00:00'
            and cdt.updated_at < '2023-02-28 17:00:00'
            and di.state = 1 -- 已处理
        group by 1,2
    ) t2 on t2.month_d = t1.month_d and t2.cg_name = t1.cg_name
left join
    ( -- 滞留
        select
            '12' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2022-12-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2022-12-31 17:00:00')
                )
        group by 1,2

        union all

        select
            '1' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-01-31 11:00:00'  -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-01-31 11:00:00')
                )
        group by 1,2

        union all

        select
            '2' month_d
            ,case
                when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                else cg.name
            end cg_name
            ,count(distinct cdt.id) zl_num
        from fle_staging.customer_diff_ticket cdt
        left join fle_staging.diff_info di on di.id = cdt.diff_info_id
        join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
        where
            di.diff_marker_category not in (7,22)
            and cdt.created_at >= '2021-12-31 17:00:00'
            and cdt.created_at < '2023-02-28 11:00:00' -- 18点之前产生
            and
                (
                    di.state != 1 or
                    (di.state = 1 and di.updated_at > '2023-02-28 17:00:00')
                )
        group by 1,2
    ) zl  on zl.month_d = t1.month_d and zl.cg_name = t1.cg_name
left join
    (
        select
            t.cg_name
            ,t.month_d
            ,count(distinct t.pno) repeat_num
        from
            (
                select
                    cdt.id
                    ,month(date_add(cdt.created_at, interval 13 hour)) month_d
                    ,case
                        when cdt.client_id = 'AA0416' then 'Lazada Buyer Return'
                        when cdt.client_id in ('AA0707','AA0657','AA0606') then 'Shopee Buyer Return'
                        when cdt.client_id in ('AA0649','AA0650') then 'Shein Buyer Return'
                        else cg.name
                    end cg_name
                    ,di.pno
                    ,count(cdt.id) over (partition by month(date_add(cdt.created_at, interval 13 hour)), di.pno) pno_count
                from fle_staging.customer_diff_ticket cdt
                left join fle_staging.diff_info di on di.id = cdt.diff_info_id
                join fle_staging.customer_group cg on cdt.group_id = cg.id and cg.name in ('Shopee','LAZADA','TikTok','THAI KAM','KAM CN')
                where
                    di.diff_marker_category not in (7,22)
                    and cdt.created_at >= '2022-11-30 11:00:00'
                    and cdt.created_at < '2023-02-28 11:00:00'
            ) t
        where
            t.pno_count >= 2
        group by 1,2
    ) cf on cf.month_d = t1.month_d and cf.cg_name = t1.cg_name;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on plt.pno = pi.pno
where
    plt.state = 6
    and plt.duty_result = 1
    and pi.state not in (5,7,8,9)
    and pi.interrupt_category = 3
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on plt.pno = pi.pno
where
    plt.state = 6
    and plt.duty_result = 1
    and pi.state not in (5,7,8,9)
    and pi.discard_enabled = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.t1
    ,t.t2
    ,t.t3
    ,t.t4
    ,t.t5
from tmpale.tmp_th_test_0316 t
where
    t.id = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.t1
    ,t.t2
    ,t.t3
    ,t.t4
    ,t.t5
    ,avg(t1,t2,t3,t4,t5)
from tmpale.tmp_th_test_0316 t
where
    t.id = 1;
;-- -. . -..- - / . -. - .-. -.--
select
#     t.t1
#     ,t.t2
#     ,t.t3
#     ,t.t4
#     ,t.t5
    ,avg(t1,t2,t3,t4,t5)
from tmpale.tmp_th_test_0316 t
where
    t.id = 1;
;-- -. . -..- - / . -. - .-. -.--
select
#     t.t1
#     ,t.t2
#     ,t.t3
#     ,t.t4
#     ,t.t5
    avg(t1,t2,t3,t4,t5)
from tmpale.tmp_th_test_0316 t
where
    t.id = 1;
;-- -. . -..- - / . -. - .-. -.--
select
#     t.t1
#     ,t.t2
#     ,t.t3
#     ,t.t4
#     ,t.t5
    t0,
    avg(t1,t2,t3,t4,t5)
from tmpale.tmp_th_test_0316 t
where
    t.id = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
#     t.t1
#     ,t.t2
#     ,t.t3
#     ,t.t4
#     ,t.t5
    t.id,
    avg(t1,t2,t3,t4,t5)
from tmpale.tmp_th_test_0316 t
where
    t.id = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at desc ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + timestampdiff(second, wor.created_at, t2.created_at) + timestampdiff(second, t2.created_at, t3.created_at))/(1 + ifnull(t2.created_at,0) + ifnull(t3.created_at,0)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
order by 7;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at desc ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + timestampdiff(second, wor.created_at, t2.created_at) + timestampdiff(second, t2.created_at, t3.created_at))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
order by 7;
;-- -. . -..- - / . -. - .-. -.--
select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at desc ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.id = '0916763113890239';
;-- -. . -..- - / . -. - .-. -.--
select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at desc ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0916763113890239';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0916763113890239'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + timestampdiff(second, wor.created_at, t2.created_at) + timestampdiff(second, t2.created_at, t3.created_at))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
order by 7;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0916763113890239'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
order by 7;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pd.last_route_action
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0316 t on t.pno = pi.pno
left join bi_pro.parcel_detail pd on pd.pno = pi.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
#     ,pd.last_route_action
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0316 t on t.pno = pi.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
#     ,pd.last_route_action
from fle_staging.parcel_info pi
# join tmpale.tmp_th_pno_0316 t on t.pno = pi.pno
# left join bi_pro.parcel_detail pd on pd.pno = pi.pno
where
    pi.pno in ('TH01043PNDWZ1B', 'TH01273UK0EU8D', 'TH04033PW36Y7A1', 'TH04033RZ7668A1', 'TH10033SAVRJ7K', 'TH10033SUC0X2K', 'TH10033TXAD56K', 'TH10033U71897B', 'TH10033UFG3N5K', 'TH20083HC5138B', 'TH24103N8JDW1B', 'TH67023QZ3T32C', 'THT01052B5HB8Z', 'THT01052CNZY9Z', 'THT013413GF97Z', 'THT04032CC0K2Z', 'THT05062FRFC5Z', 'THT67012B7QC9Z', 'THT67012BSNV5Z', 'THT67012D6ZS7Z', 'TH10033U4XZ40A', 'TH20083UK3EZ5C', 'TH20073VC6FB0B', 'TH04033QUZ5V4A1', 'TH04073PWE6P8K', 'TH20073RSMND0D', 'TH04013GY3C64I', 'TH20043V98EG4B', 'TH20073JYJBK0B', 'THT650120NF71Z', 'TH68043RH64Y2F', 'THT56107V97H3Z', 'TH10033U2S8P9P', 'TH67013QENWT9G', 'THT24011NRU87Z', 'TH33023BBP1E3C', 'TH27013TZ6TA5K', 'TH75103W3HT99C', 'TH01213Q1MTZ4A', 'TH21013VDNK97F', 'TH67013R9Y5R7H', 'TH20073EDGWN5B', 'TH01392WH3Y51B', 'THT15011KGTN6Z', 'TH01403RBZ4R0B0', 'THT20047PEQV5Z', 'TH04073PGWAK2A', 'TH04073KDUAG8K', 'TH10113V8QYG1A', 'TH68043RC3SC6F', 'TH19033UZXT74E', 'TH67013SBFDW1E', 'TH24033B29S10A', 'TH10113VE2B37B', 'TH01053VJQJW6B', 'TH04033JM5CD0A1', 'THT71057SC549Z', 'TH16013MVTPU0L', 'TH04073RKWXH4K-3', 'TH67013S01764H', 'TH21063UYU0U8A', 'TH67013RTA7W9G', 'TH68043S5REX1F', 'THT66021EQRK7Z', 'TH01373V58QS1C', 'TH63083SYPJ90B', 'TH10043VBWR22C', 'TH04073MWHYG9J', 'TH20083S5PKJ5A', 'TH20043VEAQT1E', 'TH67033V05572F', 'THT05062HBHQ8Z', 'TH70043V92E25K', 'TH66023HTTY82C', 'TH04033RDGXM9A1', 'THT0131BVKG9Z', 'THT670126BE69Z', 'TH20083UZXEQ8B', 'TH15013QRRZQ1O', 'TH20073K2ZRE7A', 'TH01403UU4SC8B0', 'TH01293BGQRC4A', 'THT04037PNHT5Z', 'THT1501148ZE3Z', 'THT24021P92A8Z', 'TH44113TG15V3B', 'TH01303VBEWY7A', 'TH04033QHGVW9A1', 'TH01283S8VQT3B1', 'TH67023H02DF9C', 'TH48013VEKGV1I', 'TH67013RJVPA6G', 'TH01203T5GA33B', 'TH67013R20E90G', 'TH24113MFMC47E', 'TH04063T1FT27C', 'TH24113MKGAC4C', 'TH20013NXYCJ2F', 'TH01403TSSVG6B0', 'TH67013S6V0Q7H', 'TH01373TXWYE9B', 'TH68043RPYAK0F', 'TH67033V9BEA2D', 'TH20073PG9TU9C', 'TH67013N36E68G', 'TH66023TKXTG3C', 'TH01203N984F1C', 'TH47133SX04K8I', 'TH70083PYRGK4B', 'TH20053TS9VJ3B', 'TH22043B4DTK7D', 'THT20047XU831Z', 'TH10033VEZ3P2E', 'TH20043V84MX7A', 'TH01393V87RF4E', 'TH67013RSN591H', 'TH01393HRZWK9F', 'TH26073U6VA98D', 'TH67013RVEBQ8G', 'TH04033TF7D09A1', 'TH20043HCS5Z3B1', 'TH01153NH7921A', 'THT24011M7TK4Z', 'TH61023TVVA45C', 'TH67013RMVS53G', 'TH670132JD7Q7E', 'TH67013RF6KH8G', 'TH05033TPS9X9C', 'TH37013VZ99E1A', 'TH68043RB4GT6F', 'TH32013CAU8M7A', 'TH61083B18GD8H', 'TH68043RTRX38F', 'TH71033UVTUJ9M', 'TH68043REJAX8F', 'TH67033R54H76F', 'TH67033EPWJ62A', 'TH11013R98463A', 'TH01053VA3JN1B', 'TH01303VESAU3C', 'TH02063J4EF95A0', 'TH01233S2KZ84E', 'LEXDO0057480603', 'TH01473TB4BH5B', 'TH67023R47AN0A', 'TH20073J9STN5E0', 'TH01053J3CGZ0C', 'TH01413VJ2J70B', 'TH70033UTT9C4D', 'TH20043DJX794A', 'TH20043RYW746H', 'SSLT730005611450', 'TH20043DN7JD3C', 'TH20043UU8DM1A', 'TH67013RNH7U2H', 'TH03043VCWQZ9H', 'TH01403RME2H7B0', 'TH01473UYWWS3A', 'TH20043UG13X3D', 'TH04033SA8UM9A1', 'TH01413VCJ0B1B', 'TH01403RCG2Z8B0', 'TH01273TEMWW7D', 'TH01503RY1FM6B0', 'TH64013HS07V7L', 'THT20047RMPP8Z', 'TH26073UFH341D', 'THT05032JPU55Z', 'TH20073JUV2C1B', 'TH67013RVCHB5G', 'TH24023VBEX45H', 'TH67013TBU433G', 'TH67013SWKQ56G', 'TH02023TETZ56D', 'THT21017R76C8Z', 'TH67013RTBG03G', 'TH20073RWG952E', 'THT54111Y05S5Z', 'TH01373V3N4T2B', 'TH67013RWV669H', 'TH01203RGB9T4B', 'THT20047RFJA9Z', 'TH64013E35UV5N', 'TH05063UAA8V7D', 'TH03043VDRPD3H', 'TH67013RH96T3G', 'TH04033TQE5B2A0', 'TH68043REV5B2F', 'TH15013QS6KP7O', 'TH67023RN22C5B', 'TH20083VF0UN0B', 'TH09013RNABW5D', 'TH02063UA32D7A', 'TH01213TPZH03A', 'TH68043RMVUJ0F', 'TH33053UWG5Q1C', 'THT0403KYNR5Z', 'TH02063T0QV55A', 'TH20043VEBBY8A', 'TH67013QXE7A7H', 'THT030122HJK2Z', 'TH10113V4QZ57B', 'TH63053KMKF75J', 'THT21012462Z5Z', 'TH67013SK64G8E', 'TH65013TY1KY1H', 'TH01073TUT8A9A', 'TH70083R9YWY5C', 'FLACB02017460937', 'TH01473UFV758B', 'TH10113UVYV98B', 'TH56023BQBZM8H', 'TH67013RH7VC8H', 'TH01213SJDJG6A', 'TH66023KG2X04C', 'TH21013V23S27C', 'TH01373JKRJ54B', 'THT56027XXEN0Z', 'TH66023J06CX6C', 'TH24023N0S583F', 'TH68043R62UJ9F', 'TH24043V2QUQ7D', 'TH67013SU38Q9G', 'TH67013RWBXK7G', 'TH68043RFPHE5F', 'TH65013MKY0M5G', 'TH10033VEA2Z4I', 'TH04033S62PK5A0', 'TH10033VDZBU2E', 'TH67013QQUSD5G', 'TH10033UAHNR6P', 'TH013932659B4G', 'TH01163UWSH23A0', 'TH01183VDZTS6A0', 'THT03022HC7C4Z', 'TH21013UUG723F', 'TH05033VB0VS9C', 'TH68043RMT4M6F', 'TH01373V3NEC0B', 'TH67013RVGR36G', 'TH55033K9VAG8B', 'TH01423UPVN92A', 'THT01407R38E5Z', 'TH10033V3HKC0Q', 'TH01473VBCC06C', 'TH65013SKH3W4H', 'TH67013Q87KT5H', 'TH01183RVDKX7A1', 'TH66023KJ79Z8C', 'TH67023HRZHJ8C', 'TH02043T5RW63O', 'TH10113VASDZ8B', 'TH05033U23QE7B', 'TH21063Q8GYK3A', 'TH05033USZTC8I', 'TH67013RPBH03G', 'TH20073JSVJK6B', 'LEXPU0180148516', 'TH67013RSGT12H', 'TH01393VJFQZ4B', 'TH47013U4XUC1C', 'THT67022AU899Z', 'TH67013RV5G61G', 'THT21062BHSV7Z', 'TH05033UH8NQ3G', 'SSLT730006233687', 'TH26073UZ34E7A', 'THT01407QXC36Z', 'TH74043V9FJX5C', 'TH10043VGDEP0E', 'TH12033VA3MD1B', 'TH20073HW5T27B', 'TH01273GJFNC3D', 'TH67013K54Q24B', 'TH05033UQWPU5J', 'TH02063FA2E71A-1', 'TH04033RMX396A1', 'TH20043CPU6J9B0', 'TH20083U2QAV3B', 'TH13133TYY7Q9D', 'TH20043V95CS6G', 'THT21017U94Y0Z', 'TH40053NCX632D', 'TH02063CAA6C8A', 'TH13023RM3PV2A-1', 'THT21062BDX08Z', 'THT01407RXMJ4Z', 'TH20073JJQWU7B', 'TH01373VNA8B8B', 'TH20083W61SP1D', 'TH01423U1JGS6A', 'TH24013NB1705L', 'TH20043V3D3C0D', 'TH24023VBBN50H', 'TH10113UXGYB2D', 'TH68043U88W11E', 'TH67013P6RCW6E', 'TH10033R2TZE6E', 'TH15063SJVGM1H', 'TH68043R5JS62F', 'TH10033V87PV6A', 'THT20047RDFW5Z', 'TH62013TA49W5A', 'TH10033UUGHX4B', 'THT21017R6VD6Z', 'TH20043DWPDU5C', 'TH01373V3R8A4C', 'TH15063HW76U7J', 'TH66013U1W973H', 'THT66021EHQ63Z', 'TH20043U2DVU4C', 'TH01473U1G967B', 'TH65023Q1S356B', 'TH20073HTQW31A', 'TH67013RTBKY5G', 'TH70083TSXUF4B', 'TH01473UWFFM3B', 'TH20073RWG991E', 'TH01143S2H0A2E', 'TH65053Q78UG5E', 'TH04073S5UH49C', 'TH01303VE0S29A', 'TH01373UB3D82C', 'TH60033PV8G64B', 'TH04063MQU3G4A1', 'THT20087P7NW5Z', 'TH01303SDDTP2C', 'TH10033UHG168B', 'TH26073UY1ZM1A', 'SSLT730006651767', 'TH01303EJW0H8A', 'TH66023M0BQ69C', 'THT20042G8989Z', 'TH20043UQCNT9D', 'TH67033SWMKH7C', '7110015818354', 'TH01373E7VJ83A', 'TH01403UUJGZ3B0', 'TH67023U39PJ7C', 'TH01473VJW806A', 'TH10113V5SA56B', 'THT20042HTNU4Z', 'TH38013CVWVA6A0', 'TH16033BJJFT0C', 'TH67033QAHVX6F', 'TH68043RGX702F', 'TH10113UQSBM7B', 'TH01423TNP7F6A', 'TH26063BFXQ89A', 'TH05063VDKN39F', 'TH04063V87RJ2E', 'TH04033V8HM87A1');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pd.last_route_action
from fle_staging.parcel_info pi
# join tmpale.tmp_th_pno_0316 t on t.pno = pi.pno
left join bi_pro.parcel_detail pd on pd.pno = pi.pno
where
    pi.pno in ('TH01043PNDWZ1B', 'TH01273UK0EU8D', 'TH04033PW36Y7A1', 'TH04033RZ7668A1', 'TH10033SAVRJ7K', 'TH10033SUC0X2K', 'TH10033TXAD56K', 'TH10033U71897B', 'TH10033UFG3N5K', 'TH20083HC5138B', 'TH24103N8JDW1B', 'TH67023QZ3T32C', 'THT01052B5HB8Z', 'THT01052CNZY9Z', 'THT013413GF97Z', 'THT04032CC0K2Z', 'THT05062FRFC5Z', 'THT67012B7QC9Z', 'THT67012BSNV5Z', 'THT67012D6ZS7Z', 'TH10033U4XZ40A', 'TH20083UK3EZ5C', 'TH20073VC6FB0B', 'TH04033QUZ5V4A1', 'TH04073PWE6P8K', 'TH20073RSMND0D', 'TH04013GY3C64I', 'TH20043V98EG4B', 'TH20073JYJBK0B', 'THT650120NF71Z', 'TH68043RH64Y2F', 'THT56107V97H3Z', 'TH10033U2S8P9P', 'TH67013QENWT9G', 'THT24011NRU87Z', 'TH33023BBP1E3C', 'TH27013TZ6TA5K', 'TH75103W3HT99C', 'TH01213Q1MTZ4A', 'TH21013VDNK97F', 'TH67013R9Y5R7H', 'TH20073EDGWN5B', 'TH01392WH3Y51B', 'THT15011KGTN6Z', 'TH01403RBZ4R0B0', 'THT20047PEQV5Z', 'TH04073PGWAK2A', 'TH04073KDUAG8K', 'TH10113V8QYG1A', 'TH68043RC3SC6F', 'TH19033UZXT74E', 'TH67013SBFDW1E', 'TH24033B29S10A', 'TH10113VE2B37B', 'TH01053VJQJW6B', 'TH04033JM5CD0A1', 'THT71057SC549Z', 'TH16013MVTPU0L', 'TH04073RKWXH4K-3', 'TH67013S01764H', 'TH21063UYU0U8A', 'TH67013RTA7W9G', 'TH68043S5REX1F', 'THT66021EQRK7Z', 'TH01373V58QS1C', 'TH63083SYPJ90B', 'TH10043VBWR22C', 'TH04073MWHYG9J', 'TH20083S5PKJ5A', 'TH20043VEAQT1E', 'TH67033V05572F', 'THT05062HBHQ8Z', 'TH70043V92E25K', 'TH66023HTTY82C', 'TH04033RDGXM9A1', 'THT0131BVKG9Z', 'THT670126BE69Z', 'TH20083UZXEQ8B', 'TH15013QRRZQ1O', 'TH20073K2ZRE7A', 'TH01403UU4SC8B0', 'TH01293BGQRC4A', 'THT04037PNHT5Z', 'THT1501148ZE3Z', 'THT24021P92A8Z', 'TH44113TG15V3B', 'TH01303VBEWY7A', 'TH04033QHGVW9A1', 'TH01283S8VQT3B1', 'TH67023H02DF9C', 'TH48013VEKGV1I', 'TH67013RJVPA6G', 'TH01203T5GA33B', 'TH67013R20E90G', 'TH24113MFMC47E', 'TH04063T1FT27C', 'TH24113MKGAC4C', 'TH20013NXYCJ2F', 'TH01403TSSVG6B0', 'TH67013S6V0Q7H', 'TH01373TXWYE9B', 'TH68043RPYAK0F', 'TH67033V9BEA2D', 'TH20073PG9TU9C', 'TH67013N36E68G', 'TH66023TKXTG3C', 'TH01203N984F1C', 'TH47133SX04K8I', 'TH70083PYRGK4B', 'TH20053TS9VJ3B', 'TH22043B4DTK7D', 'THT20047XU831Z', 'TH10033VEZ3P2E', 'TH20043V84MX7A', 'TH01393V87RF4E', 'TH67013RSN591H', 'TH01393HRZWK9F', 'TH26073U6VA98D', 'TH67013RVEBQ8G', 'TH04033TF7D09A1', 'TH20043HCS5Z3B1', 'TH01153NH7921A', 'THT24011M7TK4Z', 'TH61023TVVA45C', 'TH67013RMVS53G', 'TH670132JD7Q7E', 'TH67013RF6KH8G', 'TH05033TPS9X9C', 'TH37013VZ99E1A', 'TH68043RB4GT6F', 'TH32013CAU8M7A', 'TH61083B18GD8H', 'TH68043RTRX38F', 'TH71033UVTUJ9M', 'TH68043REJAX8F', 'TH67033R54H76F', 'TH67033EPWJ62A', 'TH11013R98463A', 'TH01053VA3JN1B', 'TH01303VESAU3C', 'TH02063J4EF95A0', 'TH01233S2KZ84E', 'LEXDO0057480603', 'TH01473TB4BH5B', 'TH67023R47AN0A', 'TH20073J9STN5E0', 'TH01053J3CGZ0C', 'TH01413VJ2J70B', 'TH70033UTT9C4D', 'TH20043DJX794A', 'TH20043RYW746H', 'SSLT730005611450', 'TH20043DN7JD3C', 'TH20043UU8DM1A', 'TH67013RNH7U2H', 'TH03043VCWQZ9H', 'TH01403RME2H7B0', 'TH01473UYWWS3A', 'TH20043UG13X3D', 'TH04033SA8UM9A1', 'TH01413VCJ0B1B', 'TH01403RCG2Z8B0', 'TH01273TEMWW7D', 'TH01503RY1FM6B0', 'TH64013HS07V7L', 'THT20047RMPP8Z', 'TH26073UFH341D', 'THT05032JPU55Z', 'TH20073JUV2C1B', 'TH67013RVCHB5G', 'TH24023VBEX45H', 'TH67013TBU433G', 'TH67013SWKQ56G', 'TH02023TETZ56D', 'THT21017R76C8Z', 'TH67013RTBG03G', 'TH20073RWG952E', 'THT54111Y05S5Z', 'TH01373V3N4T2B', 'TH67013RWV669H', 'TH01203RGB9T4B', 'THT20047RFJA9Z', 'TH64013E35UV5N', 'TH05063UAA8V7D', 'TH03043VDRPD3H', 'TH67013RH96T3G', 'TH04033TQE5B2A0', 'TH68043REV5B2F', 'TH15013QS6KP7O', 'TH67023RN22C5B', 'TH20083VF0UN0B', 'TH09013RNABW5D', 'TH02063UA32D7A', 'TH01213TPZH03A', 'TH68043RMVUJ0F', 'TH33053UWG5Q1C', 'THT0403KYNR5Z', 'TH02063T0QV55A', 'TH20043VEBBY8A', 'TH67013QXE7A7H', 'THT030122HJK2Z', 'TH10113V4QZ57B', 'TH63053KMKF75J', 'THT21012462Z5Z', 'TH67013SK64G8E', 'TH65013TY1KY1H', 'TH01073TUT8A9A', 'TH70083R9YWY5C', 'FLACB02017460937', 'TH01473UFV758B', 'TH10113UVYV98B', 'TH56023BQBZM8H', 'TH67013RH7VC8H', 'TH01213SJDJG6A', 'TH66023KG2X04C', 'TH21013V23S27C', 'TH01373JKRJ54B', 'THT56027XXEN0Z', 'TH66023J06CX6C', 'TH24023N0S583F', 'TH68043R62UJ9F', 'TH24043V2QUQ7D', 'TH67013SU38Q9G', 'TH67013RWBXK7G', 'TH68043RFPHE5F', 'TH65013MKY0M5G', 'TH10033VEA2Z4I', 'TH04033S62PK5A0', 'TH10033VDZBU2E', 'TH67013QQUSD5G', 'TH10033UAHNR6P', 'TH013932659B4G', 'TH01163UWSH23A0', 'TH01183VDZTS6A0', 'THT03022HC7C4Z', 'TH21013UUG723F', 'TH05033VB0VS9C', 'TH68043RMT4M6F', 'TH01373V3NEC0B', 'TH67013RVGR36G', 'TH55033K9VAG8B', 'TH01423UPVN92A', 'THT01407R38E5Z', 'TH10033V3HKC0Q', 'TH01473VBCC06C', 'TH65013SKH3W4H', 'TH67013Q87KT5H', 'TH01183RVDKX7A1', 'TH66023KJ79Z8C', 'TH67023HRZHJ8C', 'TH02043T5RW63O', 'TH10113VASDZ8B', 'TH05033U23QE7B', 'TH21063Q8GYK3A', 'TH05033USZTC8I', 'TH67013RPBH03G', 'TH20073JSVJK6B', 'LEXPU0180148516', 'TH67013RSGT12H', 'TH01393VJFQZ4B', 'TH47013U4XUC1C', 'THT67022AU899Z', 'TH67013RV5G61G', 'THT21062BHSV7Z', 'TH05033UH8NQ3G', 'SSLT730006233687', 'TH26073UZ34E7A', 'THT01407QXC36Z', 'TH74043V9FJX5C', 'TH10043VGDEP0E', 'TH12033VA3MD1B', 'TH20073HW5T27B', 'TH01273GJFNC3D', 'TH67013K54Q24B', 'TH05033UQWPU5J', 'TH02063FA2E71A-1', 'TH04033RMX396A1', 'TH20043CPU6J9B0', 'TH20083U2QAV3B', 'TH13133TYY7Q9D', 'TH20043V95CS6G', 'THT21017U94Y0Z', 'TH40053NCX632D', 'TH02063CAA6C8A', 'TH13023RM3PV2A-1', 'THT21062BDX08Z', 'THT01407RXMJ4Z', 'TH20073JJQWU7B', 'TH01373VNA8B8B', 'TH20083W61SP1D', 'TH01423U1JGS6A', 'TH24013NB1705L', 'TH20043V3D3C0D', 'TH24023VBBN50H', 'TH10113UXGYB2D', 'TH68043U88W11E', 'TH67013P6RCW6E', 'TH10033R2TZE6E', 'TH15063SJVGM1H', 'TH68043R5JS62F', 'TH10033V87PV6A', 'THT20047RDFW5Z', 'TH62013TA49W5A', 'TH10033UUGHX4B', 'THT21017R6VD6Z', 'TH20043DWPDU5C', 'TH01373V3R8A4C', 'TH15063HW76U7J', 'TH66013U1W973H', 'THT66021EHQ63Z', 'TH20043U2DVU4C', 'TH01473U1G967B', 'TH65023Q1S356B', 'TH20073HTQW31A', 'TH67013RTBKY5G', 'TH70083TSXUF4B', 'TH01473UWFFM3B', 'TH20073RWG991E', 'TH01143S2H0A2E', 'TH65053Q78UG5E', 'TH04073S5UH49C', 'TH01303VE0S29A', 'TH01373UB3D82C', 'TH60033PV8G64B', 'TH04063MQU3G4A1', 'THT20087P7NW5Z', 'TH01303SDDTP2C', 'TH10033UHG168B', 'TH26073UY1ZM1A', 'SSLT730006651767', 'TH01303EJW0H8A', 'TH66023M0BQ69C', 'THT20042G8989Z', 'TH20043UQCNT9D', 'TH67033SWMKH7C', '7110015818354', 'TH01373E7VJ83A', 'TH01403UUJGZ3B0', 'TH67023U39PJ7C', 'TH01473VJW806A', 'TH10113V5SA56B', 'THT20042HTNU4Z', 'TH38013CVWVA6A0', 'TH16033BJJFT0C', 'TH67033QAHVX6F', 'TH68043RGX702F', 'TH10113UQSBM7B', 'TH01423TNP7F6A', 'TH26063BFXQ89A', 'TH05063VDKN39F', 'TH04063V87RJ2E', 'TH04033V8HM87A1');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case pd.last_route_action
        when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
    end as 最后一条路由
from fle_staging.parcel_info pi
# join tmpale.tmp_th_pno_0316 t on t.pno = pi.pno
left join bi_pro.parcel_detail pd on pd.pno = pi.pno
where
    pi.pno in ('TH01043PNDWZ1B', 'TH01273UK0EU8D', 'TH04033PW36Y7A1', 'TH04033RZ7668A1', 'TH10033SAVRJ7K', 'TH10033SUC0X2K', 'TH10033TXAD56K', 'TH10033U71897B', 'TH10033UFG3N5K', 'TH20083HC5138B', 'TH24103N8JDW1B', 'TH67023QZ3T32C', 'THT01052B5HB8Z', 'THT01052CNZY9Z', 'THT013413GF97Z', 'THT04032CC0K2Z', 'THT05062FRFC5Z', 'THT67012B7QC9Z', 'THT67012BSNV5Z', 'THT67012D6ZS7Z', 'TH10033U4XZ40A', 'TH20083UK3EZ5C', 'TH20073VC6FB0B', 'TH04033QUZ5V4A1', 'TH04073PWE6P8K', 'TH20073RSMND0D', 'TH04013GY3C64I', 'TH20043V98EG4B', 'TH20073JYJBK0B', 'THT650120NF71Z', 'TH68043RH64Y2F', 'THT56107V97H3Z', 'TH10033U2S8P9P', 'TH67013QENWT9G', 'THT24011NRU87Z', 'TH33023BBP1E3C', 'TH27013TZ6TA5K', 'TH75103W3HT99C', 'TH01213Q1MTZ4A', 'TH21013VDNK97F', 'TH67013R9Y5R7H', 'TH20073EDGWN5B', 'TH01392WH3Y51B', 'THT15011KGTN6Z', 'TH01403RBZ4R0B0', 'THT20047PEQV5Z', 'TH04073PGWAK2A', 'TH04073KDUAG8K', 'TH10113V8QYG1A', 'TH68043RC3SC6F', 'TH19033UZXT74E', 'TH67013SBFDW1E', 'TH24033B29S10A', 'TH10113VE2B37B', 'TH01053VJQJW6B', 'TH04033JM5CD0A1', 'THT71057SC549Z', 'TH16013MVTPU0L', 'TH04073RKWXH4K-3', 'TH67013S01764H', 'TH21063UYU0U8A', 'TH67013RTA7W9G', 'TH68043S5REX1F', 'THT66021EQRK7Z', 'TH01373V58QS1C', 'TH63083SYPJ90B', 'TH10043VBWR22C', 'TH04073MWHYG9J', 'TH20083S5PKJ5A', 'TH20043VEAQT1E', 'TH67033V05572F', 'THT05062HBHQ8Z', 'TH70043V92E25K', 'TH66023HTTY82C', 'TH04033RDGXM9A1', 'THT0131BVKG9Z', 'THT670126BE69Z', 'TH20083UZXEQ8B', 'TH15013QRRZQ1O', 'TH20073K2ZRE7A', 'TH01403UU4SC8B0', 'TH01293BGQRC4A', 'THT04037PNHT5Z', 'THT1501148ZE3Z', 'THT24021P92A8Z', 'TH44113TG15V3B', 'TH01303VBEWY7A', 'TH04033QHGVW9A1', 'TH01283S8VQT3B1', 'TH67023H02DF9C', 'TH48013VEKGV1I', 'TH67013RJVPA6G', 'TH01203T5GA33B', 'TH67013R20E90G', 'TH24113MFMC47E', 'TH04063T1FT27C', 'TH24113MKGAC4C', 'TH20013NXYCJ2F', 'TH01403TSSVG6B0', 'TH67013S6V0Q7H', 'TH01373TXWYE9B', 'TH68043RPYAK0F', 'TH67033V9BEA2D', 'TH20073PG9TU9C', 'TH67013N36E68G', 'TH66023TKXTG3C', 'TH01203N984F1C', 'TH47133SX04K8I', 'TH70083PYRGK4B', 'TH20053TS9VJ3B', 'TH22043B4DTK7D', 'THT20047XU831Z', 'TH10033VEZ3P2E', 'TH20043V84MX7A', 'TH01393V87RF4E', 'TH67013RSN591H', 'TH01393HRZWK9F', 'TH26073U6VA98D', 'TH67013RVEBQ8G', 'TH04033TF7D09A1', 'TH20043HCS5Z3B1', 'TH01153NH7921A', 'THT24011M7TK4Z', 'TH61023TVVA45C', 'TH67013RMVS53G', 'TH670132JD7Q7E', 'TH67013RF6KH8G', 'TH05033TPS9X9C', 'TH37013VZ99E1A', 'TH68043RB4GT6F', 'TH32013CAU8M7A', 'TH61083B18GD8H', 'TH68043RTRX38F', 'TH71033UVTUJ9M', 'TH68043REJAX8F', 'TH67033R54H76F', 'TH67033EPWJ62A', 'TH11013R98463A', 'TH01053VA3JN1B', 'TH01303VESAU3C', 'TH02063J4EF95A0', 'TH01233S2KZ84E', 'LEXDO0057480603', 'TH01473TB4BH5B', 'TH67023R47AN0A', 'TH20073J9STN5E0', 'TH01053J3CGZ0C', 'TH01413VJ2J70B', 'TH70033UTT9C4D', 'TH20043DJX794A', 'TH20043RYW746H', 'SSLT730005611450', 'TH20043DN7JD3C', 'TH20043UU8DM1A', 'TH67013RNH7U2H', 'TH03043VCWQZ9H', 'TH01403RME2H7B0', 'TH01473UYWWS3A', 'TH20043UG13X3D', 'TH04033SA8UM9A1', 'TH01413VCJ0B1B', 'TH01403RCG2Z8B0', 'TH01273TEMWW7D', 'TH01503RY1FM6B0', 'TH64013HS07V7L', 'THT20047RMPP8Z', 'TH26073UFH341D', 'THT05032JPU55Z', 'TH20073JUV2C1B', 'TH67013RVCHB5G', 'TH24023VBEX45H', 'TH67013TBU433G', 'TH67013SWKQ56G', 'TH02023TETZ56D', 'THT21017R76C8Z', 'TH67013RTBG03G', 'TH20073RWG952E', 'THT54111Y05S5Z', 'TH01373V3N4T2B', 'TH67013RWV669H', 'TH01203RGB9T4B', 'THT20047RFJA9Z', 'TH64013E35UV5N', 'TH05063UAA8V7D', 'TH03043VDRPD3H', 'TH67013RH96T3G', 'TH04033TQE5B2A0', 'TH68043REV5B2F', 'TH15013QS6KP7O', 'TH67023RN22C5B', 'TH20083VF0UN0B', 'TH09013RNABW5D', 'TH02063UA32D7A', 'TH01213TPZH03A', 'TH68043RMVUJ0F', 'TH33053UWG5Q1C', 'THT0403KYNR5Z', 'TH02063T0QV55A', 'TH20043VEBBY8A', 'TH67013QXE7A7H', 'THT030122HJK2Z', 'TH10113V4QZ57B', 'TH63053KMKF75J', 'THT21012462Z5Z', 'TH67013SK64G8E', 'TH65013TY1KY1H', 'TH01073TUT8A9A', 'TH70083R9YWY5C', 'FLACB02017460937', 'TH01473UFV758B', 'TH10113UVYV98B', 'TH56023BQBZM8H', 'TH67013RH7VC8H', 'TH01213SJDJG6A', 'TH66023KG2X04C', 'TH21013V23S27C', 'TH01373JKRJ54B', 'THT56027XXEN0Z', 'TH66023J06CX6C', 'TH24023N0S583F', 'TH68043R62UJ9F', 'TH24043V2QUQ7D', 'TH67013SU38Q9G', 'TH67013RWBXK7G', 'TH68043RFPHE5F', 'TH65013MKY0M5G', 'TH10033VEA2Z4I', 'TH04033S62PK5A0', 'TH10033VDZBU2E', 'TH67013QQUSD5G', 'TH10033UAHNR6P', 'TH013932659B4G', 'TH01163UWSH23A0', 'TH01183VDZTS6A0', 'THT03022HC7C4Z', 'TH21013UUG723F', 'TH05033VB0VS9C', 'TH68043RMT4M6F', 'TH01373V3NEC0B', 'TH67013RVGR36G', 'TH55033K9VAG8B', 'TH01423UPVN92A', 'THT01407R38E5Z', 'TH10033V3HKC0Q', 'TH01473VBCC06C', 'TH65013SKH3W4H', 'TH67013Q87KT5H', 'TH01183RVDKX7A1', 'TH66023KJ79Z8C', 'TH67023HRZHJ8C', 'TH02043T5RW63O', 'TH10113VASDZ8B', 'TH05033U23QE7B', 'TH21063Q8GYK3A', 'TH05033USZTC8I', 'TH67013RPBH03G', 'TH20073JSVJK6B', 'LEXPU0180148516', 'TH67013RSGT12H', 'TH01393VJFQZ4B', 'TH47013U4XUC1C', 'THT67022AU899Z', 'TH67013RV5G61G', 'THT21062BHSV7Z', 'TH05033UH8NQ3G', 'SSLT730006233687', 'TH26073UZ34E7A', 'THT01407QXC36Z', 'TH74043V9FJX5C', 'TH10043VGDEP0E', 'TH12033VA3MD1B', 'TH20073HW5T27B', 'TH01273GJFNC3D', 'TH67013K54Q24B', 'TH05033UQWPU5J', 'TH02063FA2E71A-1', 'TH04033RMX396A1', 'TH20043CPU6J9B0', 'TH20083U2QAV3B', 'TH13133TYY7Q9D', 'TH20043V95CS6G', 'THT21017U94Y0Z', 'TH40053NCX632D', 'TH02063CAA6C8A', 'TH13023RM3PV2A-1', 'THT21062BDX08Z', 'THT01407RXMJ4Z', 'TH20073JJQWU7B', 'TH01373VNA8B8B', 'TH20083W61SP1D', 'TH01423U1JGS6A', 'TH24013NB1705L', 'TH20043V3D3C0D', 'TH24023VBBN50H', 'TH10113UXGYB2D', 'TH68043U88W11E', 'TH67013P6RCW6E', 'TH10033R2TZE6E', 'TH15063SJVGM1H', 'TH68043R5JS62F', 'TH10033V87PV6A', 'THT20047RDFW5Z', 'TH62013TA49W5A', 'TH10033UUGHX4B', 'THT21017R6VD6Z', 'TH20043DWPDU5C', 'TH01373V3R8A4C', 'TH15063HW76U7J', 'TH66013U1W973H', 'THT66021EHQ63Z', 'TH20043U2DVU4C', 'TH01473U1G967B', 'TH65023Q1S356B', 'TH20073HTQW31A', 'TH67013RTBKY5G', 'TH70083TSXUF4B', 'TH01473UWFFM3B', 'TH20073RWG991E', 'TH01143S2H0A2E', 'TH65053Q78UG5E', 'TH04073S5UH49C', 'TH01303VE0S29A', 'TH01373UB3D82C', 'TH60033PV8G64B', 'TH04063MQU3G4A1', 'THT20087P7NW5Z', 'TH01303SDDTP2C', 'TH10033UHG168B', 'TH26073UY1ZM1A', 'SSLT730006651767', 'TH01303EJW0H8A', 'TH66023M0BQ69C', 'THT20042G8989Z', 'TH20043UQCNT9D', 'TH67033SWMKH7C', '7110015818354', 'TH01373E7VJ83A', 'TH01403UUJGZ3B0', 'TH67023U39PJ7C', 'TH01473VJW806A', 'TH10113V5SA56B', 'THT20042HTNU4Z', 'TH38013CVWVA6A0', 'TH16033BJJFT0C', 'TH67033QAHVX6F', 'TH68043RGX702F', 'TH10113UQSBM7B', 'TH01423TNP7F6A', 'TH26063BFXQ89A', 'TH05063VDKN39F', 'TH04063V87RJ2E', 'TH04033V8HM87A1');
;-- -. . -..- - / . -. - .-. -.--
select
    pct.pno
from bi_pro.parcel_claim_task pct
where
    pct.source = 12 -- L来源
    and pct.state = 6;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.pno
from bi_pro.parcel_claim_task pct
where
    pct.source = 12 -- L来源
    and pct.state = 7;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.pno
    ,case pct.state
        when 6 then '理赔完成'
        when 7 then '理赔终止'
    end 理赔状态
    ,case plt.`source`
        when 1 then 'a-问题件-丢失'
        when 2 then 'b-记录本-丢失'
        when 3 then 'c-包裹状态未更新'
        when 4 then 'd-问题件-破损/短少'
        when 5 then 'e-记录本-索赔-丢失'
        when 6 then 'f-记录本-索赔-破损/短少'
        when 7 then 'g-记录本-索赔-其他'
        when 8 then 'h-包裹状态未更新-ipc计数'
        when 9 then 'i-问题件-外包装破损险'
        when 10 then 'j-问题记录本-外包装破损险'
        when 11 then 'k-超时效包裹'
        when 12 then 'l-高度疑似丢失'
    end '闪速认定问题来源'
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 闪人认定任务状态
from bi_pro.parcel_claim_task pct
left join bi_pro.parcel_lose_task plt on pct.pno and plt.pno
where
    pct.source = 12 -- L来源
    and pct.state in (7,8)
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    pct.pno
    ,case pct.state
        when 6 then '理赔完成'
        when 7 then '理赔终止'
    end 理赔状态
    ,case plt.`source`
        when 1 then 'a-问题件-丢失'
        when 2 then 'b-记录本-丢失'
        when 3 then 'c-包裹状态未更新'
        when 4 then 'd-问题件-破损/短少'
        when 5 then 'e-记录本-索赔-丢失'
        when 6 then 'f-记录本-索赔-破损/短少'
        when 7 then 'g-记录本-索赔-其他'
        when 8 then 'h-包裹状态未更新-ipc计数'
        when 9 then 'i-问题件-外包装破损险'
        when 10 then 'j-问题记录本-外包装破损险'
        when 11 then 'k-超时效包裹'
        when 12 then 'l-高度疑似丢失'
    end '闪速认定问题来源'
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 闪人认定任务状态
from bi_pro.parcel_claim_task pct
left join bi_pro.parcel_lose_task plt on pct.pno = plt.pno
where
    pct.source = 12 -- L来源
    and pct.state in (7,8)
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    pct.pno
    ,case pct.state
        when 6 then '理赔完成'
        when 7 then '理赔终止'
    end 理赔状态
    ,plt.id
    ,case plt.`source`
        when 1 then 'a-问题件-丢失'
        when 2 then 'b-记录本-丢失'
        when 3 then 'c-包裹状态未更新'
        when 4 then 'd-问题件-破损/短少'
        when 5 then 'e-记录本-索赔-丢失'
        when 6 then 'f-记录本-索赔-破损/短少'
        when 7 then 'g-记录本-索赔-其他'
        when 8 then 'h-包裹状态未更新-ipc计数'
        when 9 then 'i-问题件-外包装破损险'
        when 10 then 'j-问题记录本-外包装破损险'
        when 11 then 'k-超时效包裹'
        when 12 then 'l-高度疑似丢失'
    end '闪速认定问题来源'
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 闪人认定任务状态
from bi_pro.parcel_claim_task pct
left join bi_pro.parcel_lose_task plt on pct.pno = plt.pno
where
    pct.source = 12 -- L来源
    and pct.state in (7,8)
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    wo.order_no
    ,wor.staff_info_id
    ,hsi.node_department_id
    ,wor.created_at
from bi_pro.work_order wo
left join bi_pro.work_order_reply wor on wor.order_id = wo.id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
where
    wo.order_no = '0416763084300226';
;-- -. . -..- - / . -. - .-. -.--
select
    wo.order_no
    ,wor.staff_info_id
    ,hsi.node_department_id
    ,wor.created_at
    ,hsi.state
from bi_pro.work_order wo
left join bi_pro.work_order_reply wor on wor.order_id = wo.id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
where
    wo.order_no = '0416763084300226';
;-- -. . -..- - / . -. - .-. -.--
select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0416763084300226';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86

)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
    and wo.order_no = '0416763084300226'
order by 7;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86

)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1;
;-- -. . -..- - / . -. - .-. -.--
select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0416763084300226';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,t2.hf_num 回复总次数
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1;
;-- -. . -..- - / . -. - .-. -.--
select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
        and wo.order_no = '0716771222555027';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
#         and wo.order_no = '0716771222555027'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,t2.hf_num 回复总次数
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
    and wo.order_no = '0416763084300226';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
#         and wo.order_no = '0716771222555027'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,t2.hf_num 回复总次数
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
    and wo.order_no = '0716771222555027';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
#         and wo.order_no = '0716771222555027'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,t1.hf_num 回复总次数
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t1 on t1.id = wo.id and t1.rn = 1
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1
    and wo.order_no = '0716771222555027';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        wo.id
        ,wor.created_at
        ,row_number() over (partition by wo.id order by wor.created_at) rn
        ,count(wor.id) over (partition by wo.id) hf_num
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
    where
        wo.created_at >= date_sub(curdate(),interval 30 day)
        and wo.created_at < curdate()
        and hsi.state = 1
        and hsi.node_department_id = 86
#         and wo.order_no = '0716771222555027'
)

SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,wo.created_at 创建时间
    ,t1.hf_num 回复总次数
    ,wor.`created_at` 第一次工单回复时间
    ,timestampdiff(second , wo.created_at, wor.created_at) '第一次回复时长（与创建工单的时间相比）'
    ,t2.created_at 第二次回复时间
    ,timestampdiff(second, wor.created_at, t2.created_at) '第二次回复时长（与第一次的时间对比）'
    ,t3.created_at 第三次回复时间
    ,timestampdiff(second, t2.created_at, t3.created_at) '第三次回复时长（与第二次回复时间对比）'
    ,(timestampdiff(second , wo.created_at, wor.created_at) + ifnull(timestampdiff(second, wor.created_at, t2.created_at), 0) + ifnull(timestampdiff(second, t2.created_at, t3.created_at), 0))/(1 + if(t2.created_at is null ,0 ,1) + if(t3.created_at is null ,0 ,1)) '平均响应时长（每个相差间隔的平均响应时间）'
    ,wo.`closed_at`  工单关闭时间
    ,timestampdiff(second, wo.created_at, wo.closed_at) '总用时长（关闭工单的时间-创建工单的时间）'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,wor.`staff_info_id`  第一次回复人ID
    ,hi1.`name`  第一次回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<24  then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and  TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )<72  then '是'
        else '否'
    end  是否在24小时内回复
    ,if(wor.created_at is not null and wo.`original_acceptance_info` is not null  and TIMESTAMPDIFF(HOUR, wo.`created_at`,wor.`created_at` )>48,'是','否') 是否为FH48小时超时工单
    ,TIMESTAMPDIFF(MINUTE, wo.`created_at`,wor.`created_at`) 第一次回复时长
    ,if(wt.`created_at` is not null and nwt.`created_at` is null,'是','否') 是否为工作时间创建工单
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<40 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(MINUTE, wt.`created_at`,wor.`created_at`)<2920 then '是'
        else '否'
    end 工作时间内创建的工单是否在40分钟内回复
    ,case
        when wo.`original_acceptance_info` is null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<24 then '是'
        when wo.`original_acceptance_info` is not null and wor.created_at is not null and TIMESTAMPDIFF(HOUR, nwt.`created_at`,wor.`created_at` )<72 then '是'
        else '否'
    end 非工作时间是否在24小时内回复
    ,case
        when nwt.`tg` in (1,3) and wor.`created_at` < concat(date_add(nwt.`created_at`, interval 1 day) , ' 10:00') then '是'
        when nwt.`tg` in (2,4) and wor.`created_at` < concat(date(nwt.`created_at`), ' 10:00') then '是'
        ELSE '否'
    end as '工作时间外创建的工单是否在次日10:00前回复'
from `bi_pro`.work_order wo
left join
    ( #第一次回复
        select
            *
        from
            (
                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
            )wor
        where wor.rn=1
    )wor on wo.id = wor.`order_id`
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =wor.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id
left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <10000 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <10000 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id
left join t t1 on t1.id = wo.id and t1.rn = 1
left join t t2 on t2.id = wo.id and t2.rn = 2
left join t t3 on t3.id = wo.id and t3.rn = 3
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()
    -- and wo.status < 4
    -- and wo.`created_store_id` !=1 -- 自动创建的工单
    and hi1.`node_department_id` =86
    and hi1.`state` =1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,ss.name 妥投网点
    ,wo.content '工单回复'
    ,pi.created_at
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_03166 t  on t.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            wo.pnos
            ,wor.content
            ,row_number() over (partition by wo.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo
        join t on wo.pnos = t.pno
        left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    ) wo on wo.pnos = t.pno and wo.rn = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,ss.name 妥投网点
    ,wo.content '工单回复'
    ,pi.created_at
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_03166 t  on t.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            wo.pnos
            ,wor.content
            ,row_number() over (partition by wo.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo
        join tmpale.tmp_th_pno_03166 t on wo.pnos = t.pno
        left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    ) wo on wo.pnos = t.pno and wo.rn = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,ss.name 妥投网点
    ,wo.content '工单回复'
    ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key)) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_03166 t  on t.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            wo.pnos
            ,wor.content
            ,row_number() over (partition by wo.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo
        join tmpale.tmp_th_pno_03166 t on wo.pnos = t.pno
        left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    ) wo on wo.pnos = t.pno and wo.rn = 1
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= date_sub(curdate(), interval 1 day)
        and wo.created_at < curdate()
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1
left join fle_staging.ka_profile kp on kp.id = wo.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = wo.client_id
where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= date_sub(curdate(), interval 1 day)
    and wo.created_at < curdate();
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 30 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 30 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
SELECT
    t.pno,
    DATE_FORMAT(t.created_at, '%Y-%m-%d') as created_date,
    1 AS flag -- 疑似丢失
FROM bi_pro.parcel_lose_task  t
LEFT JOIN bi_pro.parcel_detail  pd ON pd.pno = t.pno
left join fle_staging.sys_store ss on ss.id = pd.resp_store_id
WHERE
    t.source IN (3, 33)
    AND t.state IN (1,2,3,4)
#     AND pd.resp_store_id = '{$storeId}'
    and ss.name = 'PYI_SP-พัทยาใต้';
;-- -. . -..- - / . -. - .-. -.--
select
    hsi.staff_info_id
    ,hsi.hire_date
from bi_pro.hr_staff_info hsi
where
    hsi.staff_info_id in ('119999', '121776', '125595', '127320', '144914', '126471', '129577', '143552', '128544', '130629', '139340', '142684', '121517', '124245', '122849', '147026', '129478', '139564', '138995', '132638', '142468', '142398', '121959', '147204', '140513', '141731', '119363', '143365', '146200', '131902', '146662', '136717', '141425', '147700', '123315', '143644', '146887', '146301', '146973', '147313', '132704', '119263', '129450', '143836', '138168', '126277', '126820', '132318', '127738', '143159', '142878', '120650', '142461', '145659', '137498', '137552', '138000', '123831', '138684', '146078', '147338', '136411', '138850', '148502', '147271', '121614', '137223', '141200', '144392', '146816', '147626', '146985', '147117', '145885', '147910', '126985', '138674', '145092', '147716', '141582', '143109', '144085', '146844', '120671', '132576', '131210', '141791', '145706', '146910', '148060', '148693', '143813', '144606', '144713', '147202', '121549', '136363', '141386', '141151', '143837', '145412', '146858', '135396', '136414', '136979', '146185', '141935', '146629', '135674', '124103', '137645', '141549', '146865', '133938', '139445', '142106', '142674', '145900', '137230', '145800', '146031', '147246', '121500', '124751', '139759', '144557', '145803', '146810', '146970', '147001', '144886', '146472', '123868', '143519', '146076', '146737', '147083', '148413', '133321', '138572', '139911', '143055', '143674', '147333', '147929', '120718', '128919', '147316', '147780', '147828', '148073');
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,if(de.cod_enabled = 1, '是', '否') 是否COD
    ,de.dst_store_in_time 到达目的地网点时间
from tmpale.tmp_th_pno_0318 t
left join dwm.dwd_ex_th_parcel_details de on de.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,if(de.cod_enabled = 1, '是', '否') 是否COD
    ,de.dst_store_in_time 到达目的地网点时间
from
    (
        select
            t.pno
        from tmpale.tmp_th_pno_0318 t
        group by 1
    ) t
left join dwm.dwd_ex_th_parcel_details de on de.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,if(de.cod_enabled = 1, '是', '否') 是否COD
    ,de.pickup_time 揽收时间
    ,de.dst_store_in_time 到达目的地网点时间
from
    (
        select
            t.pno
        from tmpale.tmp_th_pno_0318 t
        group by 1
    ) t
left join dwm.dwd_ex_th_parcel_details de on de.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,case de.cod_enabled
        when 0 then '否'
        when 1 then '是'
    end 是否COD
    ,de.pickup_time 揽收时间
    ,de.dst_store_in_time
from
    (
        select
            t.pno
        from tmpale.tmp_th_pno_0318 t
        group by 1
    ) t
join dwm.dwd_ex_th_parcel_details de on de.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,case pi.cod_enabled
        when 0 then '否'
        when 1 then '是'
    end 是否COD
    ,de.dst_store_in_time
from
    (
        select
            t.pno
        from tmpale.tmp_th_pno_0318 t
        group by 1
    ) t
join dwm.dwd_ex_th_parcel_details de on de.pno = t.pno
left join fle_staging.parcel_info pi on pi.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,pct.claims_amount/100 网点理赔
    ,b.claim_money 闪速理赔
from tmpale.tmp_th_pno_zjq_0319 t
left join  fle_staging.pickup_claims_ticket pct on pct.pno = t.pno and pct.state = 5 and pct.claims_type_category = 1 -- 理赔
left join
    (
        select
            a.*
        from
            (
                select
                    pct.`pno`
                    ,pct.`id`
                    ,row_number() over (partition by pct.`pno` order by pct.`id`  DESC ) row_num
                from bi_pro.parcel_claim_task pct
                where
                    pct.state= 6
            ) a
        where
            a.row_num = 1
    ) a on a.pno = t.pno
left join
    (
        select
            *
        from
            (
                select
                    pcn.`task_id`
                    ,replace(json_extract(pcn.`neg_result`,'$.money'),'\"','') claim_money
                    ,row_number() over (partition by pcn.`task_id` order by pcn.`created_at` DESC ) row_num
                from bi_pro.parcel_claim_negotiation pcn
            ) b
        where
            b.row_num = 1
    ) b on b.task_id = a.id;
;-- -. . -..- - / . -. - .-. -.--
select
    t.运单号
    ,pct.claims_amount/100 网点理赔
    ,b.claim_money 闪速理赔
from tmpale.tmp_th_pno_zjq_0319 t
left join  fle_staging.pickup_claims_ticket pct on pct.pno = t.运单号 and pct.state = 5 and pct.claims_type_category = 1 -- 理赔
left join
    (
        select
            a.*
        from
            (
                select
                    pct.`pno`
                    ,pct.`id`
                    ,row_number() over (partition by pct.`pno` order by pct.`id`  DESC ) row_num
                from bi_pro.parcel_claim_task pct
                where
                    pct.state= 6
            ) a
        where
            a.row_num = 1
    ) a on a.pno = t.运单号
left join
    (
        select
            *
        from
            (
                select
                    pcn.`task_id`
                    ,replace(json_extract(pcn.`neg_result`,'$.money'),'\"','') claim_money
                    ,row_number() over (partition by pcn.`task_id` order by pcn.`created_at` DESC ) row_num
                from bi_pro.parcel_claim_negotiation pcn
            ) b
        where
            b.row_num = 1
    ) b on b.task_id = a.id;
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
#         and wo.created_at >= date_sub(curdate(), interval 1 day)
#         and wo.created_at < curdate()
        and wo.created_at >= '2023-03-17'
        and wo.created_at < '2023-03-20'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1
left join fle_staging.ka_profile kp on kp.id = wo.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = wo.client_id
where
    wo.created_store_id = 3 -- 总部客服中心
#     and wo.created_at >= date_sub(curdate(), interval 1 day)
#     and wo.created_at < curdate()
    and wo.created_at >= '2023-03-17'
    and wo.created_at < '2023-03-20';
;-- -. . -..- - / . -. - .-. -.--
select
    pd.resp_store_id 网点
    ,plt.created_at 预警日期
    ,plt.pno 单号
    ,pi.cod_amount/100 COD金额
    ,bc.client_name 客户
    ,dt.piece_name 片区
    ,dt.region_name 大区
    ,if(di.pno is not null , '是', '否') 货物丢失
    ,if(di2.pno is not null , '是', '否') 已妥投未回COD
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_detail pd on pd.pno = plt.pno
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = pd.resp_store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join fle_staging.diff_info di on di.pno = plt.pno and di.diff_marker_category in (7,22)
left join fle_staging.diff_info di2 on di2.pno = plt.pno and di2.diff_marker_category in (28)
where
    plt.source in (3,33)  -- c来源
    and plt.state in (1,2,3,4)
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.created_at 预警日期
    ,plt.pno 单号
    ,pi.cod_amount/100 COD金额
    ,bc.client_name 客户
    ,dt.store_name 网点
    ,dt.piece_name 片区
    ,dt.region_name 大区
    ,if(di.pno is not null , '是', '否') 货物丢失
    ,if(di2.pno is not null , '是', '否') 已妥投未回COD
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_detail pd on pd.pno = plt.pno
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = pd.resp_store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join fle_staging.diff_info di on di.pno = plt.pno and di.diff_marker_category in (7,22)
left join fle_staging.diff_info di2 on di2.pno = plt.pno and di2.diff_marker_category in (28)
where
    plt.source in (3,33)  -- c来源
    and plt.state in (1,2,3,4)
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.created_at 预警日期
    ,plt.pno 单号
    ,pi.cod_amount/100 COD金额
    ,bc.client_name 客户
    ,dt.store_name 网点
    ,dt.piece_name 片区
    ,dt.region_name 大区
    ,if(di.pno is not null , '是', '否') 货物丢失
    ,if(di2.pno is not null , '是', '否') 已妥投未回COD
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_detail pd on pd.pno = plt.pno
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = pd.resp_store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join fle_staging.diff_info di on di.pno = plt.pno and di.diff_marker_category in (7,22)
left join fle_staging.diff_info di2 on di2.pno = plt.pno and di2.diff_marker_category in (28)
where
    plt.source in (3,33)  -- c来源
    and plt.state in (1,2,3,4)
group by 2;
;-- -. . -..- - / . -. - .-. -.--
select
                    pl.pno
                from bi_pro.parcel_lose_task pl
                join fle_staging.parcel_info pi on pl.pno=pi.pno and pi.cod_enabled=0
                where  pl.created_at>='2023-02-01'
                and pl.created_at<'2023-03-01'
                and pl.source=12
                group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
from fle_staging.parcel_info pi
where
    pi.state = 5
    and pi.finished_at >= '2022-12-31 17:00:00'
    and pi.finished_at < '2023-02-28 17:00:00'
    and pi.dst_store_id = 'TH05110303'
    and pi.ticket_delivery_store_id not in ('TH05110303','TH02030204');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.state
from fle_staging.parcel_info pi
where
     pi.finished_at >= '2022-12-31 17:00:00'
    and pi.finished_at < '2023-02-28 17:00:00'
    and pi.dst_store_id = 'TH05110303'
    and pi.ticket_delivery_store_id not in ('TH05110303','TH02030204');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.state
from fle_staging.parcel_info pi
left join fle_staging.parcel_info pi2 on pi2.pno = pi.recent_pno
where

    pi.dst_store_id = 'TH05110303'
    and pi.state
    and pi.ticket_delivery_store_id not in ('TH05110303','TH02030204')
    and
        (
             (pi.state = 8 and  pi.finished_at >= '2022-12-31 17:00:00' and pi.finished_at < '2023-02-28 17:00:00')
            or ( pi.state = 7 and pi2.created_at >= '2022-12-31 17:00:00' and pi2.created_at < '2023-02-28 17:00:00')
        );
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,ss.name 妥投网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
from fle_staging.parcel_info pi
left join fle_staging.parcel_info pi2 on pi2.pno = pi.recent_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
where

    pi.dst_store_id = 'TH05110303'
    and pi.state
    and pi.ticket_delivery_store_id not in ('TH05110303','TH02030204')
    and
        (
             (pi.state = 8 and  pi.finished_at >= '2022-12-31 17:00:00' and pi.finished_at < '2023-02-28 17:00:00')
            or ( pi.state = 7 and pi2.created_at >= '2022-12-31 17:00:00' and pi2.created_at < '2023-02-28 17:00:00')
        );
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,ss.name 妥投网点
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,convert_tz(pi.finished_at, '+00:00', '+07:00') 异常时间
    ,bc.client_name 客户
    ,pi.cod_amount/100 COD金额
from fle_staging.parcel_info pi
left join fle_staging.parcel_info pi2 on pi2.pno = pi.recent_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
where

    pi.dst_store_id = 'TH05110303'
    and pi.state
    and pi.ticket_delivery_store_id not in ('TH05110303','TH02030204')
    and
        (
             (pi.state = 8 and  pi.finished_at >= '2022-12-31 17:00:00' and pi.finished_at < '2023-02-28 17:00:00')
            or ( pi.state = 7 and pi2.created_at >= '2022-12-31 17:00:00' and pi2.created_at < '2023-02-28 17:00:00')
        );
;-- -. . -..- - / . -. - .-. -.--
SELECT
    operator_id,
    name,
    count(if(d.penalties > 0, d.idd, null)) 总处理合计,
    sum(case
       when `action`=1 then 1
       when `action`=3 and `source` in (1,2,3) and d.penalties > 0 then 1
       when `action`=3 and `source` in (5,8,11) and d.penalties > 0 then 3
       when `action`=3 and `source` in (4,6,7) and d.penalties > 0 then 5
       when `action`=4 and `source` in (3,8) and d.penalties > 0 then 3
       when `action`=4 and `source` in (1,4,11) and d.penalties > 0 then 5
       when `action`=4 and `source` in (2,5,6,7) and d.penalties > 0 then 7
       else 0
       end as '得分'
       ) 综合人效得分
FROM
    (
        SELECT
            d.idd
            ,operator_id
            ,name,source
            ,日期วันที่
            ,action
            ,d.penalties
        FROM
            (
                SELECT
                    a.id
                    ,a.operator_id
                    , b.name
                    , c.`source`
                    , DATE_FORMAT(a.created_at, '%Y-%m-%d') as '日期วันที่'
                    , a.action
                    ,CONCAT(c.pno, c.`source`, a.action) idd
                    ,c.penalties
                FROM bi_pro.parcel_cs_operation_log a
                LEFT JOIN bi_pro.hr_staff_info b ON a.operator_id= b.staff_info_id
                LEFT JOIN bi_pro.parcel_lose_task c ON a.task_id= c.id
                WHERE a.type= 1
                    AND a.action IN(1, 3, 4)
                    AND DATE_FORMAT(a.created_at, '%Y-%m-%d') >= '${date}'
                    and  DATE_FORMAT(a.created_at, '%Y-%m-%d') <= '${date1}'
                    and a.operator_id!='10000'
                GROUP BY a.id
            ) d
        GROUP BY d.idd
    )d
 GROUP BY 1,2
 ORDER BY 1;
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= date_sub(curdate(), interval 1 day)
        and wo.created_at < curdate()
#         and wo.created_at >= '2023-03-17'
#         and wo.created_at < '2023-03-20'
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 平台客户
    ,case ci.requester_category
        when 0 then '托运人员'
        when 1 then '收货人员'
        when 2 then '操作人员'
        when 3 then '销售人员'
        when 4 then '客服人员'
    end 请求者角色
    ,case ci.channel_category # 渠道
         when 0 then '电话'
         when 1 then '电子邮件'
         when 2 then '网页'
         when 3 then '网点'
         when 4 then '自主投诉页面'
         when 5 then '网页（facebook）'
         when 6 then 'APPSTORE'
         when 7 then 'Lazada系统'
         when 8 then 'Shopee系统'
         when 9 then 'TikTok'
    end 请求渠道
    ,case wo.status
        when 1 then '未阅读'
        when 2 then '已经阅读'
        when 3 then '已回复'
        when 4 then '已关闭'
    end 工单状态
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要'
        when 1 then '需要'
    end 致电客户
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, '否', '是') 是否超时
    ,case wo.up_report
        when 0 then '否'
        when 1 then '是'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 运单状态
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1
left join fle_staging.ka_profile kp on kp.id = wo.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = wo.client_id
where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= date_sub(curdate(), interval 1 day)
    and wo.created_at < curdate()
    and wo.created_at >= '2023-03-17';
;-- -. . -..- - / . -. - .-. -.--
SELECT
    t.pno
    ,pi.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
    ,convert_tz(pi.finished_at,'+00:00','+07:00') 妥投时间
    ,ss.name 妥投网点
    ,convert_tz(pr.routed_at,'+00:00','+07:00') 第一次到件入仓扫描时间
    ,pr.name 第一次到件入仓扫描网点
    ,dpd.last_route_time 最后有效路由时间
    ,dpd.last_cn_route_action 最后有效路由
    ,ps.van_in_proof_id 出车凭证编码
    ,ss2.name 发车网点
    ,ps.next_store_name 下一站
    ,convert_tz(fvp.created_at,'+00:00','+07:00') 打印出车凭证时间
from tmpale.tmp_th_pno_322_1 t
left join fle_staging.parcel_info pi
on t.pno=pi.pno
left join dwm.tmp_ex_big_clients_id_detail bc
on pi.client_id=bc.client_id
left join fle_staging.ka_profile kp
on pi.client_id=kp.id
left join fle_staging.sys_store ss
on pi.ticket_delivery_store_id=ss.id
left join
(
    select pr.*
    from
    (
    SELECT
    pr.pno
    ,pr.routed_at
    ,ss.name
    ,row_number()over(PARTITION by pr.pno order by pr.routed_at) rn
    from rot_pro.parcel_route pr
    left join fle_staging.sys_store ss
    on pr.store_id=ss.id
    where pr.route_action='ARRIVAL_WAREHOUSE_SCAN'
    and pr.routed_at>='2023-02-27'
    )pr where pr.rn=1
)pr on pr.pno=t.pno
left join dwm.dwd_ex_th_parcel_details dpd
on dpd.pno=t.pno
left join
(
    select *
    from
    (
        select
        ps.pno
        ,ps.van_in_proof_id
        ,ps.next_store_name
        ,row_number()over(partition by ps.pno order by van_plan_arrived_at) rn
        from dw_dmd.parcel_store_stage_new ps
        where ps.van_in_proof_id is not null
    )ps where ps.rn=1
)ps on ps.pno=t.pno
left join fle_staging.fleet_van_proof fvp
on fvp.id=ps.van_in_proof_id
left join fle_staging.sys_store ss2
on fvp.store_id=ss2.id;
;-- -. . -..- - / . -. - .-. -.--
SELECT
    t.pno
    ,pi.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
    ,convert_tz(pi.finished_at,'+00:00','+07:00') 妥投时间
    ,ss.name 妥投网点
    ,convert_tz(pr.routed_at,'+00:00','+07:00') 第一次到件入仓扫描时间
    ,pr.name 第一次到件入仓扫描网点
    ,dpd.last_route_time 最后有效路由时间
    ,dpd.last_cn_route_action 最后有效路由
    ,ps.van_in_proof_id 出车凭证编码
    ,ss2.name 发车网点
    ,ps.next_store_name 下一站
    ,convert_tz(fvp.created_at,'+00:00','+07:00') 打印出车凭证时间
from tmpale.tmp_th_pno_322_1 t
left join fle_staging.parcel_info pi
on t.pno=pi.pno
left join dwm.tmp_ex_big_clients_id_detail bc
on pi.client_id=bc.client_id
left join fle_staging.ka_profile kp
on pi.client_id=kp.id
left join fle_staging.sys_store ss
on pi.ticket_delivery_store_id=ss.id
left join
(
    select pr.*
    from
    (
    SELECT
    pr.pno
    ,pr.routed_at
    ,ss.name
    ,row_number()over(PARTITION by pr.pno order by pr.routed_at) rn
    from rot_pro.parcel_route pr
    left join fle_staging.sys_store ss
    on pr.store_id=ss.id
    where pr.route_action='ARRIVAL_WAREHOUSE_SCAN'
    and pr.routed_at>='2023-02-27'
    )pr where pr.rn=1
)pr on pr.pno=t.pno
left join dwm.dwd_ex_th_parcel_details dpd
on dpd.pno=t.pno
left join
(
    select *
    from
    (
        select
        ps.pno
        ,ps.van_in_proof_id
        ,ps.next_store_name
        ,row_number()over(partition by ps.pno order by van_plan_arrived_at) rn
        from dw_dmd.parcel_store_stage_new ps
        join tmpale.tmp_th_pno_322_1 t on ps.pno = t.pno
        where ps.van_in_proof_id is not null
    )ps where ps.rn=1
)ps on ps.pno=t.pno
left join fle_staging.fleet_van_proof fvp
on fvp.id=ps.van_in_proof_id
left join fle_staging.sys_store ss2
on fvp.store_id=ss2.id;
;-- -. . -..- - / . -. - .-. -.--
select date_format(now(), '1%h%i');
;-- -. . -..- - / . -. - .-. -.--
select
    *
from bi_pro.work_order wo
where
    date_format(wo.`created_at`,'1%h%i')>11900
limit 100;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,count(pct.id)
from fle_staging.pickup_claims_ticket pct
join tmpale.tmp_th_pno_0323 t on t.pno = pct.pno
group by 1;
;-- -. . -..- - / . -. - .-. -.--
SELECT
    distinct pls.pno '运单号เลขพัสดุ'
    ,c.created_at 首次预警时间
    ,ds.store_name '网点名称'
    ,pls.created_at '任务生成时间เวลาที่จัดการสำเร็จ'
    ,if(
        TIMESTAMPDIFF(hour,pls.created_at,now())<48,
    concat(cast(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))%60,0)as int),'min'),
    concat('已超时',concat(cast(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())%60,0)as int),'min'))) '任务处理倒计时เวลาที่สะสม'
    ,pls.pack_no '集包号เลขแบ็กกิ้ง'
    ,pls.arrival_time '入仓时间เวลาที่เข้าคลัง'
    ,pls.parcel_created_at '揽件时间เวลาที่รับ'
    ,pls.proof_id '出车凭证ใบรับรองปล่อยรถ'
    ,case pls.state
    when 1 then '待处理'
    when 2 then '网点处理'
    when 3 then '超时自动处理'
    when 4 then 'QAQC处理'
    when 5 then '已更新路由(无需处理)'
    end  '状态สถานะ'
    ,case pls.speed
    when 1 then '是'
    when 2 then '否'
    end  'SPEED件มีพัสดุSpeed'
    ,pls.last_valid_action '最后有效路由สถานะสุดท้าย'
    ,pls.last_valid_at '最后操作时间เวลาสุดท้ายที่ดำเนินการ'
    ,ds2.store_name '最后有效路由所在网点สาขาสุดท้ายที่ดำเนินการ'
    ,ds.piece_name '片区District'
    ,ds.region_name '大区Area'
    ,bc.client_name 客户名称
from bi_center.parcel_lose_task_sub_c pls
left join fle_staging.parcel_info pi on pi.pno = pls.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
left join dwm.dim_th_sys_store_rd ds on pls.store_id = ds.store_id and ds.stat_date = date_sub(curdate(), interval 1 day )
left join dwm.dim_th_sys_store_rd ds2 on pls.last_valid_store_id = ds2.store_id and ds2.stat_date = date_sub(curdate(), interval 1 day )
left join
    (
        select
            pls.pno
            ,plt.created_at
            ,row_number() over (partition by pls.pno order by plt.created_at) rn
        from bi_center.parcel_lose_task_sub_c pls
        left join bi_pro.parcel_lose_task plt on pls.pno = plt.pno and plt.source = 3
        where
             pls.created_at > '2023-01-09 00:00:00'
            and pls.state= 1
    ) c on c.pno = pls.pno and c.rn = 1
where
    pls.created_at > '2023-01-09 00:00:00'
    and pls.state=1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    hsi.staff_info_id
    ,ss.name
from bi_pro.hr_staff_info hsi
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
where
    hsi.staff_info_id in (52613,632192,3365244);
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,if(pi.returned = 1, pi.pno, pi.recent_pno) 退件单号
    ,ss.name 判定责任网点
    ,dst_ss.name 目的地网点
    ,ss2.name 揽件网点
    ,pi.cod_amount/100 COD金额
    ,plt.last_valid_action 最后有效路由
    ,plt.last_valid_staff_info_id 最后有效路由操作员工
    ,ss3.name 最后有效路由操作人所属网点
    ,plr.staff_id 责任人
    ,hsi2.name 责任人姓名
    ,ss4.name 责任人所属网点
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.sys_store ss on ss.id = plr.store_id
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join fle_staging.sys_store ss3 on ss3.id = hsi.sys_store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = plr.staff_id
left join fle_staging.sys_store ss4 on ss4.id = hsi2.sys_store_id
where
    plt.updated_at >= '2023-03-01'
    and plt.state = 6
    and plt.duty_result = 1
    and plt.source in (1,2,3,12)
    and plr.store_id = 'TH01400201';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.id
    ,if(pi.returned = 1, pi.pno, pi.recent_pno) 退件单号
    ,ss.name 判定责任网点
    ,dst_ss.name 目的地网点
    ,ss2.name 揽件网点
    ,pi.cod_amount/100 COD金额
    ,plt.last_valid_action 最后有效路由
    ,plt.last_valid_staff_info_id 最后有效路由操作员工
    ,ss3.name 最后有效路由操作人所属网点
    ,plr.staff_id 责任人
    ,hsi2.name 责任人姓名
    ,ss4.name 责任人所属网点
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.sys_store ss on ss.id = plr.store_id
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join fle_staging.sys_store ss3 on ss3.id = hsi.sys_store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = plr.staff_id
left join fle_staging.sys_store ss4 on ss4.id = hsi2.sys_store_id
where
    plt.updated_at >= '2023-03-01'
    and plt.state = 6
    and plt.duty_result = 1
    and plt.source in (1,2,3,12)
    and plr.store_id = 'TH01400201';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.id
    ,if(pi.returned = 1, pi.pno, pi.recent_pno) 退件单号
    ,ss.name 判定责任网点
    ,dst_ss.name 目的地网点
    ,ss2.name 揽件网点
    ,pi.cod_amount/100 COD金额
    ,plt.last_valid_action 最后有效路由
    ,plt.last_valid_staff_info_id 最后有效路由操作员工
    ,ss3.name 最后有效路由操作人所属网点
    ,plr.staff_id 责任人
    ,hsi2.is_sub_staff
    ,hsi2.name 责任人姓名
    ,ss4.name 责任人所属网点
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.sys_store ss on ss.id = plr.store_id
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join fle_staging.sys_store ss3 on ss3.id = hsi.sys_store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = plr.staff_id
left join fle_staging.sys_store ss4 on ss4.id = hsi2.sys_store_id
where
    plt.updated_at >= '2023-03-01'
    and plt.state = 6
    and plt.duty_result = 1
    and plt.source in (1,2,3,12)
    and plr.store_id = 'TH01400201';
;-- -. . -..- - / . -. - .-. -.--
with rep as
(
    select
        wo.order_no
        ,wo.pnos
        ,wor.created_at
        ,row_number() over (partition by wo.order_no order by wor.created_at ) rn
    from bi_pro.work_order wo
    left join bi_pro.work_order_reply wor on wo.id = wor.order_id
    where
        wo.created_store_id = 3
        and wo.created_at >= date_sub(curdate(), interval 1 day)
        and wo.created_at < curdate()
)
, pho as
(
    select
        pr.pno
        ,pr.routed_at
        ,row_number() over (partition by pr.pno order by pr.routed_at) rk
        ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk2
    from rot_pro.parcel_route pr
    join
        (
            select rep.pnos from rep group by 1
        ) r on pr.pno = r.pnos
    where
        pr.route_action = 'PHONE'
)
select
    date(wo.created_at) Date
    ,wo.order_no 'Ticket ID'
    ,wo.pnos 运单号
    ,wo.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then 'ka'
        when kp.`id` is null then 'GE'
    end '平台客户ลูกค้าแพลตฟอร์ม'
    ,case ci.requester_category
        when 0 then '托运人员 ผู้ส่ง'
        when 1 then '收货人员 ผู้รับ'
        when 2 then '操作人员 ฝ่ายปฏิบัติการ(Operation)'
        when 3 then '销售人员 พนักงานขาย(Sales)'
        when 4 then '客服人员 ฝ่ายบริการลูกค้า(CS)'
    end '请求者角色ผู้ร้องขอ'
    ,case ci.channel_category
         when 0 then '电话 โทรศัพท์'
         when 1 then '电子邮件 อีเมล'
         when 2 then '网页 เว็บไซต์'
         when 3 then '网点 สาขา'
         when 4 then '自主投诉页面 การส่งคำร้องโดยลูกค้า'
         when 5 then '网页（facebook） facebook'
         when 6 then 'APPSTORE APPSTORE'
         when 7 then 'Lazada系统 X-Space（LZD）'
         when 8 then 'Shopee系统 In House(Shopee)'
         when 9 then 'TikTok TikTok'
    end '请求渠道ช่องทางการติดต่อ'
    ,case wo.status
        when 1 then '未阅读ไม่ได้อ่าน'
        when 2 then '已经阅读อ่านแล้ว'
        when 3 then '已回复ตอบกลับแล้ว'
        when 4 then '已关闭ปิดแล้ว'
    end '状态สถานะTicket'
    ,wo.title 工单主题
    ,case wo.order_type
        when 1 then '查找运单 ค้นหาพัสดุ'
        when 2 then '加快处理 เร่งจัดการ'
        when 3 then '调查员工 ตรวจสอบพนักงาน'
        when 4 then '其他 อื่นๆ'
        when 5 then '网点信息维护提醒 แจ้งเตือนดูแลข้อมูลสาขา'
        when 6 then '培训指导 แนะนำอบรม'
        when 7 then '异常业务询问 ตรวจสอบการทำงานผิดปกติ'
        when 8 then '包裹丢失 พัสดุสูญหาย'
        when 9 then '包裹破损 พัสดุเสียหาย'
        when 10 then '货物短少 พัสดุขาดหาย'
        when 11 then '催单 เร่งติดตามพัสดุ'
        when 12 then '有发无到 พัสดุตกหล่น'
        when 13 then '上报包裹不在集包里 รายงานพัสดุไม่อยู่ในถุงแบ๊คกิ้ง'
        when 16 then '漏揽收 รับพัสดุตกหล่น'
        when 50 then '虚假撤销 ยกเลิกเป็นเท็จ'
        when 17 then '已签收未收到 เซ็นรับไม่ได้รับ'
        when 18 then '客户投诉 ลูกค้าร้องเรียน'
        when 19 then '修改包裹信息 แก้ไขข้อมูลพัสดุ'
        when 20 then '修改 COD 金额 แก้ไขยอดCOD'
        when 21 then '解锁包裹 ปลดล็อกพัสดุ'
        when 22 then '申请索赔 เคลม'
        when 23 then 'MS 问题反馈 แจ้งปัญหาMS'
        when 24 then 'FBI 问题反馈 แจ้งปัญหาFBI'
        when 25 then 'KA System 问题反馈 แจ้งปัญหาKA System'
        when 26 then 'App 问题反馈 แจ้งปัญหาApp'
        when 27 then 'KIT 问题反馈 แจ้งปัญหาKIT'
        when 28 then 'Backyard 问题反馈 แจ้งปัญหาBackyard'
        when 29 then 'BS/FH 问题反馈 แจ้งปัญหาBS/FH'
        when 30 then '系统建议 คำแนะนำระบบ'
        when 31 then '申诉罚款 ยื่นขอคืนค่าปรับ'
        else wo.order_type
    end  '工单类型ประเภทTicket'
    ,wo.created_at 工单创建时间
    ,rep.created_at 工单回复时间
    ,case wo.is_call
        when 0 then '不需要 ไม่ต้องการ'
        when 1 then '需要 ต้องการ'
    end '致电客户ลูกค้าต้องการให้โทรหาหรือไม่'
    ,if(timestampdiff(second, coalesce(rep.created_at, now()), wo.latest_deal_at) > 0, 'NO', 'YES') 是否超时
    ,case wo.up_report
        when 0 then 'NO'
        when 1 then 'YES'
    end 是否上报虚假工单
    ,datediff(wo.updated_at, wo.created_at) 工单处理天数
    ,wo.store_id '受理网点ID/部门'
    ,case
        when ss.`category` in (1,2,10,13) then 'sp'
        when ss.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,ss.name 网点名称
    ,ss.sorting_no 区域
    ,smr.name Area
    ,smp.name 片区
    ,case pi.state
        when 1 then '已揽收 รับพัสดุแล้ว'
        when 2 then '运输中 ระหว่างการขนส่ง'
        when 3 then '派送中 ระหว่างการจัดส่ง'
        when 4 then '已滞留 พัสดุคงคลัง'
        when 5 then '已签收 เซ็นรับแล้ว'
        when 6 then '疑难件处理中 ระหว่างจัดการพัสดุมีปัญหา'
        when 7 then '已退件 ตีกลับแล้ว'
        when 8 then '异常关闭 ปิดงานมีปัญหา'
        when 9 then '已撤销 ยกเลิกแล้ว'
    end as '运单状态สถานะพัสดุ'
    ,if(pi.state = 5, date(convert_tz(pi.finished_at, '+00:00', '+07:00')), null) 妥投日期
    ,if(pi.state = 5, convert_tz(pi.finished_at, '+00:00', '+07:00'), null ) 妥投时间
    ,convert_tz(p1.routed_at, '+00:00', '+07:00') 第一次联系客户
    ,convert_tz(p2.routed_at, '+00:00', '+07:00') 最后联系客户
    ,if(pi.state = 5, datediff(date(convert_tz(pi.finished_at, '+00:00', '+07:00')), date(convert_tz(pi.created_at, '+00:00', '+07:00'))), null) 揽收至妥投
    ,datediff(curdate(), date(convert_tz(pi.created_at, '+00:00', '+07:00'))) 揽收至今
from bi_pro.work_order wo
join fle_staging.customer_issue ci on wo.customer_issue_id = ci.id
left join rep on rep.order_no = wo.order_no and rep.rn = 1
left join fle_staging.sys_store ss on ss.id = wo.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join fle_staging.parcel_info pi on wo.pnos = pi.pno
left join pho p1 on p1.pno = wo.pnos and p1.rk = 1
left join pho p2 on p2.pno = wo.pnos and p2.rk = 1
left join fle_staging.ka_profile kp on kp.id = wo.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = wo.client_id
where
    wo.created_store_id = 3 -- 总部客服中心
    and wo.created_at >= date_sub(curdate(), interval 1 day)
    and wo.created_at < curdate();
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
from fle_staging.parcel_info pi
where
    pi.state = 5
    and pi.pno in ('THT200288BJ44Z', 'THT011889P7W1Z', 'THT08018AP9N6Z', 'THT01478BKPM6Z', 'THT12048AR8M6Z', 'THT04068B2XK9Z', 'THT04038ADZA4Z', 'THT471489CCW9Z', 'THT01018BHJR1Z', 'THT67028A0M37Z', 'THT30228AP4F0Z', 'THT10028D09C3Z', 'THT24038CYK40Z', 'THT380289QMR9Z', 'THT10038A9J99Z', 'THT21068C0B07Z', 'THT21068B1W23Z', 'THT31138967P7Z', 'THT19078A4UM3Z', 'THT04068AQTF9Z', 'THT03018AYVK2Z', 'THT01238CZX55Z', 'THT01178B6W16Z', 'THT01178B9WB7Z', 'THT01188ASP94Z', 'THT050689ZAY3Z', 'THT01218BMVE4Z', 'THT37018AMX53Z', 'THT040287D526Z', 'THT01268CPRY4Z', 'THT01038D3450Z', 'THT04028C6GT6Z', 'THT01188BKM48Z', 'THT04048BJM47Z', 'THT01178AYSM7Z', 'THT56127X9U11Z', 'THT03048C2F29Z', 'THT10108APCS8Z', 'THT02028BZRS5Z', 'THT61088ANS09Z', 'THT01058BQRP5Z', 'THT01188A81A1Z', 'THT14078AKYB5Z', 'THT272188P2X2Z', 'THT26058BN5Z3Z', 'THT0151860E02Z', 'THT01098ANHN3Z', 'THT37018BYJR8Z', 'THT24038BSJW1Z', 'THT21058CP7X9Z', 'THT240186SB89Z', 'THT0143895BU8Z', 'THT01398B8JK6Z', 'THT012789G282Z', 'THT012789KD63Z', 'THT012789KF13Z', 'THT3110886EY2Z', 'THT2604883Z53Z', 'THT15068A1QE8Z', 'THT0141890RQ1Z', 'THT20048A3QN0Z', 'THT320588APV6Z', 'THT0143891MP8Z', 'THT01138C7657Z', 'THT01038AX3D7Z', 'THT01068AZ5F4Z', 'THT01168AADM0Z', 'THT37178A3H77Z', 'THT02038C21K7Z', 'THT03018BT8B1Z', 'THT640286G729Z', 'THT640286G727Z', 'THT16038BFAU0Z', 'THT01438APXH8Z', 'THT150689MW63Z', 'THT20048BXBP4Z', 'THT0103886NR2Z', 'THT050389J3Q0Z', 'THT04048BN5Y9Z', 'THT013987NZ66Z', 'THT390989ZH26Z', 'THT01088AH0X2Z', 'THT160187JDV9Z', 'THT160187JDS9Z', 'THT014389WVC0Z', 'THT60017NNVX4Z', 'THT200488P641Z', 'THT1011893E69Z', 'THT02058A5E45Z', 'THT4401885RE4Z', 'THT14078AC5B6Z', 'THT16018AH797Z', 'THT100289Z333Z', 'THT01438A5267Z', 'THT01288AP1H2Z', 'THT070189GNQ4Z', 'THT01218839G7Z', 'THT040284MQU7Z', 'THT05118834Q7Z', 'THT04028AFEW5Z', 'THT01438A5HQ1Z', 'THT24058B0BG6Z', 'THT020389H6H8Z', 'THT200486WW90Z', 'THT02018929Y3Z', 'THT014282P7K5Z', 'THT0206889BE0Z', 'THT04028348C6Z', 'THT01088B6GV4Z', 'THT600788KRG8Z', 'THT0201871AA4Z', 'THT01398833X3Z', 'THT0130882MC4Z', 'THT301889V8Z0Z', 'THT53018536W5Z', 'THT05118A2VZ6Z', 'THT200584QBW3Z', 'THT050386RRH9Z', 'THT190787NZK0Z', 'THT72058901A6Z', 'THT200889EN35Z', 'THT01168A8452Z', 'THT014388QSV9Z', 'THT200184AD69Z', 'THT050682SW38Z', 'THT3304888MP7Z', 'THT20048A1556Z', 'THT011689H8J3Z', 'THT010989EB65Z', 'THT67037SCQG4Z', 'THT030187WW06Z', 'THT3706887E37Z', 'THT020286X0U4Z', 'THT020288Y928Z', 'THT0206871VX8Z', 'THT051189Z0Y7Z', 'THT200889BG00Z', 'THT030287MHS2Z', 'THT120488VCM2Z', 'THT013988QV36Z', 'THT040588MRZ5Z', 'THT471584CDW0Z', 'THT012686SZC1Z', 'THT370984E380Z', 'THT0121887GR9Z', 'THT260688FV02Z', 'THT020488BWZ3Z', 'THT260688FV00Z', 'THT271888NCU9Z', 'THT700486RN37Z', 'THT0110880J85Z', 'THT02018757T6Z', 'THT240185DWG4Z', 'THT040688TCS8Z', 'THT390185YSX3Z', 'THT210687MPM8Z', 'THT240485JXE4Z', 'THT6703873JQ7Z', 'THT520185FCJ8Z', 'THT02068271Q1Z', 'THT0123897MH3Z', 'THT160287GJ24Z', 'THT6101882BD7Z', 'THT2007838KF2Z', 'THT020288VUY1Z', 'THT310484A825Z', 'THT011680CGJ5Z', 'THT014084QXD9Z', 'THT012886G7Y0Z', 'THT01308723F2Z', 'THT160287GGT8Z', 'THT030187Y5M3Z', 'THT070387Q2G7Z', 'THT290688ANZ6Z', 'THT210687ZZ19Z', 'THT01058529R9Z', 'THT100187T9S3Z', 'THT010188NZY7Z', 'THT270188FFT7Z', 'THT16038699N6Z', 'THT013987YE98Z', 'THT020486WHJ6Z', 'THT0203845MT6Z', 'THT290386S0N4Z', 'THT450182MVV5Z', 'THT01018625A7Z', 'THT013986X202Z', 'THT01162FE549Z', 'THT0105861E53Z', 'THT70018515N0Z', 'THT70018515P0Z', 'THT520585GFY4Z', 'THT751083E6E0Z', 'THT311487F4S7Z', 'THT013986X200Z', 'THT011882SR73Z', 'THT1804818HF5Z', 'THT670383RAV5Z', 'THT200481R478Z', 'THT450185YAF0Z', 'THT200783YXV4Z', 'THT200783YXV4Z', 'THT030484PZY2Z', 'THT01068711N2Z', 'THT012185K5K0Z', 'THT0401873M61Z', 'THT0203857PC7Z', 'THT1104864B52Z', 'THT0139875CM9Z', 'THT1003867YA0Z', 'THT6703839PN1Z', 'THT013986Y848Z', 'THT470185BX35Z', 'THT2004849TM9Z', 'THT013684EQG8Z', 'THT0114875F68Z', 'THT71108473R1Z', 'THT01057Y2T94Z', 'THT180484ANW2Z', 'THT015185SAD2Z', 'THT013480UUS9Z', 'THT013985A969Z', 'THT300784QXN7Z', 'THT711184MU00Z', 'THT012285UGV9Z', 'THT20048230H0Z', 'THT302285DZG7Z', 'THT050785T8D0Z', 'THT2004861F84Z', 'THT66088559X7Z', 'THT270285ME43Z', 'THT200485P688Z', 'THT4719854HZ1Z', 'THT670285BJW6Z', 'THT01037ZKA34Z', 'THT0516855D14Z', 'THT580685UPR0Z', 'THT200485XK28Z', 'THT200586YT85Z', 'THT01428558S4Z', 'THT4509815GE2Z', 'THT020284KKR9Z', 'THT0406868012Z', 'THT0201856UR4Z', 'THT0104872421Z', 'THT020385YVZ5Z', 'THT1001862E01Z', 'THT0201861MR4Z', 'THT013183BSQ8Z', 'THT20047XSNS6Z', 'THT150685SC05Z', 'THT7111851AA2Z', 'THT020285R7N1Z', 'THT1011837405Z', 'THT020285YHN6Z', 'THT670383DJ27Z', 'THT83K8X7', 'THT012182HW21Z', 'THT01397Z0AA2Z', 'THT27087ZS6V2Z', 'THT180682KH04Z', 'THT011683KYN3Z', 'THT040185GPA0Z', 'THT01288597T6Z', 'THT014785QW71Z', 'THT160285MMA8Z', 'THT020282H9U4Z', 'THT013384SYA0Z', 'THT160384EPN8Z', 'THT010585T276Z', 'THT6501843MD6Z', 'THT160183Y3V7Z', 'THT011682FWS9Z', 'THT011685VHE3Z', 'THT45018536H5Z', 'THT015084EFB7Z', 'THT014785E3P2Z', 'THT5502857372Z', 'THT051380S7E2Z', 'THT100383GWP6Z', 'THT150682QQW5Z', 'THT210580Z9K8Z', 'THT1501851QU2Z', 'THT0122853U15Z', 'THT650182FAC9Z', 'THT013985TXP3Z', 'THT150685SBZ2Z', 'THT011680CG92Z', 'THT0402859CQ7Z', 'THT050384R009Z', 'THT020584WJG3Z', 'THT010383QCB6Z', 'THT0203845MT6Z', 'THT282284VZ33Z', 'THT610983Y172Z', 'THT660582EQN4Z', 'THT240382WVU6Z', 'THT010485RPK4Z', 'THT681783C933Z', 'THT150182P757Z', 'THT340284DZ05Z', 'THT0102841499Z', 'THT120682MHJ5Z', 'THT013983C1P7Z', 'THT020184EPA6Z', 'THT014783MS65Z', 'THT400484CC21Z', 'THT015180DYE8Z', 'THT030682X131Z', 'THT010383KHB2Z', 'THT0202817KG6Z', 'THT0201857V76Z', 'THT2409848B20Z', 'THT013984FDD3Z', 'THT011682AZT6Z', 'THT0402845TS1Z', 'THT400482USH9Z', 'THT010183R715Z', 'THT6804841ZW9Z', 'THT02037Z31J1Z', 'THT0134848HV7Z', 'THT2701855MX7Z', 'THT03027SG5E2Z', 'THT051184W5Z5Z', 'THT013983C231Z', 'THT0136847BU2Z', 'THT040685KBY3Z', 'THT03017ZGKY1Z', 'THT241182HB18Z', 'THT2404837SE3Z', 'THT4002838M22Z', 'THT6901842CN2Z', 'THT030281ZS17Z', 'THT040784D163Z', 'THT040182Z5E4Z', 'THT470182F1V3Z', 'THT01187Y3WH8Z', 'THT010680HBM8Z', 'THT24037ZYT75Z', 'THT56017Y7GB7Z', 'THT011582MTT9Z', 'THT020684Y6K3Z', 'THT011884BBD0Z', 'THT7410839Y27Z', 'THT01397ZWQR3Z', 'THT350181VUP0Z', 'THT0504848GC8Z', 'THT240183AH05Z', 'THT210483CF14Z', 'THT040282BHV4Z', 'THT3704814Y26Z', 'THT3302834M79Z', 'THT20078339T6Z', 'THT01037Q7WB9Z', 'THT051183VMT8Z', 'THT014381JKU4Z', 'THT6703839TE8Z', 'THT01148255G2Z', 'THT051380S7E2Z', 'THT20047RKU87Z', 'THT0116813T86Z', 'THT641582ZKA0Z', 'THT014783KC06Z', 'THT010183SN12Z', 'THT01487ZF9Q2Z', 'THT690182NU31Z', 'THT310184AMD9Z', 'THT1405834JK7Z', 'THT1405834JK7Z', 'THT013983HY32Z', 'THT04027X14Q9Z', 'THT01398319S5Z', 'THT012681W0U2Z', 'THT040381CEX5Z', 'THT013981YV98Z', 'THT020383CNB4Z', 'TH05063W091D2P', 'TH05063VYXCT8P', 'THT02037SH234Z', 'THT014282ZYP7Z', 'THT01397QMRU6Z', 'THT014282Q4V5Z', 'THT014480AHK2Z', 'THT250283BVC9Z', 'THT01288111B4Z', 'THT01028304A5Z', 'THT014080R8J7Z', 'THT0131814RK4Z', 'THT02017ZNA27Z', 'THT310180XT32Z', 'THT730582TR49Z', 'THT04068263G1Z', 'THT0105823AA9Z', 'THT0406827BC4Z', 'THT013983A431Z', 'THT0122813NF5Z', 'THT19077Z9ZY3Z', 'THT014980WDF5Z', 'THT01168018Y8Z', 'THT3909815041Z', 'THT2606839UT2Z', 'THT23037Q08M5Z', 'THT01438182B7Z', 'THT015180NB09Z', 'THT014381JKU4Z', 'THT0204823UB2Z', 'THT0139809980Z', 'THT01167YEN48Z', 'THT050682BUM7Z', 'THT2411802574Z', 'THT140780T493Z', 'THT030682KU86Z', 'THT0122821MA8Z', 'THT0103815073Z', 'THT013982USW4Z', 'THT700180V5P1Z', 'THT67037QB9S9Z', 'THT20047YS0V6Z', 'THT011982Y553Z', 'THT272081WH76Z', 'THT020682V5Q2Z', 'THT0139825E58Z', 'THT040582TRK1Z', 'THT0301804KZ5Z', 'THT68107VMYX0Z', 'THT030680TBA1Z', 'THT610481V8K9Z', 'THT10117XKGJ5Z', 'THT38017WHSR2Z', 'THT0139809980Z', 'THT76058157T7Z', 'THT68047SYAJ7Z', 'THT68047SYAJ9Z', 'THT20047YPNP2Z', 'THT55018159E8Z', 'THT02018142F7Z', 'THT38048012D1Z', 'THT37018030M2Z', 'THT0203814255Z', 'THT0306818E63Z', 'THT390180BCV9Z', 'THT01217X2B55Z', 'THT01348026X1Z', 'THT020281HTF2Z', 'THT01397Y4VV7Z', 'THT150381H9Z7Z', 'THT0122812A87Z', 'THT03068025T8Z', 'THT47157Y3B59Z', 'THT680180H5S2Z', 'THT61018145M4Z', 'THT290181Y253Z', 'THT0139809G28Z', 'THT04017ZG2B5Z', 'THT01017WQB75Z', 'THT0103821S67Z', 'THT140180TA61Z', 'THT040681H8V6Z', 'THT1601809FN8Z', 'THT271180Z0V7Z', 'THT47147YDH90Z', 'THT01177UW902Z', 'THT01517YX7M5Z', 'THT01397Y2K75Z', 'THT03067ZZJK1Z', 'THT020380WG88Z', 'THT013980T927Z', 'THT04027XRX95Z', 'THT700180NFC4Z', 'THT700180R115Z', 'THT0106818D15Z', 'THT49017Y7GU7Z', 'THT3811801XR9Z', 'THT0101801VK7Z', 'THT02017ZSHT4Z', 'THT03048226J0Z', 'THT03017YQUC8Z', 'THT20017ZM963Z', 'THT010180G9X2Z', 'THT25067VPRR2Z', 'THT015180RVY5Z', 'THT650181ND51Z', 'THT0116811PD5Z', 'TH05063W091D2P', 'TH05063VYXCT8P', 'THT63017ZSN52Z', 'THT56027XXEN0Z', 'THT670280UBD1Z', 'THT610180MBU6Z', 'THT015080A7E0Z', 'THT020181B9W3Z', 'THT180181CEV5Z', 'THT27267YEEP1Z', 'THT59067ZYV34Z', 'THT40047Z32U4Z', 'THT38107ZBMQ7Z', 'THT01087ZUND0Z', 'THT05067XDBA0Z', 'THT0139804W26Z', 'THT013981MGA5Z', 'THT01227ZN739Z', 'THT050480U4T6Z', 'THT0117817S62Z', 'THT150180T7D8Z', 'THT01037ZKA34Z', 'THT210580BJ29Z', 'THT210580BJ15Z', 'THT0111803SQ0Z', 'THT61017Z03D8Z', 'TH64093V5RN66I', 'THT02057YF9Q5Z', 'THT02047RNVD6Z', 'THT01207YXN38Z', 'THT0402800315Z', 'THT01207XZVF5Z', 'THT39097ZJ947Z', 'THT59067XXDK3Z', 'THT18047XQ617Z', 'THT01507Z8M19Z', 'THT015080NNA8Z', 'THT015080CV71Z', 'THT67037YUH25Z', 'THT36017YHS31Z', 'THT010380F5V8Z', 'THT20017ZYSM3Z', 'THT18027YKHV1Z', 'THT1601803EA6Z', 'THT67037YRU43Z', 'THT01177XB0R3Z', 'THT26017XZAQ5Z', 'THT02047YH0X3Z', 'THT11017VV3R5Z', 'THT2101801YG7Z', 'THT36057UPBZ8Z', 'THT19077Y2JG9Z', 'THT71117X5XJ4Z', 'THT01437S4CA0Z', 'THT04037UGXX2Z', 'THT21067W2211Z', 'THT56077YT126Z', 'THT01417YXKN8Z', 'THT67027WD1B4Z', 'THT01037ZDE29Z', 'THT02017XD7T8Z', 'THT01037ZAZU0Z', 'THT19077YXP83Z', 'THT21027Y5VS8Z', 'THT27017WNWX5Z', 'THT01177YQEV8Z', 'THT65017Y6NV5Z', 'THT01017TW2A0Z', 'THT01087W83T7Z', 'THT47097W0K24Z', 'THT18027YU0C1Z', 'THT01237W0QC2Z', 'THT56067YGWN1Z', 'THT01397ZDV40Z', 'THT05037Y10E3Z', 'THT02047Z03S3Z', 'THT44127YYAP2Z', 'THT01177XQHK7Z', 'THT01437ZNF80Z', 'THT01437ZQUT3Z', 'THT01397YA3Y1Z', 'THT01437X3JU9Z', 'THT27012JK5G3Z', 'THT05097XNYU8Z', 'THT04037U26G8Z', 'THT100828VYJ4Z', 'THT03047XN0N7Z', 'THT33017WDFZ1Z', 'THT26067X7K97Z', 'THT67037XG8C2Z', 'THT10037WV0K1Z', 'THT25027XSTB9Z', 'THT01317YDTJ4Z', 'THT01017X7NG9Z', 'THT01017X7NG9Z', 'THT16027X63E0Z', 'THT02017Z1684Z', 'THT02017Y75Q5Z', 'THT02017XQKQ8Z', 'THT03037UZFB8Z', 'THT11017VX982Z', 'THT11017VX994Z', 'THT02037XDR55Z', 'THT01347X6JT5Z', 'THT04037WMTS2Z', 'THT13067WSTU6Z', 'THT70037T77S8Z', 'THT02027TY5Z9Z', 'THT02057WZ0X3Z', 'THT01347X7K85Z', 'THT01017X2UW9Z', 'THT04037NWU00Z', 'THT29017W43R0Z', 'THT38067X9C26Z', 'THT15067XMHT5Z', 'THT27217WB6W8Z', 'THT16017VA136Z', 'THT67037VJU27Z', 'THT01017Y1AN2Z', 'THT02017W8231Z', 'THT04067X4RU9Z', 'THT01017X8M98Z', 'THT01397Y6VG6Z', 'TH21013SU6038C', 'TH21013SU63K6C', 'TH21013SAW9R9C', 'TH21013S6WH05C', 'THT04077WK1Z3Z', 'THT05067VRV08Z', 'THT04027WPDH9Z', 'THT39017W3315Z', 'THT01017WBAS4Z', 'THT25027W4J99Z', 'THT26067W0XB2Z', 'THT01307WA5B0Z', 'THT02017U4CW7Z', 'THT01367UGGV9Z', 'THT03027SG5E2Z', 'THT67037SXH72Z', 'THT01347USAZ7Z', 'THT01347USAZ9Z', 'THT01422KEZ71Z', 'THT02037WPGN4Z', 'THT71117VWRS4Z', 'THT71147UY7V6Z', 'THT04067Q56M4Z', 'THT01047VF5N3Z', 'THT11017WWBE3Z', 'THT20047TVP13Z', 'THT03017WGDR1Z', 'THT10037R7MB3Z', 'THT01417X4H63Z', 'THT15037WG4B6Z', 'THT01017TPAG4Z', 'THT07011XTNS5Z', 'THT01437US346Z', 'THT67017W3UT1Z', 'THT10037UZU09Z', 'THT01177UTWX7Z', 'THT02017U1T64Z', 'THT02047W1AN1Z', 'THT01397VACK6Z', 'THT03017QRFX6Z', 'THT67037VSKW3Z', 'THT01437TY2X8Z', 'THT26057XDF12Z', 'THT05147V8TZ4Z', 'THT20047TEE15Z', 'THT02037UW268Z', 'THT68087VUP40Z', 'THT040329R0A0Z', 'THT03017T0P75Z', 'THT20047T8R16Z', 'THT20047U8CB6Z', 'THT20017V3G94Z', 'THT20087VSJ84Z', 'THT02027STK16Z', 'TH16023URP7W7B', 'THT03022E1CC0Z', 'THT01397QST49Z', 'THT63077S3VY7Z', 'THT21067TCVT8Z', 'THT25067WH9Z9Z', 'THT03037U0YS5Z', 'THT01387VMT62Z', 'THT04077UR1T9Z', 'THT01397VHXD6Z', 'THT05047RJ631Z', 'THT20047REKS5Z', 'THT01127QQ8G9Z', 'THT01197V4EN7Z', 'THT20047T85J9Z', 'THT05047TAMY0Z', 'THT02017RU1N4Z', 'THT63017UEYN7Z', 'THT20077RSZ02Z', 'THT20017ST081Z', 'THT01167SCWK4Z', 'THT01137TYHD9Z', 'THT03017T0763Z', 'THT20047TEE37Z', 'THT01177UQKT6Z', 'THT68047SYAJ7Z', 'THT68047SYAJ9Z', 'THT01117V98Z5Z', 'THT20047UUTD6Z', 'THT20047TCPG9Z', 'THT13037WR4Q3Z', 'THT20087UNQ76Z', 'THT01397U0UA5Z', 'THT37047R0EE2Z', 'THT20067S91N7Z', 'THT01237SYG64Z', 'THT29017QPBX8Z', 'THT20047VKRY5Z', 'THT10017UUQV7Z', 'THT20047SE5D8Z', 'THT01517R3R43Z', 'THT01317UK648Z', 'THT01437V5KX3Z', 'THT25027TG7J5Z', 'THT01397PWM01Z', 'THT01037VRY87Z', 'THT01212JPQN7Z', 'THT04077T6DG9Z', 'THT01347V3JF7Z', 'THT02027UHEQ2Z', 'THT13067R2GW9Z', 'THT20087URUS6Z', 'THT01017UA1F2Z', 'THT21057TM9X2Z', 'THT24047V2KE3Z', 'THT02017WVFM2Z', 'THT20097SUVV3Z', 'THT01167UU0N4Z', 'THT69057TNRG4Z', 'TH30113VB6E34A', 'THT04017UU9R8Z', 'THT01047TXPA8Z', 'THT01477UJP17Z', 'THT04027PSZN6Z', 'THT65087TB808Z', 'THT14097VUQX5Z', 'THT01397UFZ10Z', 'THT02017SAAK7Z', 'THT05067U5U00Z', 'THT03027V5XU3Z', 'THT01417T6QJ3Z', 'THT01287RV659Z', 'THT33057UXMN3Z', 'THT38117QU6V9Z', 'THT40027T6U35Z', 'THT02017SUQ77Z', 'THT01037UDA73Z', 'THT02037RV653Z', 'THT02027U43P0Z', 'THT01447T1XG7Z', 'THT07102JX6A1Z', 'THT39137RXFS7Z', 'THT01397T9KH3Z', 'THT05047UBMM8Z', 'THT37017UHCV0Z', 'THT01397UF9W4Z', 'THT01037SQ4Z6Z', 'THT01397T2967Z', 'THT04077UGX11Z', 'THT01087TEXM9Z', 'THT01087TC3D2Z', 'THT67027NRUV9Z', 'THT01337U5XB4Z', 'THT76027RTY83Z', 'THT55017T8F30Z', 'THT01057SAG29Z', 'THT01392DBYQ3Z', 'THT20077TU9T2Z', 'THT47147TU9B4Z', 'THT01187SQG19Z', 'THT24017PFXT7Z', 'THT21027U5JR1Z', 'THT01337U5XC0Z', 'THT21017SQBD3Z', 'THT20027NW554Z', 'THT20087TRXH4Z', 'THT70037SYV09Z', 'THT01477RKKU9Z', 'THT02027Q25S4Z', 'THT16037SVQ01Z', 'THT28017RWMA8Z', 'THT01477RV5W0Z', 'THT02037SH234Z', 'THT20027NKQ80Z', 'THT62097U1MH1Z', 'THT01162FE549Z', 'THT02017T88X1Z', 'THT20017RSF72Z', 'THT20047R3139Z', 'THT20077PMYP7Z', 'THT01427RW1Z0Z', 'THT01397QTSA3Z', 'THT01397SWCY3Z', 'THT02017SJ9B1Z', 'THT01227SPW66Z', 'THT03047TB3G3Z', 'THT70017QPUF7Z', 'THT24037T0YW5Z', 'THT65017RYN18Z', 'THT04027QZ222Z', 'THT55017QVUQ6Z', 'THT01347SGBV4Z', 'THT01397RB5C7Z', 'THT02017RFQV8Z', 'THT01472HVTJ6Z', 'THT01162JS7E9Z', 'THT01267SRBU9Z', 'THT01167RXWX3Z', 'THT01397NPN58Z', 'THT01427SNXP7Z', 'THT02017SWKA8Z', 'THT01277R21Y0Z', 'THT01017RU300Z', 'THT02017SU636Z', 'THT02012C3H32Z', 'THT02017R6232Z', 'THT01447SMSZ6Z', 'THT02047PK6H8Z', 'THT03017T2EE7Z', 'THT01337R7EJ0Z', 'THT37057Q2E24Z', 'THT02037SN6Z3Z', 'THT02027RE810Z', 'THT26017S4CK3Z', 'THT67032JAKX3Z', 'THT25027NZ120Z', 'THT01407S43T3Z', 'THT02047R3VV3Z', 'THT56017P4BX4Z', 'THT01397PYSX0Z', 'THT01057RCKW8Z', 'THT01377QJ7J9Z', 'THT20047R3139Z', 'THT02047QC8U1Z', 'THT29017QBMX9Z', 'THT01077QDKD5Z', 'THT47017SHYW2Z', 'THT47152KD0N3Z', 'THT01397R8JH5Z', 'THT63032JJCE1Z', 'THT15067S9GE8Z', 'THT67017S6023Z', 'THT01437QCXH1Z', 'THT01127R8WT0Z', 'THT01057PK8B0Z', 'THT70047QM184Z', 'THT10037QJN81Z', 'THT10037NU2B5Z', 'THT01397QEJA2Z', 'THT01397QHHM3Z', 'THT04047PTVD3Z', 'THT21017PFJ36Z', 'THT03017QQQN7Z', 'THT01437PQ776Z', 'THT28052JHR59Z', 'THT20057Q6UT5Z', 'THT54017QTU00Z', 'THT02027P1F67Z', 'THT76042KFDA3Z', 'THT04037NWU00Z', 'THT02037NXCA7Z', 'THT27017PAK06Z', 'THT18022H6MQ2Z', 'THT15067QWPQ3Z', 'THT01467PV3V0Z', 'THT15067R8MN3Z', 'THT01272DKW89Z', 'THT01127QM433Z', 'THT66087PSS02Z', 'THT65012JXBN9Z', 'THT01127R5DF1Z', 'THT03017QQQN7Z');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.returned
from fle_staging.parcel_info pi
where
    pi.state = 5
    and pi.pno in ('THT200288BJ44Z', 'THT011889P7W1Z', 'THT08018AP9N6Z', 'THT01478BKPM6Z', 'THT12048AR8M6Z', 'THT04068B2XK9Z', 'THT04038ADZA4Z', 'THT471489CCW9Z', 'THT01018BHJR1Z', 'THT67028A0M37Z', 'THT30228AP4F0Z', 'THT10028D09C3Z', 'THT24038CYK40Z', 'THT380289QMR9Z', 'THT10038A9J99Z', 'THT21068C0B07Z', 'THT21068B1W23Z', 'THT31138967P7Z', 'THT19078A4UM3Z', 'THT04068AQTF9Z', 'THT03018AYVK2Z', 'THT01238CZX55Z', 'THT01178B6W16Z', 'THT01178B9WB7Z', 'THT01188ASP94Z', 'THT050689ZAY3Z', 'THT01218BMVE4Z', 'THT37018AMX53Z', 'THT040287D526Z', 'THT01268CPRY4Z', 'THT01038D3450Z', 'THT04028C6GT6Z', 'THT01188BKM48Z', 'THT04048BJM47Z', 'THT01178AYSM7Z', 'THT56127X9U11Z', 'THT03048C2F29Z', 'THT10108APCS8Z', 'THT02028BZRS5Z', 'THT61088ANS09Z', 'THT01058BQRP5Z', 'THT01188A81A1Z', 'THT14078AKYB5Z', 'THT272188P2X2Z', 'THT26058BN5Z3Z', 'THT0151860E02Z', 'THT01098ANHN3Z', 'THT37018BYJR8Z', 'THT24038BSJW1Z', 'THT21058CP7X9Z', 'THT240186SB89Z', 'THT0143895BU8Z', 'THT01398B8JK6Z', 'THT012789G282Z', 'THT012789KD63Z', 'THT012789KF13Z', 'THT3110886EY2Z', 'THT2604883Z53Z', 'THT15068A1QE8Z', 'THT0141890RQ1Z', 'THT20048A3QN0Z', 'THT320588APV6Z', 'THT0143891MP8Z', 'THT01138C7657Z', 'THT01038AX3D7Z', 'THT01068AZ5F4Z', 'THT01168AADM0Z', 'THT37178A3H77Z', 'THT02038C21K7Z', 'THT03018BT8B1Z', 'THT640286G729Z', 'THT640286G727Z', 'THT16038BFAU0Z', 'THT01438APXH8Z', 'THT150689MW63Z', 'THT20048BXBP4Z', 'THT0103886NR2Z', 'THT050389J3Q0Z', 'THT04048BN5Y9Z', 'THT013987NZ66Z', 'THT390989ZH26Z', 'THT01088AH0X2Z', 'THT160187JDV9Z', 'THT160187JDS9Z', 'THT014389WVC0Z', 'THT60017NNVX4Z', 'THT200488P641Z', 'THT1011893E69Z', 'THT02058A5E45Z', 'THT4401885RE4Z', 'THT14078AC5B6Z', 'THT16018AH797Z', 'THT100289Z333Z', 'THT01438A5267Z', 'THT01288AP1H2Z', 'THT070189GNQ4Z', 'THT01218839G7Z', 'THT040284MQU7Z', 'THT05118834Q7Z', 'THT04028AFEW5Z', 'THT01438A5HQ1Z', 'THT24058B0BG6Z', 'THT020389H6H8Z', 'THT200486WW90Z', 'THT02018929Y3Z', 'THT014282P7K5Z', 'THT0206889BE0Z', 'THT04028348C6Z', 'THT01088B6GV4Z', 'THT600788KRG8Z', 'THT0201871AA4Z', 'THT01398833X3Z', 'THT0130882MC4Z', 'THT301889V8Z0Z', 'THT53018536W5Z', 'THT05118A2VZ6Z', 'THT200584QBW3Z', 'THT050386RRH9Z', 'THT190787NZK0Z', 'THT72058901A6Z', 'THT200889EN35Z', 'THT01168A8452Z', 'THT014388QSV9Z', 'THT200184AD69Z', 'THT050682SW38Z', 'THT3304888MP7Z', 'THT20048A1556Z', 'THT011689H8J3Z', 'THT010989EB65Z', 'THT67037SCQG4Z', 'THT030187WW06Z', 'THT3706887E37Z', 'THT020286X0U4Z', 'THT020288Y928Z', 'THT0206871VX8Z', 'THT051189Z0Y7Z', 'THT200889BG00Z', 'THT030287MHS2Z', 'THT120488VCM2Z', 'THT013988QV36Z', 'THT040588MRZ5Z', 'THT471584CDW0Z', 'THT012686SZC1Z', 'THT370984E380Z', 'THT0121887GR9Z', 'THT260688FV02Z', 'THT020488BWZ3Z', 'THT260688FV00Z', 'THT271888NCU9Z', 'THT700486RN37Z', 'THT0110880J85Z', 'THT02018757T6Z', 'THT240185DWG4Z', 'THT040688TCS8Z', 'THT390185YSX3Z', 'THT210687MPM8Z', 'THT240485JXE4Z', 'THT6703873JQ7Z', 'THT520185FCJ8Z', 'THT02068271Q1Z', 'THT0123897MH3Z', 'THT160287GJ24Z', 'THT6101882BD7Z', 'THT2007838KF2Z', 'THT020288VUY1Z', 'THT310484A825Z', 'THT011680CGJ5Z', 'THT014084QXD9Z', 'THT012886G7Y0Z', 'THT01308723F2Z', 'THT160287GGT8Z', 'THT030187Y5M3Z', 'THT070387Q2G7Z', 'THT290688ANZ6Z', 'THT210687ZZ19Z', 'THT01058529R9Z', 'THT100187T9S3Z', 'THT010188NZY7Z', 'THT270188FFT7Z', 'THT16038699N6Z', 'THT013987YE98Z', 'THT020486WHJ6Z', 'THT0203845MT6Z', 'THT290386S0N4Z', 'THT450182MVV5Z', 'THT01018625A7Z', 'THT013986X202Z', 'THT01162FE549Z', 'THT0105861E53Z', 'THT70018515N0Z', 'THT70018515P0Z', 'THT520585GFY4Z', 'THT751083E6E0Z', 'THT311487F4S7Z', 'THT013986X200Z', 'THT011882SR73Z', 'THT1804818HF5Z', 'THT670383RAV5Z', 'THT200481R478Z', 'THT450185YAF0Z', 'THT200783YXV4Z', 'THT200783YXV4Z', 'THT030484PZY2Z', 'THT01068711N2Z', 'THT012185K5K0Z', 'THT0401873M61Z', 'THT0203857PC7Z', 'THT1104864B52Z', 'THT0139875CM9Z', 'THT1003867YA0Z', 'THT6703839PN1Z', 'THT013986Y848Z', 'THT470185BX35Z', 'THT2004849TM9Z', 'THT013684EQG8Z', 'THT0114875F68Z', 'THT71108473R1Z', 'THT01057Y2T94Z', 'THT180484ANW2Z', 'THT015185SAD2Z', 'THT013480UUS9Z', 'THT013985A969Z', 'THT300784QXN7Z', 'THT711184MU00Z', 'THT012285UGV9Z', 'THT20048230H0Z', 'THT302285DZG7Z', 'THT050785T8D0Z', 'THT2004861F84Z', 'THT66088559X7Z', 'THT270285ME43Z', 'THT200485P688Z', 'THT4719854HZ1Z', 'THT670285BJW6Z', 'THT01037ZKA34Z', 'THT0516855D14Z', 'THT580685UPR0Z', 'THT200485XK28Z', 'THT200586YT85Z', 'THT01428558S4Z', 'THT4509815GE2Z', 'THT020284KKR9Z', 'THT0406868012Z', 'THT0201856UR4Z', 'THT0104872421Z', 'THT020385YVZ5Z', 'THT1001862E01Z', 'THT0201861MR4Z', 'THT013183BSQ8Z', 'THT20047XSNS6Z', 'THT150685SC05Z', 'THT7111851AA2Z', 'THT020285R7N1Z', 'THT1011837405Z', 'THT020285YHN6Z', 'THT670383DJ27Z', 'THT83K8X7', 'THT012182HW21Z', 'THT01397Z0AA2Z', 'THT27087ZS6V2Z', 'THT180682KH04Z', 'THT011683KYN3Z', 'THT040185GPA0Z', 'THT01288597T6Z', 'THT014785QW71Z', 'THT160285MMA8Z', 'THT020282H9U4Z', 'THT013384SYA0Z', 'THT160384EPN8Z', 'THT010585T276Z', 'THT6501843MD6Z', 'THT160183Y3V7Z', 'THT011682FWS9Z', 'THT011685VHE3Z', 'THT45018536H5Z', 'THT015084EFB7Z', 'THT014785E3P2Z', 'THT5502857372Z', 'THT051380S7E2Z', 'THT100383GWP6Z', 'THT150682QQW5Z', 'THT210580Z9K8Z', 'THT1501851QU2Z', 'THT0122853U15Z', 'THT650182FAC9Z', 'THT013985TXP3Z', 'THT150685SBZ2Z', 'THT011680CG92Z', 'THT0402859CQ7Z', 'THT050384R009Z', 'THT020584WJG3Z', 'THT010383QCB6Z', 'THT0203845MT6Z', 'THT282284VZ33Z', 'THT610983Y172Z', 'THT660582EQN4Z', 'THT240382WVU6Z', 'THT010485RPK4Z', 'THT681783C933Z', 'THT150182P757Z', 'THT340284DZ05Z', 'THT0102841499Z', 'THT120682MHJ5Z', 'THT013983C1P7Z', 'THT020184EPA6Z', 'THT014783MS65Z', 'THT400484CC21Z', 'THT015180DYE8Z', 'THT030682X131Z', 'THT010383KHB2Z', 'THT0202817KG6Z', 'THT0201857V76Z', 'THT2409848B20Z', 'THT013984FDD3Z', 'THT011682AZT6Z', 'THT0402845TS1Z', 'THT400482USH9Z', 'THT010183R715Z', 'THT6804841ZW9Z', 'THT02037Z31J1Z', 'THT0134848HV7Z', 'THT2701855MX7Z', 'THT03027SG5E2Z', 'THT051184W5Z5Z', 'THT013983C231Z', 'THT0136847BU2Z', 'THT040685KBY3Z', 'THT03017ZGKY1Z', 'THT241182HB18Z', 'THT2404837SE3Z', 'THT4002838M22Z', 'THT6901842CN2Z', 'THT030281ZS17Z', 'THT040784D163Z', 'THT040182Z5E4Z', 'THT470182F1V3Z', 'THT01187Y3WH8Z', 'THT010680HBM8Z', 'THT24037ZYT75Z', 'THT56017Y7GB7Z', 'THT011582MTT9Z', 'THT020684Y6K3Z', 'THT011884BBD0Z', 'THT7410839Y27Z', 'THT01397ZWQR3Z', 'THT350181VUP0Z', 'THT0504848GC8Z', 'THT240183AH05Z', 'THT210483CF14Z', 'THT040282BHV4Z', 'THT3704814Y26Z', 'THT3302834M79Z', 'THT20078339T6Z', 'THT01037Q7WB9Z', 'THT051183VMT8Z', 'THT014381JKU4Z', 'THT6703839TE8Z', 'THT01148255G2Z', 'THT051380S7E2Z', 'THT20047RKU87Z', 'THT0116813T86Z', 'THT641582ZKA0Z', 'THT014783KC06Z', 'THT010183SN12Z', 'THT01487ZF9Q2Z', 'THT690182NU31Z', 'THT310184AMD9Z', 'THT1405834JK7Z', 'THT1405834JK7Z', 'THT013983HY32Z', 'THT04027X14Q9Z', 'THT01398319S5Z', 'THT012681W0U2Z', 'THT040381CEX5Z', 'THT013981YV98Z', 'THT020383CNB4Z', 'TH05063W091D2P', 'TH05063VYXCT8P', 'THT02037SH234Z', 'THT014282ZYP7Z', 'THT01397QMRU6Z', 'THT014282Q4V5Z', 'THT014480AHK2Z', 'THT250283BVC9Z', 'THT01288111B4Z', 'THT01028304A5Z', 'THT014080R8J7Z', 'THT0131814RK4Z', 'THT02017ZNA27Z', 'THT310180XT32Z', 'THT730582TR49Z', 'THT04068263G1Z', 'THT0105823AA9Z', 'THT0406827BC4Z', 'THT013983A431Z', 'THT0122813NF5Z', 'THT19077Z9ZY3Z', 'THT014980WDF5Z', 'THT01168018Y8Z', 'THT3909815041Z', 'THT2606839UT2Z', 'THT23037Q08M5Z', 'THT01438182B7Z', 'THT015180NB09Z', 'THT014381JKU4Z', 'THT0204823UB2Z', 'THT0139809980Z', 'THT01167YEN48Z', 'THT050682BUM7Z', 'THT2411802574Z', 'THT140780T493Z', 'THT030682KU86Z', 'THT0122821MA8Z', 'THT0103815073Z', 'THT013982USW4Z', 'THT700180V5P1Z', 'THT67037QB9S9Z', 'THT20047YS0V6Z', 'THT011982Y553Z', 'THT272081WH76Z', 'THT020682V5Q2Z', 'THT0139825E58Z', 'THT040582TRK1Z', 'THT0301804KZ5Z', 'THT68107VMYX0Z', 'THT030680TBA1Z', 'THT610481V8K9Z', 'THT10117XKGJ5Z', 'THT38017WHSR2Z', 'THT0139809980Z', 'THT76058157T7Z', 'THT68047SYAJ7Z', 'THT68047SYAJ9Z', 'THT20047YPNP2Z', 'THT55018159E8Z', 'THT02018142F7Z', 'THT38048012D1Z', 'THT37018030M2Z', 'THT0203814255Z', 'THT0306818E63Z', 'THT390180BCV9Z', 'THT01217X2B55Z', 'THT01348026X1Z', 'THT020281HTF2Z', 'THT01397Y4VV7Z', 'THT150381H9Z7Z', 'THT0122812A87Z', 'THT03068025T8Z', 'THT47157Y3B59Z', 'THT680180H5S2Z', 'THT61018145M4Z', 'THT290181Y253Z', 'THT0139809G28Z', 'THT04017ZG2B5Z', 'THT01017WQB75Z', 'THT0103821S67Z', 'THT140180TA61Z', 'THT040681H8V6Z', 'THT1601809FN8Z', 'THT271180Z0V7Z', 'THT47147YDH90Z', 'THT01177UW902Z', 'THT01517YX7M5Z', 'THT01397Y2K75Z', 'THT03067ZZJK1Z', 'THT020380WG88Z', 'THT013980T927Z', 'THT04027XRX95Z', 'THT700180NFC4Z', 'THT700180R115Z', 'THT0106818D15Z', 'THT49017Y7GU7Z', 'THT3811801XR9Z', 'THT0101801VK7Z', 'THT02017ZSHT4Z', 'THT03048226J0Z', 'THT03017YQUC8Z', 'THT20017ZM963Z', 'THT010180G9X2Z', 'THT25067VPRR2Z', 'THT015180RVY5Z', 'THT650181ND51Z', 'THT0116811PD5Z', 'TH05063W091D2P', 'TH05063VYXCT8P', 'THT63017ZSN52Z', 'THT56027XXEN0Z', 'THT670280UBD1Z', 'THT610180MBU6Z', 'THT015080A7E0Z', 'THT020181B9W3Z', 'THT180181CEV5Z', 'THT27267YEEP1Z', 'THT59067ZYV34Z', 'THT40047Z32U4Z', 'THT38107ZBMQ7Z', 'THT01087ZUND0Z', 'THT05067XDBA0Z', 'THT0139804W26Z', 'THT013981MGA5Z', 'THT01227ZN739Z', 'THT050480U4T6Z', 'THT0117817S62Z', 'THT150180T7D8Z', 'THT01037ZKA34Z', 'THT210580BJ29Z', 'THT210580BJ15Z', 'THT0111803SQ0Z', 'THT61017Z03D8Z', 'TH64093V5RN66I', 'THT02057YF9Q5Z', 'THT02047RNVD6Z', 'THT01207YXN38Z', 'THT0402800315Z', 'THT01207XZVF5Z', 'THT39097ZJ947Z', 'THT59067XXDK3Z', 'THT18047XQ617Z', 'THT01507Z8M19Z', 'THT015080NNA8Z', 'THT015080CV71Z', 'THT67037YUH25Z', 'THT36017YHS31Z', 'THT010380F5V8Z', 'THT20017ZYSM3Z', 'THT18027YKHV1Z', 'THT1601803EA6Z', 'THT67037YRU43Z', 'THT01177XB0R3Z', 'THT26017XZAQ5Z', 'THT02047YH0X3Z', 'THT11017VV3R5Z', 'THT2101801YG7Z', 'THT36057UPBZ8Z', 'THT19077Y2JG9Z', 'THT71117X5XJ4Z', 'THT01437S4CA0Z', 'THT04037UGXX2Z', 'THT21067W2211Z', 'THT56077YT126Z', 'THT01417YXKN8Z', 'THT67027WD1B4Z', 'THT01037ZDE29Z', 'THT02017XD7T8Z', 'THT01037ZAZU0Z', 'THT19077YXP83Z', 'THT21027Y5VS8Z', 'THT27017WNWX5Z', 'THT01177YQEV8Z', 'THT65017Y6NV5Z', 'THT01017TW2A0Z', 'THT01087W83T7Z', 'THT47097W0K24Z', 'THT18027YU0C1Z', 'THT01237W0QC2Z', 'THT56067YGWN1Z', 'THT01397ZDV40Z', 'THT05037Y10E3Z', 'THT02047Z03S3Z', 'THT44127YYAP2Z', 'THT01177XQHK7Z', 'THT01437ZNF80Z', 'THT01437ZQUT3Z', 'THT01397YA3Y1Z', 'THT01437X3JU9Z', 'THT27012JK5G3Z', 'THT05097XNYU8Z', 'THT04037U26G8Z', 'THT100828VYJ4Z', 'THT03047XN0N7Z', 'THT33017WDFZ1Z', 'THT26067X7K97Z', 'THT67037XG8C2Z', 'THT10037WV0K1Z', 'THT25027XSTB9Z', 'THT01317YDTJ4Z', 'THT01017X7NG9Z', 'THT01017X7NG9Z', 'THT16027X63E0Z', 'THT02017Z1684Z', 'THT02017Y75Q5Z', 'THT02017XQKQ8Z', 'THT03037UZFB8Z', 'THT11017VX982Z', 'THT11017VX994Z', 'THT02037XDR55Z', 'THT01347X6JT5Z', 'THT04037WMTS2Z', 'THT13067WSTU6Z', 'THT70037T77S8Z', 'THT02027TY5Z9Z', 'THT02057WZ0X3Z', 'THT01347X7K85Z', 'THT01017X2UW9Z', 'THT04037NWU00Z', 'THT29017W43R0Z', 'THT38067X9C26Z', 'THT15067XMHT5Z', 'THT27217WB6W8Z', 'THT16017VA136Z', 'THT67037VJU27Z', 'THT01017Y1AN2Z', 'THT02017W8231Z', 'THT04067X4RU9Z', 'THT01017X8M98Z', 'THT01397Y6VG6Z', 'TH21013SU6038C', 'TH21013SU63K6C', 'TH21013SAW9R9C', 'TH21013S6WH05C', 'THT04077WK1Z3Z', 'THT05067VRV08Z', 'THT04027WPDH9Z', 'THT39017W3315Z', 'THT01017WBAS4Z', 'THT25027W4J99Z', 'THT26067W0XB2Z', 'THT01307WA5B0Z', 'THT02017U4CW7Z', 'THT01367UGGV9Z', 'THT03027SG5E2Z', 'THT67037SXH72Z', 'THT01347USAZ7Z', 'THT01347USAZ9Z', 'THT01422KEZ71Z', 'THT02037WPGN4Z', 'THT71117VWRS4Z', 'THT71147UY7V6Z', 'THT04067Q56M4Z', 'THT01047VF5N3Z', 'THT11017WWBE3Z', 'THT20047TVP13Z', 'THT03017WGDR1Z', 'THT10037R7MB3Z', 'THT01417X4H63Z', 'THT15037WG4B6Z', 'THT01017TPAG4Z', 'THT07011XTNS5Z', 'THT01437US346Z', 'THT67017W3UT1Z', 'THT10037UZU09Z', 'THT01177UTWX7Z', 'THT02017U1T64Z', 'THT02047W1AN1Z', 'THT01397VACK6Z', 'THT03017QRFX6Z', 'THT67037VSKW3Z', 'THT01437TY2X8Z', 'THT26057XDF12Z', 'THT05147V8TZ4Z', 'THT20047TEE15Z', 'THT02037UW268Z', 'THT68087VUP40Z', 'THT040329R0A0Z', 'THT03017T0P75Z', 'THT20047T8R16Z', 'THT20047U8CB6Z', 'THT20017V3G94Z', 'THT20087VSJ84Z', 'THT02027STK16Z', 'TH16023URP7W7B', 'THT03022E1CC0Z', 'THT01397QST49Z', 'THT63077S3VY7Z', 'THT21067TCVT8Z', 'THT25067WH9Z9Z', 'THT03037U0YS5Z', 'THT01387VMT62Z', 'THT04077UR1T9Z', 'THT01397VHXD6Z', 'THT05047RJ631Z', 'THT20047REKS5Z', 'THT01127QQ8G9Z', 'THT01197V4EN7Z', 'THT20047T85J9Z', 'THT05047TAMY0Z', 'THT02017RU1N4Z', 'THT63017UEYN7Z', 'THT20077RSZ02Z', 'THT20017ST081Z', 'THT01167SCWK4Z', 'THT01137TYHD9Z', 'THT03017T0763Z', 'THT20047TEE37Z', 'THT01177UQKT6Z', 'THT68047SYAJ7Z', 'THT68047SYAJ9Z', 'THT01117V98Z5Z', 'THT20047UUTD6Z', 'THT20047TCPG9Z', 'THT13037WR4Q3Z', 'THT20087UNQ76Z', 'THT01397U0UA5Z', 'THT37047R0EE2Z', 'THT20067S91N7Z', 'THT01237SYG64Z', 'THT29017QPBX8Z', 'THT20047VKRY5Z', 'THT10017UUQV7Z', 'THT20047SE5D8Z', 'THT01517R3R43Z', 'THT01317UK648Z', 'THT01437V5KX3Z', 'THT25027TG7J5Z', 'THT01397PWM01Z', 'THT01037VRY87Z', 'THT01212JPQN7Z', 'THT04077T6DG9Z', 'THT01347V3JF7Z', 'THT02027UHEQ2Z', 'THT13067R2GW9Z', 'THT20087URUS6Z', 'THT01017UA1F2Z', 'THT21057TM9X2Z', 'THT24047V2KE3Z', 'THT02017WVFM2Z', 'THT20097SUVV3Z', 'THT01167UU0N4Z', 'THT69057TNRG4Z', 'TH30113VB6E34A', 'THT04017UU9R8Z', 'THT01047TXPA8Z', 'THT01477UJP17Z', 'THT04027PSZN6Z', 'THT65087TB808Z', 'THT14097VUQX5Z', 'THT01397UFZ10Z', 'THT02017SAAK7Z', 'THT05067U5U00Z', 'THT03027V5XU3Z', 'THT01417T6QJ3Z', 'THT01287RV659Z', 'THT33057UXMN3Z', 'THT38117QU6V9Z', 'THT40027T6U35Z', 'THT02017SUQ77Z', 'THT01037UDA73Z', 'THT02037RV653Z', 'THT02027U43P0Z', 'THT01447T1XG7Z', 'THT07102JX6A1Z', 'THT39137RXFS7Z', 'THT01397T9KH3Z', 'THT05047UBMM8Z', 'THT37017UHCV0Z', 'THT01397UF9W4Z', 'THT01037SQ4Z6Z', 'THT01397T2967Z', 'THT04077UGX11Z', 'THT01087TEXM9Z', 'THT01087TC3D2Z', 'THT67027NRUV9Z', 'THT01337U5XB4Z', 'THT76027RTY83Z', 'THT55017T8F30Z', 'THT01057SAG29Z', 'THT01392DBYQ3Z', 'THT20077TU9T2Z', 'THT47147TU9B4Z', 'THT01187SQG19Z', 'THT24017PFXT7Z', 'THT21027U5JR1Z', 'THT01337U5XC0Z', 'THT21017SQBD3Z', 'THT20027NW554Z', 'THT20087TRXH4Z', 'THT70037SYV09Z', 'THT01477RKKU9Z', 'THT02027Q25S4Z', 'THT16037SVQ01Z', 'THT28017RWMA8Z', 'THT01477RV5W0Z', 'THT02037SH234Z', 'THT20027NKQ80Z', 'THT62097U1MH1Z', 'THT01162FE549Z', 'THT02017T88X1Z', 'THT20017RSF72Z', 'THT20047R3139Z', 'THT20077PMYP7Z', 'THT01427RW1Z0Z', 'THT01397QTSA3Z', 'THT01397SWCY3Z', 'THT02017SJ9B1Z', 'THT01227SPW66Z', 'THT03047TB3G3Z', 'THT70017QPUF7Z', 'THT24037T0YW5Z', 'THT65017RYN18Z', 'THT04027QZ222Z', 'THT55017QVUQ6Z', 'THT01347SGBV4Z', 'THT01397RB5C7Z', 'THT02017RFQV8Z', 'THT01472HVTJ6Z', 'THT01162JS7E9Z', 'THT01267SRBU9Z', 'THT01167RXWX3Z', 'THT01397NPN58Z', 'THT01427SNXP7Z', 'THT02017SWKA8Z', 'THT01277R21Y0Z', 'THT01017RU300Z', 'THT02017SU636Z', 'THT02012C3H32Z', 'THT02017R6232Z', 'THT01447SMSZ6Z', 'THT02047PK6H8Z', 'THT03017T2EE7Z', 'THT01337R7EJ0Z', 'THT37057Q2E24Z', 'THT02037SN6Z3Z', 'THT02027RE810Z', 'THT26017S4CK3Z', 'THT67032JAKX3Z', 'THT25027NZ120Z', 'THT01407S43T3Z', 'THT02047R3VV3Z', 'THT56017P4BX4Z', 'THT01397PYSX0Z', 'THT01057RCKW8Z', 'THT01377QJ7J9Z', 'THT20047R3139Z', 'THT02047QC8U1Z', 'THT29017QBMX9Z', 'THT01077QDKD5Z', 'THT47017SHYW2Z', 'THT47152KD0N3Z', 'THT01397R8JH5Z', 'THT63032JJCE1Z', 'THT15067S9GE8Z', 'THT67017S6023Z', 'THT01437QCXH1Z', 'THT01127R8WT0Z', 'THT01057PK8B0Z', 'THT70047QM184Z', 'THT10037QJN81Z', 'THT10037NU2B5Z', 'THT01397QEJA2Z', 'THT01397QHHM3Z', 'THT04047PTVD3Z', 'THT21017PFJ36Z', 'THT03017QQQN7Z', 'THT01437PQ776Z', 'THT28052JHR59Z', 'THT20057Q6UT5Z', 'THT54017QTU00Z', 'THT02027P1F67Z', 'THT76042KFDA3Z', 'THT04037NWU00Z', 'THT02037NXCA7Z', 'THT27017PAK06Z', 'THT18022H6MQ2Z', 'THT15067QWPQ3Z', 'THT01467PV3V0Z', 'THT15067R8MN3Z', 'THT01272DKW89Z', 'THT01127QM433Z', 'THT66087PSS02Z', 'THT65012JXBN9Z', 'THT01127R5DF1Z', 'THT03017QQQN7Z');
;-- -. . -..- - / . -. - .-. -.--
select
    min(pi.created_at)
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0328 t on t.pno = pi.pno;
;-- -. . -..- - / . -. - .-. -.--
select * from tmpale.tmp_th_pno_0328;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.ticket_delivery_staff_info_id
    ,pi.ticket_delivery_store_id
    ,st_distance_sphere(point(pi.ticket_delivery_staff_lng, pi.ticket_delivery_staff_lat), point(ss.lng, ss.lat)) 妥投距离网点距离
    ,if(pr.pno is null, '否', '是') 是否妥投后盘库
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0328 t on t.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join
    (
        select
            pr.pno
        from rot_pro.parcel_route pr
        join tmpale.tmp_th_pno_0328 t on t.pno = pr.pno
        left join fle_staging.parcel_info pi on pi.pno = t.pno
        where
            pr.route_action = 'INVENTORY'
            and pr.routed_at > pi.finished_at
        group by 1
    ) pr on pr.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name 网点
    ,date(convert_tz(di.created_at, '+00:00', '+07:00')) 日期
    ,count(distinct di.pno) 包裹数
from fle_staging.store_diff_ticket sdt
left join fle_staging.diff_info di on di.id = sdt.diff_info_id
left join fle_staging.sys_store ss on ss.id = di.store_id
where
    di.diff_marker_category in (19,20) -- 网点上报破损
    and di.created_at >= '2022-12-31 17:00:00'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name 网点
    ,date(convert_tz(di.created_at, '+00:00', '+07:00')) 日期
    ,count(distinct di.pno) 包裹数
from fle_staging.store_diff_ticket sdt
left join fle_staging.diff_info di on di.id = sdt.diff_info_id
left join fle_staging.sys_store ss on ss.id = di.store_id
where
    di.diff_marker_category in (19,20) -- 网点上报破损,19 修复后直接继续派送，20会涉及到后续协商结果，以及是否进入闪速系统
    and di.created_at >= '2022-12-31 17:00:00'
    and di.store_id = 'TH01180105'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
tp.id 揽件任务id
,convert_tz(oi.created_at,'+00:00','+07:00') 创建订单时间
,convert_tz(oi.confirm_at,'+00:00','+07:00') 确认下单时间
,oi.pno 运单号
,tp.client_id
,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
,convert_tz(tp.pickup_created_at,'+00:00','+07:00') 揽件任务生成时间
,tr.remark 取消原因备注
,concat( 'https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/'  ,sa.object_key) 取消揽件任务照片
,convert_tz(tr.routed_at,'+00:00','+07:00') 取消任务时间
,tp.staff_info_id 标记快递员ID
,ss.name 标记快递员所属网点
,case oi.state
 when 0 then '已确认'
 when 1 then '待揽件'
 when 2 then '已揽收'
 when 3 then '已取消(已终止)'
 when 4 then '已删除(已作废)'
 when 5 then '预下单'
 when 6 then '被标记多次，限制揽收'
end as 订单状态
,convert_tz(pi.created_at,'+00:00','+07:00') 揽收时间
,pi.ticket_pickup_staff_info_id 揽收快递员
,ss2.name 揽收快递员网点
,if(oi.state=3,convert_tz(oi.aborted_at,'+00:00','+07:00'),null) 取消订单时间
,if(tcf.pickup_id is not null ,'是','否') '是否进入【FBI-QAQC-虚假标记审核-标记超大件、违禁物品审核】'
,case tcf.state
when 1 then '待处理'
when 2 then '责任人已认定'
when 3 then '无需判责'
end 判责结果
,tcf.process_time 审核时间
,tcf.staff_info_id 责任快递员ID
,tcf.store_name 责任快递员网点

from fle_staging.ticket_pickup tp

left join dwm.tmp_ex_big_clients_id_detail bc
on tp.client_id=bc.client_id

left join fle_staging.ka_profile kp
on tp.client_id=kp.id

left join fle_staging.ticket_pickup_order_relation tpo -- 转单前任务id
on if(tp.transfer_ancestry is not null,substring(tp.transfer_ancestry,1,9),tp.id)=tpo.ticket_pickup_id

left join bi_pro.ticket_cancel_fake_mark tcf -- 【FBI-QAQC-虚假标记审核-标记超大件、违禁物品审核】
on tp.id=tcf.pickup_id

left join fle_staging.order_info oi
on tpo.order_id=oi.id

left join fle_staging.parcel_info pi
on oi.pno=pi.pno
left join bi_pro.hr_staff_info hsi2
on pi.ticket_pickup_staff_info_id=hsi2.staff_info_id
left join fle_staging.sys_store ss2
on hsi2.sys_store_id=ss2.id

left join bi_pro.hr_staff_info hsi
on tp.staff_info_id=hsi.staff_info_id

left join fle_staging.sys_store ss
on hsi.sys_store_id=ss.id

left join m2_pro.ticket_route tr
on tp.id=tr.current_ticket_id

left join fle_staging.sys_attachment sa
on tp.id=sa.oss_bucket_key
and sa.oss_bucket_type in ('TICKET_CANCEL_PICKUP_MARK_UPLOAD','TICKET_CANCEL_CANCEL_ORDER_PHOTO_UPLOAD')

left join fle_staging.ticket_pickup_marker tpm
on tp.id=tpm.pickup_id

where 1=1
and tcf.process_time>='2023-03-01'
and tcf.process_time<'2023-03-29'
and tp.state=4 -- 取消任务
and tr.route_action=2
-- and tr.operator_type<>6
and tpm.marker_id in (87,100) -- 违禁品
-- and tp.id=417050585

group by 1,4;
;-- -. . -..- - / . -. - .-. -.--
select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2;
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 30 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 30 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 30 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name
    ,count(distinct di.pno) 3月份上传虚假
#     ,count(distinct if(di.created_at > '2023-02-24 17:00:00', di.pno, null)) 上线后
from fle_staging.diff_info di
left join fle_staging.sys_store ss on ss.id = di.store_id
where
    di.diff_marker_category in (30,31)  -- 分错地址
    and di.created_at >= '2023-02-28 17:00:00'
    and di.created_at < '2023-03-31 17:00:00'
    and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-02-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-04-01 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-02 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-02-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-04-01 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
        left join fle_staging.parcel_info pi on pi.pno = am.merge_column
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-02 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-03-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-04-01 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
        left join fle_staging.parcel_info pi on pi.pno = am.merge_column
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-02 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-03-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
#         left join fle_staging.parcel_info pi on pi.pno = di.pno
#         join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-04-01 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
#         left join fle_staging.parcel_info pi on pi.pno = am.merge_column
#         join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-02 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-03-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
#         left join fle_staging.parcel_info pi on pi.pno = di.pno
#         join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-03-31 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
#         left join fle_staging.parcel_info pi on pi.pno = am.merge_column
#         join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-01 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.3月份虚假
    ,b.上线后虚假
    ,b.3月份虚假/a.3月份上传虚假 3月虚假错分占比
    ,b.上线后虚假/a.上线后上传虚假 上线后虚假错分占比
from
    (
        select
            ss.name
            ,count(distinct if(di.created_at < '2023-03-31 17:00:00', di.pno, null)) 3月份上传虚假
            ,count(distinct if(di.created_at > '2023-03-24 17:00:00', di.pno, null)) 上线后上传虚假
        from fle_staging.diff_info di
        left join fle_staging.parcel_info pi on pi.pno = di.pno
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = di.store_id
        where
            di.diff_marker_category in (30,31)  -- 分错地址
            and di.created_at >= '2023-02-28 17:00:00'
            and di.created_at < '2023-03-31 17:00:00'
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) a
left join
    (
        select
            ss.name
            ,count(distinct if(am.abnormal_time < '2023-04-01', am.pno, null)) 3月份虚假
            ,count(distinct if(am.abnormal_time >= '2023-03-25', am.pno, null)) 上线后虚假
        from bi_pro.abnormal_message am
        left join fle_staging.parcel_info pi on pi.pno = am.merge_column
        join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
        left join fle_staging.sys_store ss on ss.id = am.store_id
        where
            am.abnormal_time >= '2023-03-01 00:00:00'
            and am.abnormal_time < '2023-04-01 00:00:00'
            and am.punish_category = 53 -- 虚假错分
            and  ( am.isappeal != 5 or am.isdel = 0)
            and ss.name in ('BKS_SP-บางกระสอ', 'KTH_SP-คลองตันเหนือ', 'ONN_SP-อ่อนนุช', 'BKP_SP-บึงคำพร้อย', 'KTE_SP-คลองเตย', 'PCP_SP-ประชาธิปัตย์', 'BKH_SP-บึงคอไห', 'BPA_SP-บางปลา', 'KUK_SP-คูคต', 'ONG_SP-ออเงิน', '2WAT_BDC-วัฒนา', 'KOW_SP-คลองควาย', 'KPW_SP-คลองประเวศ', 'TAS_SP-ตาสิทธิ์', 'BHK_SP-บางคล้า', 'NYI_SP-หนองใหญ่')
        group by 1
    ) b on b.name = a.name;
;-- -. . -..- - / . -. - .-. -.--
select
    sa.clientid
    ,sa.device_sn_code
from staff_account sa
where
    sa.clientid in ('16203385549921620338555013', '16620382663641662038266366', '865881042765039520032205919528', '869881014003803520044034632552', '16349150961421634915096143', '8621220493684661669995177774', '862122049207003520002018812517', '75b8018421cc5782', '16442814214101644281421411', '16632408955401663240895540', '16553450225111655345022514', '16487274914661648727491466', '16741961444741674196144475', '16775115495741677511549577', '16676588205731667658820575', '12623048393981262304839398', '16629931162381662993116238', '16731725772771673172577283', '16583677563401658367756341', '05cd31000d24ea1c', '16461346685831646134668584', '16611405558281661140555828', '16754329642911675432964298', '358145091489527520033402859409', '111fd3a2441d7851', '16497228350651649722835069', '16621306194021662130619402', '16753084578851675308457886', '16391913922471639191392252', '16712783574371671278357445', '16242808422771624280842283', '16564282304111656428230414', '16689909817651668990981765', '16343661090221634366109023', '16494623011981649462301204', '16665738190271666573819033', '16676583456821667658345682', '16303938607091630393860743', '16702921802831670292180283', '16735740451861673574045194', '860986041711333520002070492327', '16688596221151668859622121', '16592750563171659275056317', '867615049879510520050321942230', '869881013220036520002011471617', 'bed82a8b3181eb4a', '16579641489541657964148970', '21e3404e618968c0', '16768002206061676800220607', '865209047221214520002047159176', '16779385438051677938543805', '16543571638131654357163814', '16549097435811654909743582', '16680421921641668042192176', '869193044147026520050808895046', '16061253345481606125334549', '16487390024041648739002405', '2d1159d6aec3046f', '865209047036455520030506707919', '12623040514791262304051480', '16232856897361623285689737', '16335784299831633578429983', '16345268298841634526829884', '16468224008601646822400861', '16471319970771647131997095', '16784915326031678491532608', '16799228268361679922826836', '8658810443216821670155784809', '16233311342151623331134216', '16310299098651631029909866', '16395643835281639564383529', '16651919083121665191908322', '16760218133291676021813330', '1a3e484ab1a3b9a8', '862122049181042520002023950378', '865881043539326520002083793439', '869881013711307520002011788124', '9001b1bfe5253461', '12623041656351262304165636', '16657346796421665734679643', '16689949529461668994952947', '16707303572861670730357286', '16777172288611677717228871', '564ed869500ae935', '6ca52e01c5a857dc', '861244040631063520002093338135', '863818021418117460007492463416', '865881041046100520030506839236', '865881043083127520002006025693', '869167039774085520030309270420', '869881012276088520002051420875', '869881014205515520002012308236', 'e385f284a06cfff0')
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from tmpale.tmp_th_staff_0404 t;
;-- -. . -..- - / . -. - .-. -.--
select
    t.staff_info_id
    ,pick.num '日均揽收量 pick up/day'
    ,scan.num '日均交接量 scan/day'
    ,del.num '日均妥投量 delivery/day'
from tmpale.tmp_th_staff_0404 t
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.created_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_pickup_staff_info_id
        where
            pi.created_at >= '2023-02-28 17:00:00'
            and pi.created_at < '2023-03-31 17:00:00'
        group by 1
    ) pick on pick.ticket_pickup_staff_info_id = t.staff_info_id
left join
    (
        select
            pr.staff_info_id
            ,count(distinct pr.pno)/count(distinct date(convert_tz(pr.routed_at, '+00:00', '+07:00'))) num
        from rot_pro.parcel_route pr
        join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pr.staff_info_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at >= '2023-02-28 17:00:00'
            and pr.routed_at < '2023-03-31 17:00:00'
        group by 1
    ) scan on scan.staff_info_id = t.staff_info_id
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
        where
            pi.finished_at >= '2023-02-28 17:00:00'
            and pi.finished_at < '2023-03-31 17:00:00'
            and pi.state = 5
        group by 1
    ) del on del.ticket_pickup_staff_info_id = t.staff_info_id;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.ticket_pickup_staff_info_id
#             ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
    ,date(convert_tz(pi.finished_at, '+00:00', '+07:00')) date_d
    ,pi.pno
from fle_staging.parcel_info pi
join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
where
    pi.finished_at >= '2023-02-28 17:00:00'
    and pi.finished_at < '2023-03-31 17:00:00'
    and pi.state = 5;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.ticket_pickup_staff_info_id
#             ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
    ,date(convert_tz(pi.finished_at, '+00:00', '+07:00')) date_d
    ,pi.pno
from fle_staging.parcel_info pi
join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
where
    pi.finished_at >= '2023-02-28 17:00:00'
    and pi.finished_at < '2023-03-31 17:00:00'
    and pi.state = 5
    and pi.ticket_delivery_staff_info_id = '601489';
;-- -. . -..- - / . -. - .-. -.--
select
    pi.ticket_pickup_staff_info_id
#             ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
    ,date(convert_tz(pi.finished_at, '+00:00', '+07:00')) date_d
    ,pi.pno
from fle_staging.parcel_info pi
# join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
where
    pi.finished_at >= '2023-02-28 17:00:00'
    and pi.finished_at < '2023-03-31 17:00:00'
    and pi.state = 5
    and pi.ticket_delivery_staff_info_id = '619414';
;-- -. . -..- - / . -. - .-. -.--
select
    pi.ticket_pickup_staff_info_id
#             ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
    ,date(convert_tz(pi.finished_at, '+00:00', '+07:00')) date_d
    ,pi.pno
from fle_staging.parcel_info pi
# join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
where
    pi.finished_at >= '2023-02-28 17:00:00'
    and pi.finished_at < '2023-03-31 17:00:00'
    and pi.state = 5
    and pi.ticket_pickup_staff_info_id = '619414';
;-- -. . -..- - / . -. - .-. -.--
select
    pi.ticket_pickup_staff_info_id
#             ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
    ,date(convert_tz(pi.created_at, '+00:00', '+07:00')) date_d
    ,pi.pno
from fle_staging.parcel_info pi
# join tmpale.tmp_th_staff_0404 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
where
    pi.created_at >= '2023-02-28 17:00:00'
    and pi.created_at < '2023-03-31 17:00:00'
#     and pi.state = 5
    and pi.ticket_pickup_staff_info_id = '619414';
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,count(a.hno) 上报丢失量
    ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '未认领-待认领'
    ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功'
    ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-已失效'
    ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '认领成功-已失效'
    ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '认领失败-已失效'
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 7) creat_month
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 时效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
    ) a
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,count(a.hno) 上报丢失量
    ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '待认领'
    ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-定时任务失效'
    ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功-未失效'
    ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '无理赔认领-定时任务失效'
    ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '有理赔认领-理赔失效'
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率1
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)) + count(if(a.head_state = '认领失败-已失效', a.hno, null))) 匹配成功率2
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 时效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at < '2023-04-01'
    ) a
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,count(a.hno) 上报丢失量
    ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '待认领'
    ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-定时任务失效'
    ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功-未失效'
    ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '无理赔认领-定时任务失效'
    ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '有理赔认领-理赔失效'
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率1
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)) + count(if(a.head_state = '认领失败-已失效', a.hno, null)))/count(a.hno) 匹配成功率2
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 时效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at < '2023-04-01'
    ) a
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
            *
        from
            (
                select
                    di.id
                    ,di.pno
                    ,pi.cod_amount
					,pi.state parcel_state
					,pi.client_id
                    ,row_number() over (partition by di.pno order by di.created_at asc) rn
                from fle_staging.diff_info di
                left join fle_staging.parcel_info pi on pi.pno = di.pno
                where
                    di.diff_marker_category = 28 -- 已妥投未交接
                    and pi.state = 6
            ) di
        where di.rn = 1;
;-- -. . -..- - / . -. - .-. -.--
with di as
(
    select
            *
        from
            (
                select
                    di.id
                    ,di.pno
                    ,pi.cod_amount
					,pi.state parcel_state
					,pi.client_id
                    ,row_number() over (partition by di.pno order by di.created_at asc) rn
                from fle_staging.diff_info di
                left join fle_staging.parcel_info pi on pi.pno = di.pno
                where
                    di.diff_marker_category = 28 -- 已妥投未交接
                    and pi.state = 6
            ) di
        where di.rn = 1
)
select
    di.pno '运单号 หมายเลขพัสดุ'
    ,'疑难件交接-已妥投未交接' '包裹状态 สถานะพัสดุ'
    ,convert_tz(sdt.created_at, '+00:00', '+07:00') '"上报时间 เวลาที่รายงานติดปัญหา"
'
    ,de.pickup_time '揽收时间 เวลาที่เข้ารับ'
    ,de.client_id '客户ID ID ลูกค้า'
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as '客户类型 ประเภทลูกค้า'
    ,de.last_store_name '目的地网点 สาขาปลายทาง'
    ,smp.name '目的地片区 Districtปลายทาง'
    ,smr.name '目的地大区 Areaปลายทาง'
    ,de.cod_enabled '是否cod เป็น COD ใช่หรือไม่'
    ,di.cod_amount/100 'cod 金额 ยอด COD'
    ,de.dst_routed_at '到仓时间 เวลาที่เข้าคลัง'
    ,datediff(curdate(), de.dst_routed_at) '在仓天数 จำนวนวันที่อยู่ในคลัง'
    ,scan.num '交接天数 จำนวนวันที่สแกนส่งมอบ'
    ,pk.num '盘库天数 จำนวนวันที่สแกนตรวจสอบ'
    ,gy.num '历史标记改约天数 จำนวนวันที่หมายเหตุเปลี่ยนแปลงเวลา'
    ,convert_tz(ljj.routed_at, '+00:00', '+07:00') '最后交接时间 เวลาที่สแกนส่งมอบล่าสุด'
    ,ljj.staff_info_id '最后交接员工 พนักงานที่สแกนส่งมอบล่าสุด'
    ,case
        when  hsi.`state`=1 and hsi.`wait_leave_state` =0 then '在职'
        when  hsi.`state`=1 and hsi.`wait_leave_state` =1 then '待离职'
        when hsi.`state` =2 then '离职'
        when hsi.`state` =3 then '停职'
    end as '最后交接员工是否在职 พนักงานที่สแกนส่งมอบล่าสุดยังเป็นพนักงานปัจจุบันอยู่ใช่หรือไม่'
    ,case de.last_marker_category
        when 1        then '客户不在家/电话无人接听'
        when 2        then '收件人拒收'
        when 3        then '快件分错网点'
        when 4        then '外包装破损'
        when 5        then '货物破损'
        when 6        then '货物短少'
        when 7        then '货物丢失'
        when 8        then '电话联系不上'
        when 9        then '客户改约时间'
        when 10        then '客户不在'
        when 11        then '客户取消任务'
        when 12        then '无人签收'
        when 13        then '客户周末或假期不收货'
        when 14        then '客户改约时间'
        when 15        then '当日运力不足，无法派送'
        when 16        then '联系不上收件人'
        when 17        then '收件人拒收'
        when 18        then '快件分错网点'
        when 19        then '外包装破损'
        when 20        then '货物破损'
        when 21        then '货物短少'
        when 22        then '货物丢失'
        when 23        then '收件人/地址不清晰或不正确'
        when 24        then '收件地址已废弃或不存在'
        when 25        then '收件人电话号码错误'
        when 26        then 'cod金额不正确'
        when 27        then '无实际包裹'
        when 28        then '已妥投未交接'
        when 29        then '收件人电话号码是空号'
        when 30        then '快件分错网点-地址正确'
        when 31        then '快件分错网点-地址错误'
        when 32        then '禁运品'
        when 33        then '严重破损（丢弃）'
        when 34        then '退件两次尝试派送失败'
        when 35        then '不能打开locker'
        when 36        then 'locker不能使用'
        when 37        then '该地址找不到lockerstation'
        when 39        then '多次尝试派件失败Multipleattemptstodeliverfailed'
        when 40        then '客户不在家/电话无人接听'
        when 41        then '错过班车时间'
        when 42        then '目的地是偏远地区,留仓待次日派送'
        when 43        then '目的地是岛屿,留仓待次日派送'
        when 44        then '企业/机构当天已下班'
        when 45        then '子母件包裹未全部到达网点'
        when 46        then '不可抗力原因留仓(台风)；目前只有在给客户回调时用到了这个原因项，后续如果复用请确定好场景'
        when 50        then '客户取消寄件'
        when 51        then '信息录入错误'
        when 52        then '客户取消寄件'
        when 69        then '禁运品'
        when 70        then '客户改约时间'
        when 71        then '当日运力不足,无法派送'
        when 72        then '客户周末或假期不收货'
        when 73        then '收件人/地址不清晰或不正确'
        when 74        then '收件地址已废弃或不存在'
        when 75        then '收件人电话号码错误'
        when 76        then 'cod金额不正确'
        when 77        then '企业/机构当天已下班'
        when 78        then '收件人电话号码是空号'
        when 79        then '快件分错网点-地址错误'
        when 80        then '客户取消任务'
        when 81        then '重复下单'
        when 82        then '已完成揽件'
        when 83        then '联系不上客户'
        when 84        then '包裹不符合揽收条件(超大件、违禁物品)'
        when 85        then '寄件人电话号码是空号'
        when 86        then '包裹不符合揽收条件超大件'
        when 87        then '包裹不符合揽收条件违禁品'
        when 88        then '寄件人地址为岛屿'
        when 90        then '包裹未准备好推迟揽收'
        when 91        then '包裹包装不符合运输标准'
        when 92        then '客户提供的清单里没有此包裹'
        when 93        then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94        then '客户取消寄件/客户实际不想寄此包裹'
        when 95        then '车辆/人力短缺推迟揽收'
        when 96        then '遗漏揽收(已停用)'
        when 97        then '子母件(一个单号多个包裹)'
        when 98        then '地址错误addresserror'
        when 99        then '包裹不符合揽收条件：超大件'
        when 100        then '包裹不符合揽收条件：违禁品'
        when 101        then '包裹包装不符合运输标准'
        when 102        then '包裹未准备好'
        when 103        then '运力短缺，跟客户协商推迟揽收'
        when 104        then '子母件(一个单号多个包裹)'
        when 105        then '破损包裹'
        when 106        then '空包裹'
        when 107        then '不能打开locker(密码错误)'
        when 108        then 'locker不能使用'
        when 109        then 'locker找不到'
        when 110        then '运单号与实际包裹的单号不一致'
        when 111        then 'box客户取消任务'
        when 112        then '不能打开locker(密码错误)'
        when 113        then 'locker不能使用'
        when 114        then 'locker找不到'
        when 115        then '实际重量尺寸大于客户下单的重量尺寸'
        when 116        then '客户仓库关闭'
        when 117        then '客户仓库关闭'
        when 118        then 'SHOPEE订单系统自动关闭'
    end  as '最后派件标记原因 สาเหตุที่หมายเหตุพัสดุงานส่งวันนี้'
    ,convert_tz(lgy.created_at, '+00:00', '+07:00') '最后一次标记改约日期 วันที่เปลี่ยนแปลงเวลาครั้งสุดท้าย'
    ,convert_tz(lgy.desired_at, '+00:00', '+07:00') '最后一次标记改约到的日期 วันที่เปลี่ยนแปลงเวลาที่ต้องนำจัดส่ง'
    ,if(plt.updated_at > sdt.created_at , plt.updated_at, null) '定责时间 เวลาที่ตัดสิน'
    ,datediff(if(plt.updated_at > sdt.created_at , plt.updated_at, null), convert_tz(sdt.created_at, '+00:00', '+07:00')) '结案时长（天）ระยะเวลาในการจัดการหลังจากตัดสิน'
from  di
left join dwm.dwd_ex_th_parcel_details de on di.pno = de.pno
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = di.id
left join fle_staging.ka_profile kp on di.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = di.client_id
left join fle_staging.sys_store ss on de.last_store_id = ss.id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_manage_piece smp on smp.id = ss.manage_piece
left join
    (
        select
            pr.store_id
            ,pr.pno
            ,count(distinct date(convert_tz(pr.routed_at, '+00:00', '+07:00'))) num
        from rot_pro.parcel_route pr
        join di on pr.pno = di.pno
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
        group by 1,2
    ) scan on scan.pno = de.pno and scan.store_id = de.last_store_id
left join
    (
        select
            pr.store_id
            ,pr.pno
            ,count(distinct date(convert_tz(pr.routed_at, '+00:00', '+07:00'))) num
        from rot_pro.parcel_route pr
        join di on di.pno = pr.pno
        where
            pr.route_action = 'INVENTORY'
        group by 1,2
    ) pk on pk.pno = de.pno and pk.store_id = de.last_store_id
left join
     (
        select
            td.store_id
            ,td.pno
            ,count(distinct date(convert_tz(tdm.created_at, '+00:00', '+07:00'))) num
        from fle_staging.ticket_delivery td
        left join fle_staging.ticket_delivery_marker tdm on tdm.delivery_id = td.id
        join di on td.pno = di.pno
        where
            tdm.marker_id in (9, 14, 70)
        group by 1,2
    ) gy on gy.pno = de.pno and gy.store_id = de.last_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.pno
                    ,pr.routed_at
                    ,pr.staff_info_id
                    ,pr.store_id
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                from rot_pro.parcel_route pr
                join di on di.pno = pr.pno
                where
                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            ) pr
        where pr.rn = 1
    ) ljj on ljj.pno = de.pno and ljj.store_id = de.last_store_id
left join bi_pro.hr_staff_info hsi on ljj.staff_info_id = hsi.staff_info_id
left join
    (
        select
            *
        from
            (
                select
                    td.pno
                    ,tdm.desired_at
                    ,tdm.created_at
                    ,row_number() over (partition by td.pno order by tdm.created_at desc ) rn
                 from fle_staging.ticket_delivery td
                left join fle_staging.ticket_delivery_marker tdm on tdm.delivery_id = td.id
                join di on di.pno = td.pno
                where
                    tdm.marker_id in (9, 14, 70)
            ) gy
        where gy.rn = 1
    ) lgy on lgy.pno = de.pno
left join bi_pro.parcel_lose_task plt on plt.pno = de.pno and plt.state = 6 and plt.duty_result = 1
where
     di.parcel_state = 6;
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name
    ,ss.name name2
    ,count(ph.hno) num
from fle_staging.parcel_headless ph
left join fle_staging.sys_store ss on ss.id = ph.submit_store_id
left join fle_staging.sys_store ss2 on ss2.id = ph.claim_store_id
where
    ph.claim_store_id is not null
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name
    ,ss.name name2
    ,count(ph.hno) num
from fle_staging.parcel_headless ph
left join fle_staging.sys_store ss on ss.id = ph.submit_store_id
left join fle_staging.sys_store ss2 on ss2.id = ph.claim_store_id
where
    ph.claim_store_id is not null
    and ph.state < 4
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,a.submit_store_name
    ,count(a.hno) 上报丢失量
    ,count(if(a.pno is not null and a.claim_store_id is not null, a.hno, null)) 网点认领量
    ,count(if(a.pno is not null and a.claim_store_id is null, a.hno, null)) 非网点人员认领量
    ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '待认领量'
    ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-定时任务失效量'
    ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功-未失效量'
    ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '无理赔认领-定时任务失效量'
    ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '有理赔认领-理赔失效量'
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率1
    ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)) + count(if(a.head_state = '认领失败-已失效', a.hno, null)))/count(a.hno) 匹配成功率2
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 时效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2023-01-01'
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,a.submit_store_name
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领平均时长（继续派送）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领平均时长（包含因理赔失效）
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2023-01-01'
            and ph.pno is not null -- 有认领动作
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,a.submit_store_name
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领件数（继续派送）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领平均时长（继续派送）
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领件数（包含因理赔失效）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领平均时长（包含因理赔失效）
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2023-01-01'
            and ph.pno is not null -- 有认领动作
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,a.submit_store_name
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领件数（继续派送）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领平均时长（继续派送）
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领件数（包含因理赔失效）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领平均时长（包含因理赔失效）
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.pno is null then '未认领-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2023-01-01'
            and ph.pno is not null -- 有认领动作
            and ph.claim_staff_id is not null
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from dwm.dwd_th_sls_pro_flash_point
limit 100;
;-- -. . -..- - / . -. - .-. -.--
select
    min(p_date)
from dwm.dwd_th_sls_pro_flash_point;
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(json_extract(ext_info,'$.matchResult') = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2022-01-01'
            and fp.page_id ='/package/packageMatch'
            and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(json_extract(ext_info,'$.matchResult') = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2022-01-01'
            and fp.page_id ='/package/packageMatch'
            and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select json_extract(fp.ext_info,'$.matchResult') from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$.matchResult')
    ,JSON_UNQUOTE(fp.ext_info,'$.matchResult')
from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[1]')

from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[2]')

from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[0]')

from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[0]')
    ,fp.ext_info
from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-02-09 18:13:38';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[0]')
    ,fp.ext_info
from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-03-25 09:50:50';
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[1]')
    ,fp.ext_info
from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-03-25 09:50:50';
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(json_extract(ext_info,'$.matchResult') = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2023-01-01'
            and fp.page_id ='/package/packageMatch'
            and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(cast(json_extract(ext_info,'$.matchResult') as string) = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2023-01-01'
            and fp.page_id ='/package/packageMatch'
            and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(cast(json_extract(ext_info,'$.matchResult') as string) = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2023-01-01'
#             and fp.page_id ='/package/packageMatch'
#             and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(cast(json_extract(ext_info,'$.matchResult') as string) = "true", fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2023-01-01'
#             and fp.page_id ='/package/packageMatch'
#             and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    fp.p_month 日期
    ,ss.name 网点
    ,ss.id 网点ID
    ,fp.view_num 访问人次
#     ,fp.view_staff_num uv
    ,fp.match_num 点击匹配量
    ,fp.search_num 点击搜索量
    ,fp.sucess_num 成功匹配量
from
    (
        select
            json_extract(ext_info,'$.organization_id') store_id
            ,substr(fp.p_date, 1, 4) p_month
            ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
            ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
            ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
            ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
        from dwm.dwd_th_sls_pro_flash_point fp
        where
            fp.p_date >= '2023-01-01'
#             and fp.page_id ='/package/packageMatch'
#             and fp.p_app = 'FLE-MS-UI'
        group by 1,2
    ) fp
left join fle_staging.sys_store ss on ss.id = fp.store_id
where
    ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    json_extract(fp.ext_info,'$[1]')
    ,fp.ext_info
    ,json_extract(ext_info,'$.matchResult')
from dwm.dwd_th_sls_pro_flash_point fp where fp.event_time = '2023-03-25 09:50:50';
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`无理赔认领-定时任务失效量` + a.`认领成功-未失效量` - b.成功匹配量 网点认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报网点
            ,count(a.hno) 上报丢失量
            ,count(a.pno) 网点认领量
            ,count(if(a.pno is not null and a.claim_store_id is not null, a.hno, null)) 网点认领量
            ,count(if(a.pno is not null and a.claim_store_id is null, a.hno, null)) 非网点人员认领量（总部）
            ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '待认领量'
            ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-定时任务失效量'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功-未失效量'
            ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '无理赔认领-定时任务失效量'
            ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '有理赔认领-理赔失效量'
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率1
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)) + count(if(a.head_state = '认领失败-已失效', a.hno, null)))/count(a.hno) 匹配成功率2
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 4) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领-待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.pno is null then '未认领-已失效'
                        when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                        when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 4) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
        #             and fp.page_id ='/package/packageMatch'
        #             and fp.p_app = 'FLE-MS-UI'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报网点 = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`无理赔认领-定时任务失效量` + a.`认领成功-未失效量` - b.成功匹配量 网点认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报网点
            ,count(a.hno) 上报丢失量
            ,count(a.pno) 网点认领量
            ,count(if(a.pno is not null and a.claim_store_id is not null, a.hno, null)) 网点认领量
            ,count(if(a.pno is not null and a.claim_store_id is null, a.hno, null)) 非网点人员认领量（总部）
            ,count(if(a.head_state = '未认领-待认领', a.hno, null)) '待认领量'
            ,count(if(a.head_state = '未认领-已失效', a.hno, null)) '未认领-定时任务失效量'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '认领成功-未失效量'
            ,count(if(a.head_state = '认领成功-已失效', a.hno, null)) '无理赔认领-定时任务失效量'
            ,count(if(a.head_state = '认领失败-已失效', a.hno, null)) '有理赔认领-理赔失效量'
            ,(count(if(a.head_state = '认领成功' and a.claim_store_id is not null , a.hno, null)) + count(if(a.head_state = '认领成功-已失效' and a.claim_store_id is not null , a.hno, null)))/count(a.hno) HUB匹配成功率1
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)))/count(a.hno) 匹配成功率1
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功-已失效', a.hno, null)) + count(if(a.head_state = '认领失败-已失效', a.hno, null)))/count(a.hno) 匹配成功率2
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 4) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领-待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.pno is null then '未认领-已失效'
                        when ph.state = 3 and ph.pno is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                        when ph.state = 3 and ph.pno is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 4) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报网点 = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    ph.submit_store_name
    ,ph.pno
    ,ph.hno
from fle_staging.parcel_headless ph
where
    ph.created_at > '2023-02-28 16:00:00'
    and ph.created_at < '2023-03-31 16:00:00'
    and ph.pno is not null
    and ph.claim_store_id is null;
;-- -. . -..- - / . -. - .-. -.--
select
    ph.submit_store_name
    ,ph.pno
    ,ph.hno
from fle_staging.parcel_headless ph
where
    ph.created_at > '2023-03-06 16:00:00'
    and ph.created_at < '2023-03-31 16:00:00'
    and ph.pno is not null
    and ph.claim_store_id is null;
;-- -. . -..- - / . -. - .-. -.--
select
    ph.submit_store_name
    ,ph.pno
    ,ph.hno
from fle_staging.parcel_headless ph
where
    ph.created_at > '2023-03-06 16:00:00'
    and ph.created_at < '2023-04-07 16:00:00'
    and ph.pno is not null
    and ph.claim_store_id is null;
;-- -. . -..- - / . -. - .-. -.--
select
    ph.submit_store_name
    ,ph.pno
    ,ph.hno
    ,ss.name
from fle_staging.parcel_headless ph
left join fle_staging.parcel_info pi on pi.pno = ph.pno
left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
where
    ph.created_at > '2023-03-06 16:00:00'
    and ph.created_at < '2023-04-07 16:00:00'
    and ph.pno is not null
    and ph.claim_store_id is null;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`认领_认领无理赔-定时任务失效` + a.`认领_认领无理赔_未失效` - b.成功匹配量 网点认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报HUB
            ,count(a.hno) 上报丢失量
            ,count(if(a.claim_store_id is not null , a.hno, null)) HUB认领量
            ,count(if(a.head_state = '未认领_待认领', a.hno, null)) 'HUB待认领量'
            ,count(if(a.head_state = '未认领_已失效', a.hno, null)) 'HUB未认领_定时任务失效'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '认领_认领无理赔_未失效'
            ,count(if(a.head_state = '认领成功_已失效', a.hno, null)) '认领_认领无理赔-定时任务失效'
            ,count(if(a.head_state = '认领失败_已失效', a.hno, null)) '认领_认领有理赔_理赔失效'
            ,(count(if(a.head_state = '认领成功' and a.claim_store_id is not null , a.hno, null)) + count(if(a.head_state = '认领成功_已失效' and a.claim_store_id is not null , a.hno, null)))/count(a.hno) HUB匹配成功率1
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)))/count(a.hno) 匹配成功率1
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)))/count(a.hno) 匹配成功率2
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 4) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领_待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at < coalesce(sx.claim_time,curdate()) then '认领成功_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at >= coalesce(sx.claim_time,curdate()) then '认领失败_已失效' -- 理赔失效
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 4) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报HUB = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`已认领_认领无理赔-定时任务失效` + a.`已认领_认领无理赔_未失效` - b.成功匹配量 包裹认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报HUB
            ,count(a.hno) 上报丢失量
            ,count(if(a.claim_store_id is not null , a.hno, null)) HUB认领量
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) 认领成功量（继续派送）
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)))/count(a.hno) 匹配成功率1（继续派送）
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)) '认领成功量（继续派送+理赔失效）'
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)))/count(a.hno) '匹配成功率2(继续派送+理赔失效)'
            ,count(if(a.head_state = '未认领_待认领', a.hno, null)) 'HUB待认领量'
            ,count(if(a.head_state = '未认领_已失效', a.hno, null)) 'HUB未认领_定时任务失效'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '已认领_认领无理赔_未失效'
            ,count(if(a.head_state = '认领成功_已失效', a.hno, null)) '已认领_认领无理赔-定时任务失效'
            ,count(if(a.head_state = '认领失败_已失效', a.hno, null)) '已认领_认领有理赔_理赔失效'
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 4) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领_待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at < coalesce(sx.claim_time,curdate()) then '认领成功_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at >= coalesce(sx.claim_time,curdate()) then '认领失败_已失效' -- 理赔失效
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 4) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报HUB = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.访问人次
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`已认领_认领无理赔-定时任务失效` + a.`已认领_认领无理赔_未失效` - b.成功匹配量 包裹认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报HUB
            ,count(a.hno) 上报丢失量
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) 认领成功量（继续派送）
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)))/count(a.hno) 匹配成功率1（继续派送）
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)) '认领成功量（继续派送+理赔失效）'
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)))/count(a.hno) '匹配成功率2(继续派送+理赔失效)'
            ,count(if(a.head_state = '未认领_待认领', a.hno, null)) 'HUB待认领量'
            ,count(if(a.head_state = '未认领_已失效', a.hno, null)) 'HUB未认领_定时任务失效'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '已认领_认领无理赔_未失效'
            ,count(if(a.head_state = '认领成功_已失效', a.hno, null)) '已认领_认领无理赔-定时任务失效'
            ,count(if(a.head_state = '认领失败_已失效', a.hno, null)) '已认领_认领有理赔_理赔失效'
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 4) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领_待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at < coalesce(sx.claim_time,curdate()) then '认领成功_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at >= coalesce(sx.claim_time,curdate()) then '认领失败_已失效' -- 理赔失效
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 4) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报HUB = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.访问人次
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`已认领_认领无理赔_定时任务失效` + a.`已认领_认领无理赔_未失效` - b.成功匹配量 包裹认领处认领数
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报HUB
            ,count(a.hno) 上报丢失量
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) 认领成功量（继续派送）
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)))/count(a.hno) 匹配成功率1（继续派送）
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)) '认领成功量（继续派送+理赔失效）'
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)))/count(a.hno) '匹配成功率2(继续派送+理赔失效)'
            ,count(if(a.head_state = '未认领_待认领', a.hno, null)) 'HUB待认领量'
            ,count(if(a.head_state = '未认领_已失效', a.hno, null)) 'HUB未认领_定时任务失效'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '已认领_认领无理赔_未失效'
            ,count(if(a.head_state = '认领成功_已失效', a.hno, null)) '已认领_认领无理赔_定时任务失效'
            ,count(if(a.head_state = '认领失败_已失效', a.hno, null)) '已认领_认领有理赔_理赔失效'
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 7) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领_待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at < coalesce(sx.claim_time,curdate()) then '认领成功_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at >= coalesce(sx.claim_time,curdate()) then '认领失败_已失效' -- 理赔失效
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 7) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报HUB = b.网点;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month
    ,a.submit_store_name
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领件数（继续派送）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领平均时长（继续派送）
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领件数（包含因理赔失效）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领平均时长（包含因理赔失效）
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 4) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2022-12-31 17:00:00'
            and ph.pno is not null -- 有认领动作
            and ph.claim_staff_id is not null
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_month 日期
    ,a.submit_store_name 上报HUB
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领件数（继续派送）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效'), a.pno, null)) 认领平均时长（继续派送）
    ,count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领件数（包含因理赔失效）
    ,sum(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600,null))/count(if(a.head_state in ('认领成功', '认领成功-已失效','认领失败-已失效'), a.pno, null)) 认领平均时长（包含因理赔失效）
from
    (
        select
            ph.hno
            ,substr(ph.created_at, 1, 7) creat_month
            ,ph.submit_store_name
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
            ph.state < 4
            and ph.created_at >= '2022-12-31 17:00:00'
            and ph.pno is not null -- 有认领动作
            and ph.claim_staff_id is not null
    ) a
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from fle_staging.ka_profile kp
where
    kp.authentication_phone = '022880035';
;-- -. . -..- - / . -. - .-. -.--
select
    *
from fle_staging.ka_profile kp
where
    kp.id = 'CAM2214';
;-- -. . -..- - / . -. - .-. -.--
select
        fp.p_date 日期
        ,ss.name 网点
        ,ss.id 网点ID
        ,fp.view_num 访问人次
    #     ,fp.view_staff_num uv
        ,fp.match_num 点击匹配量
        ,fp.search_num 点击搜索量
        ,fp.sucess_num 成功匹配量
    from
        (
            select
                json_extract(ext_info,'$.organization_id') store_id
                ,fp.p_date
                ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
            from dwm.dwd_th_sls_pro_flash_point fp
            where
                fp.p_date >= '2023-03-01'
            group by 1,2
        ) fp
    left join fle_staging.sys_store ss on ss.id = fp.store_id
    where
        ss.category in (8,12);
;-- -. . -..- - / . -. - .-. -.--
select
    b.creat_month
    ,b.submit_store_name
    ,case
        when b.use_time < 24 then '1天内'
        when b.use_time >= 24 and b.use_time < 48 then '1-2天'
        when b.use_time >= 48 and b.use_time < 72 then '2-3天'
        when b.use_time >= 72 and b.use_time < 168 then '3-7天'
        when b.use_time >= 168 then '超一周'
    end 认领用时
    ,count(b.pno) 包裹件数
from
    (
        select
            a.creat_month
            ,a.submit_store_name
            ,a.pno
            ,timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600 use_time
            ,a.created_at
            ,a.claim_at
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 7) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领-待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
                    end head_state
                    ,ph.state
                    ,ph.created_at
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                    ,ph.updated_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 失效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2022-12-31 17:00:00'
                    and ph.claim_store_id is not null -- 有认领动作
                    and ph.claim_staff_id is not null
            ) a
        where
            a.head_state in ('认领成功', '认领成功-已失效')
    ) b
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    b.creat_month
    ,b.submit_store_name
    ,count(if(b.use_time < 24, b.pno, null)) 认领包裹数_1天内
    ,count(if(b.use_time >= 24 and b.use_time < 48, b.pno, null)) 认领包裹数_1_2天
    ,count(if(b.use_time >= 48 and b.use_time < 72, b.pno, null)) 认领包裹数_2_3天
    ,count(if(b.use_time >= 72 and b.use_time < 168, b.pno, null)) 认领包裹数_3_7天
    ,count(if(b.use_time >= 168, b.pno, null)) 认领包裹数_超一周
    ,count(b.pno) 总认领包裹数
from
    (
        select
            a.creat_month
            ,a.submit_store_name
            ,a.pno
            ,timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600 use_time
            ,a.created_at
            ,a.claim_at
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 7) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领-待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
                    end head_state
                    ,ph.state
                    ,ph.created_at
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                    ,ph.updated_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 失效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2022-12-31 17:00:00'
                    and ph.claim_store_id is not null -- 有认领动作
                    and ph.claim_staff_id is not null
            ) a
        where
            a.head_state in ('认领成功', '认领成功-已失效')
    ) b
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    plr.store_id
    ,substr(plt.created_at, 1, 4) creat_month
    ,count(distinct plt.pno) num
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
where
    plt.state = 6
    and plt.duty_result = 1
    and plt.created_at >= '2023-01-01'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
    ,b.访问人次
    ,b.点击搜索量
    ,b.点击匹配量
    ,b.成功匹配量 HUB无头件匹配成功量
    ,a.`已认领_认领无理赔_定时任务失效` + a.`已认领_认领无理赔_未失效` - b.成功匹配量 包裹认领处认领数
    ,c.num 丢失包裹量
from
    (
        select
            a.creat_month 日期
            ,a.submit_store_name 上报HUB
            ,a.submit_store_id
            ,count(a.hno) 上报丢失量
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) 认领成功量（继续派送）
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)))/count(a.hno) 匹配成功率1（继续派送）
            ,count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)) '认领成功量（继续派送+理赔失效）'
            ,(count(if(a.head_state = '认领成功', a.hno, null)) + count(if(a.head_state = '认领成功_已失效', a.hno, null)) + count(if(a.head_state = '认领失败_已失效', a.hno, null)))/count(a.hno) '匹配成功率2(继续派送+理赔失效)'
            ,count(if(a.head_state = '未认领_待认领', a.hno, null)) 'HUB待认领量'
            ,count(if(a.head_state = '未认领_已失效', a.hno, null)) 'HUB未认领_定时任务失效'
            ,count(if(a.head_state = '认领成功', a.hno, null)) '已认领_认领无理赔_未失效'
            ,count(if(a.head_state = '认领成功_已失效', a.hno, null)) '已认领_认领无理赔_定时任务失效'
            ,count(if(a.head_state = '认领失败_已失效', a.hno, null)) '已认领_认领有理赔_理赔失效'
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 7) creat_month
                    ,ph.submit_store_name
                    ,ph.submit_store_id
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领_待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at < coalesce(sx.claim_time,curdate()) then '认领成功_已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.claim_at >= coalesce(sx.claim_time,curdate()) then '认领失败_已失效' -- 理赔失效
                    end head_state
                    ,ph.state
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 时效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2023-01-01'
            ) a
        group by 1,2,3
    ) a
left join
    (
        select
            fp.p_month 日期
            ,ss.name 网点
            ,ss.id 网点ID
            ,fp.view_num 访问人次
        #     ,fp.view_staff_num uv
            ,fp.match_num 点击匹配量
            ,fp.search_num 点击搜索量
            ,fp.sucess_num 成功匹配量
        from
            (
                select
                    json_extract(ext_info,'$.organization_id') store_id
                    ,substr(fp.p_date, 1, 7) p_month
                    ,count(if(fp.event_type = 'screenView', fp.user_id, null)) view_num
                    ,count(distinct if(fp.event_type = 'screenView', fp.user_id, null)) view_staff_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'search', fp.user_id, null)) search_num
                    ,count(if(fp.event_type = 'click' and fp.button_id = 'match', fp.user_id, null)) match_num
                    ,count(if(json_unquote(json_extract(ext_info,'$.matchResult')) = 'true', fp.user_id, null)) sucess_num
                from dwm.dwd_th_sls_pro_flash_point fp
                where
                    fp.p_date >= '2023-01-01'
                group by 1,2
            ) fp
        left join fle_staging.sys_store ss on ss.id = fp.store_id
        where
            ss.category in (8,12)
    ) b on a.日期 = b.日期 and a.上报HUB = b.网点
left join
    (
        select
            plr.store_id
            ,substr(plt.created_at, 1, 7) creat_month
            ,count(distinct plt.pno) num
        from bi_pro.parcel_lose_task plt
        left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
        where
            plt.state = 6
            and plt.duty_result = 1
            and plt.created_at >= '2023-01-01'
        group by 1,2
    ) c on c.store_id = a.submit_store_id and a.日期 = c.creat_month;
;-- -. . -..- - / . -. - .-. -.--
select * from rev_pro.suspected_headless_parcel_detail_v1 limit100;
;-- -. . -..- - / . -. - .-. -.--
select
    b.creat_month 日期
    ,b.submit_store_name 上报HUB
    ,count(if(b.use_time < 24, b.pno, null)) 认领包裹数_1天内
    ,count(if(b.use_time >= 24 and b.use_time < 48, b.pno, null)) 认领包裹数_1_2天
    ,count(if(b.use_time >= 48 and b.use_time < 72, b.pno, null)) 认领包裹数_2_3天
    ,count(if(b.use_time >= 72 and b.use_time < 168, b.pno, null)) 认领包裹数_3_7天
    ,count(if(b.use_time >= 168, b.pno, null)) 认领包裹数_超一周
    ,count(b.pno) 总认领包裹数
from
    (
        select
            a.creat_month
            ,a.submit_store_name
            ,a.pno
            ,timestampdiff(second , a.created_at, coalesce(a.claim_at, a.updated_at))/3600 use_time
            ,a.created_at
            ,a.claim_at
        from
            (
                select
                    ph.hno
                    ,substr(ph.created_at, 1, 7) creat_month
                    ,ph.submit_store_name
                    ,ph.pno
                    ,case
                        when ph.state = 0 then '未认领-待认领'
                        when ph.state = 2 then '认领成功'
                        when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                        when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
                    end head_state
                    ,ph.state
                    ,ph.created_at
                    ,ph.claim_store_id
                    ,ph.claim_store_name
                    ,ph.claim_at
                    ,ph.updated_at
                from  fle_staging.parcel_headless ph
                left join
                    (
                        select
                            ph.pno
                            ,min(pct.created_at) claim_time
                        from fle_staging.parcel_headless ph
                        join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                        where
                            ph.state = 3 -- 失效
                        group by 1
                    ) sx on sx.pno = ph.pno
                where
                    ph.state < 4
                    and ph.created_at >= '2022-12-31 17:00:00'
                    and ph.claim_store_id is not null -- 有认领动作
                    and ph.claim_staff_id is not null
            ) a
        where
            a.head_state in ('认领成功', '认领成功-已失效')
    ) b
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
    t.id
    ,t.order_no
    ,t.created_at
    ,t.staff_info_id
    ,row_number()over (partition by t.id order by t.created_at) rn
    from
        (
            select
            wo.id
            ,wo.order_no
            ,wor.created_at
            ,wor.staff_info_id
            ,lead(wor.staff_info_id,1)over(partition by wo.id order by wor.created_at desc) lead1
        ,hsi.state
        from bi_pro.work_order wo
        left join bi_pro.work_order_reply wor on wor.order_id = wo.id
        left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
        where
            wo.created_at >= date_sub(curdate(),interval 30 day)

            and (hsi.node_department_id = 86 or wor.staff_info_id=wo.created_staff_info_id)

        )t
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = t.staff_info_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id =t.lead1
    where (t.staff_info_id<>t.lead1 or t.lead1 is null)
    and (hsi.node_department_id<>hsi2.node_department_id or t.lead1 is null)

    and hsi.node_department_id = 86

)
select
  tt.*
  ,if(tt.'是否为工作时间创建/回复工单' ='是' or (tt.'是否为工作时间创建/回复工单' ='否' and TIMESTAMPDIFF(second, tt.'发起人创建/回复工单时间เวลาผู้สร้างสำผัส',tt.回复人回复时间เวลาผู้ตอบงสำผัส)>64800),'否','是') 非工作时间是否在18小时内回复
from
(
    SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,t1.rn 是第几次回复เป็นการตอบกลับครั้งที่เท่าไหร่
    ,w.created_at '发起人创建/回复工单时间เวลาผู้สร้างสำผัส'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,t1.created_at 回复人回复时间เวลาผู้ตอบงสำผัส
    ,t1.`staff_info_id`  回复人ID
    ,hi1.`name`  回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,if(t1.created_at is not null and wo.`original_acceptance_info` is not null,'是','否') 是否为FH48小时超时工单
	,if(
           (( date_format(w.`created_at`,'%w')  between 1 and 5  and th.day is null and date_format(w.`created_at`,'1%H%i')>=11000 and date_format(w.`created_at`,'1%H%i') <=11900)
        or ((date_format(w.`created_at`,'%w') in (0,6) or th.day is not null) and date_format(w.`created_at`,'1%H%i')>=11000 and date_format(w.`created_at`,'1%H%i') <=11700))
    ,'是','否') '是否为工作时间创建/回复工单'
    ,TIMESTAMPDIFF(second,w.created_at,t1.created_at) '回复时长(秒)'
    ,round(TIMESTAMPDIFF(second,w.created_at,t1.created_at)/60,1) '回复时长(分钟)'
    ,if((TIMESTAMPDIFF(second,w.created_at,t1.created_at)/60)<30,'是','否') 是否在30分钟内回复
from `bi_pro`.work_order wo
left join t t1 on t1.id = wo.id
left join
(
     select
        w.id
        ,w.created_at
        ,substring(w.created_at,1,10) dt
        ,wo.created_staff_info_id staff_info_id
        ,row_number()over(partition by w.id order by w.created_at)  rn
    from
        (
        select
            wo.id
            ,wo.created_at
        from `bi_pro`.work_order wo
        where wo.created_at >= date_sub(curdate(),interval 30 day)
        union  all
        select
            wor.order_id
            ,wor.created_at
        from
            (
                select
                wor.*
                from
                (
                    select
                    wor.order_id
                    ,wor.created_at
                    ,wor.staff_info_id
                    ,lead(wor.staff_info_id,1)over(partition by wor.order_id order by wor.created_at desc) lead1
                from `bi_pro`.work_order_reply wor
                left join `bi_pro`.work_order wo
                on wor.order_id=wo.id
                where wor.created_at >= date_sub(curdate(),interval 30 day)
                and wo.created_staff_info_id is not null

                group by 1,2,3
                )wor
                left join `bi_pro`.work_order wo on wor.order_id=wo.id
                left join  bi_pro.hr_staff_info hsi on wor.staff_info_id=hsi.staff_info_id
                left join  bi_pro.hr_staff_info hsi2 on wor.lead1=hsi2.staff_info_id
                where wor.staff_info_id=wo.created_staff_info_id
                and wor.lead1<>wor.staff_info_id and wor.lead1 is not null

            )wor
        )w
        left join `bi_pro`.work_order wo on w.id=wo.id
       -- where wo.order_no='17167946103110547'
        order by 2
)w on w.id=wo.id and w.rn=t1.rn
left join
(--法定假日
    select
        th.day
    from backyard_pro.thailand_holiday th
)th on th.day=w.dt
/*left join
    ( #cs回复

                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
                left join `bi_pro`.`hr_staff_info` hsi on wor.staff_info_id=hsi.staff_info_id
                where 1=1
                and hsi.state = 1
                and hsi.node_department_id = 86
    )wor on wo.id = wor.`order_id` and wor.rn=t1.rn*/
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =t1.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
/*left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
           (date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id*/

/*left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <12400 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <12400 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            (date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900))
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id*/
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()

    -- and wo.`created_store_id` !=1
    and hi1.`node_department_id` =86

 -- and wo.order_no = '04167852250514875'
group by 1,3
order by 1,3
)tt;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
    t.id
    ,t.order_no
    ,t.created_at
    ,t.staff_info_id
    ,row_number()over (partition by t.id order by t.created_at) rn
    from
        (
            select
            wo.id
            ,wo.order_no
            ,wor.created_at
            ,wor.staff_info_id
            ,lead(wor.staff_info_id,1)over(partition by wo.id order by wor.created_at desc) lead1
        ,hsi.state
        from bi_pro.work_order wo
        left join bi_pro.work_order_reply wor on wor.order_id = wo.id
        left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = wor.staff_info_id
        where
            wo.created_at >= date_sub(curdate(),interval 30 day)

            and (hsi.node_department_id = 86 or wor.staff_info_id=wo.created_staff_info_id)

        )t
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = t.staff_info_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id =t.lead1
    where (t.staff_info_id<>t.lead1 or t.lead1 is null)
    and (hsi.node_department_id<>hsi2.node_department_id or t.lead1 is null)

    and hsi.node_department_id = 86

)
select
  tt.*
  ,if(tt.'是否为工作时间创建/回复工单' ='是' or (tt.'是否为工作时间创建/回复工单' ='否' and TIMESTAMPDIFF(second, tt.'发起人创建/回复工单时间เวลาผู้สร้างสำผัส',tt.回复人回复时间เวลาผู้ตอบงสำผัส)>64800),'否','是') 非工作时间是否在18小时内回复
from
(
    SELECT
    concat('`',wo.order_no)  工单编号
    ,case wo.status when 1 then '未阅读' when 2 then '已经阅读' when 3 then '已回复' when 4 then '已关闭' end 状态
    ,t1.rn 是第几次回复เป็นการตอบกลับครั้งที่เท่าไหร่
    ,w.created_at '发起人创建/回复工单时间เวลาผู้สร้างสำผัส'
    ,wo.`created_staff_info_id`  发起人ID
    ,hi.`name`  发起人姓名
    ,wo.created_store_id 发起人网点ID
    ,ss.`short_name`  发起人所属部门网点code
    ,ss.`name`  发起人所属部门名称
    ,t1.created_at 回复人回复时间เวลาผู้ตอบงสำผัส
    ,t1.`staff_info_id`  回复人ID
    ,hi1.`name`  回复人姓名
    ,case when ss1.`category` in (1,2,10,13) then 'sp'
        when ss1.`category` in (8,9,12) then 'HUB/BHUB/OS'
        when ss1.`category` IN (4,5,7) then 'SHOP/ushop'
        when ss1.`category` IN (6)  then 'FH'
        when wo.`store_id` = '22' then 'kam客服中心'
        when wo.`store_id`in (3,'customer_manger') then  '总部客服中心'
        when wo.`store_id`= '12' then 'QA&QC'
        when wo.`store_id`= '18' then 'Flash Home客服中心'
        when wo.`created_store_id` = '22' and wo.`client_id` IN ('AA0302','AA0413','AA0472','AA0545','BF9675','BF9690','CA5901' ) then 'FFM'
        else '其他网点'
    end 受理部门
    ,wo.`client_id` 客户ID
    ,wo.`pnos`  运单号
    ,case wo.order_type
        when 1 then '查找运单'
        when 2 then '加快处理'
        when 3 then '调查员工'
        when 4 then '其他'
        when 5 then '网点信息维护提醒'
        when 6 then '培训指导'
        when 7 then '异常业务询问'
        when 8 then '包裹丢失'
        when 9 then '包裹破损'
        when 10 then '货物短少'
        when 11 then '催单'
        when 12 then '有发无到'
        when 13 then '上报包裹不在集包里'
        when 16 then '漏揽收'
        when 50 then '虚假撤销'
        when 17 then '已签收未收到'
        when 18 then '客户投诉'
        when 19 then '修改包裹信息'
        when 20 then '修改 COD 金额'
        when 21 then '解锁包裹'
        when 22 then '申请索赔'
        when 23 then 'MS 问题反馈'
        when 24 then 'FBI 问题反馈'
        when 25 then 'KA System 问题反馈'
        when 26 then 'App 问题反馈'
        when 27 then 'KIT 问题反馈'
        when 28 then 'Backyard 问题反馈'
        when 29 then 'BS/FH 问题反馈'
        when 30 then '系统建议'
        when 31 then '申诉罚款'
        else wo.order_type
    end  工单类型
    ,wo.title 工单标题
    ,if(t1.created_at is not null and wo.`original_acceptance_info` is not null,'是','否') 是否为FH48小时超时工单
	,if(
           (( date_format(w.`created_at`,'%w')  between 1 and 5  and th.day is null and date_format(w.`created_at`,'1%H%i')>=11000 and date_format(w.`created_at`,'1%H%i') <=11900)
        or ((date_format(w.`created_at`,'%w') in (0,6) or th.day is not null) and date_format(w.`created_at`,'1%H%i')>=11000 and date_format(w.`created_at`,'1%H%i') <=11700))
    ,'是','否') '是否为工作时间创建/回复工单'
    ,TIMESTAMPDIFF(second,w.created_at,t1.created_at) '回复时长(秒)'
    ,round(TIMESTAMPDIFF(second,w.created_at,t1.created_at)/60,1) '回复时长(分钟)'
    ,if((TIMESTAMPDIFF(second,w.created_at,t1.created_at)/60)<30,'是','否') 是否在30分钟内回复
from `bi_pro`.work_order wo
left join t t1 on t1.id = wo.id
left join
(
     select
        w.id
        ,w.created_at
        ,substring(w.created_at,1,10) dt
        ,wo.created_staff_info_id staff_info_id
        ,row_number()over(partition by w.id order by w.created_at)  rn
    from
        (
        select
            wo.id
            ,wo.created_at
        from `bi_pro`.work_order wo
        where wo.created_at >= date_sub(curdate(),interval 30 day)
        union  all
        select
            wor.order_id
            ,wor.created_at
        from
            (
                select
                wor.*
                from
                (
                    select
                    wor.order_id
                    ,wor.created_at
                    ,wor.staff_info_id
                    ,lead(wor.staff_info_id,1)over(partition by wor.order_id order by wor.created_at desc) lead1
                from `bi_pro`.work_order_reply wor
                left join `bi_pro`.work_order wo
                on wor.order_id=wo.id
                where wor.created_at >= date_sub(curdate(),interval 30 day)
                and wo.created_staff_info_id is not null

                group by 1,2,3
                )wor
                left join `bi_pro`.work_order wo on wor.order_id=wo.id
                left join  bi_pro.hr_staff_info hsi on wor.staff_info_id=hsi.staff_info_id
                left join  bi_pro.hr_staff_info hsi2 on wor.lead1=hsi2.staff_info_id
                where wor.staff_info_id=wo.created_staff_info_id
                and wor.lead1<>wor.staff_info_id and wor.lead1 is not null

            )wor
        )w
        left join `bi_pro`.work_order wo on w.id=wo.id
       -- where wo.order_no='17167946103110547'
        order by 2
)w on w.id=wo.id and w.rn=t1.rn
left join
( -- 法定假日
    select
        th.day
    from backyard_pro.thailand_holiday th
)th on th.day=w.dt
/*left join
    ( #cs回复

                select
                    wor.`created_at`
                    ,wor.`order_id`
                    ,wor.`staff_info_id`
                    ,row_number() over(partition by wor.`order_id` order by wor.`created_at`) rn
                from `bi_pro`.work_order_reply wor
                left join `bi_pro`.`hr_staff_info` hsi on wor.staff_info_id=hsi.staff_info_id
                where 1=1
                and hsi.state = 1
                and hsi.node_department_id = 86
    )wor on wo.id = wor.`order_id` and wor.rn=t1.rn*/
left join `bi_pro`.`hr_staff_info` hi on hi.`staff_info_id` = wo.`created_staff_info_id`
left join `bi_pro`.`sys_store` ss on ss.`id` = wo.`created_store_id`
left join `bi_pro`.`hr_staff_info` hi1 on hi1.`staff_info_id` =t1.`staff_info_id`
left join `bi_pro`.`sys_store` ss1 on ss1.`id` = wo.`store_id`
/*left join
    (   #工作时间
        SELECT
            wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weekNum
        FROM `bi_pro`.work_order wo
        where
           (date_format(wo.`created_at`,'%w')  between 1 and 5
            and date_format(wo.`created_at`,'1%H%i') between 11000 and 11900)
            or (date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%H%i') between 11000 and 11700)
    ) wt on wt.id = wo.id*/

/*left join
    ( #非工作时间
        select  wo.`id`
            ,wo.`created_at`
            ,date_format(wo.`created_at`,'%w') as weeknum
            ,case
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>11900 and date_format(wo.`created_at`,'1%h%i') <12400 then '1'
                when  date_format(wo.`created_at`,'%w')  between 1 and 5 and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '2'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>11700 and date_format(wo.`created_at`,'1%h%i') <12400 then '3'
                when  date_format(wo.`created_at`,'%w') in (0,6) and date_format(wo.`created_at`,'1%h%i')>=10000 and date_format(wo.`created_at`,'1%h%i') <11000 then '4'
            end as 'tg'
        from `bi_pro`.work_order wo
        where
            (date_format(wo.`created_at`,'%w')  between 1 and 5
            and (date_format(wo.`created_at`,'1%H%i') <11000
            or date_format(wo.`created_at`,'1%H%i')>11900))
            or (date_format(wo.`created_at`,'%w') in (0,6) and (date_format(wo.`created_at`,'1%H%i') <11000 or date_format(wo.`created_at`,'1%H%i')>11700))
    ) nwt on nwt.id = wo.id*/
where
    wo.created_at >= date_sub(curdate(),interval 30 day)
    and wo.created_at < curdate()

    -- and wo.`created_store_id` !=1
    and hi1.`node_department_id` =86

 -- and wo.order_no = '04167852250514875'
group by 1,3
order by 1,3
)tt;
;-- -. . -..- - / . -. - .-. -.--
select
    ftr.force_take_photos_type
from fle_staging.force_take_photo_record ftr
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-02-01'
        and pl.created_at<'2023-03-01'
        and pl.source=12
    )pl where pl.rn=1
)

select
pl.pno
,pl.created_at
,pr.min_at
,pr.max_at
,forceTakePhotoCategory
from pl
join fle_staging.parcel_info pi
on pl.pno=pi.pno and pi.cod_enabled=1
left join
(
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO'
   -- and pr.pno='TH01033UK8PZ1C'
)pr on pl.pno=pr.pno;
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-02-01'
        and pl.created_at<'2023-03-01'
        and pl.source=12
        and pl.pno = 'TH20013U4VGY5M'
    )pl where pl.rn=1
)

select
pl.pno
,pl.created_at
,pr.min_at
,pr.max_at
,pr.forceTakePhotoCategory
from pl
join fle_staging.parcel_info pi
on pl.pno=pi.pno and pi.cod_enabled=1
left join
(
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO'
    and pr.pno='TH20013U4VGY5M'
)pr on pl.pno=pr.pno;
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-02-01'
        and pl.created_at<'2023-03-01'
        and pl.source=12
        and pl.pno = 'TH20013U4VGY5M'
    )pl where pl.rn=1
)

select
pl.pno
,pl.created_at
,pr.min_at
,pr.max_at
,pr.forceTakePhotoCategory
from pl
join fle_staging.parcel_info pi
on pl.pno=pi.pno and pi.cod_enabled=1
left join
(
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO'
#     and pr.pno='TH20013U4VGY5M'
)pr on pl.pno=pr.pno;
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-02-01'
        and pl.created_at<'2023-03-01'
        and pl.source=12
#         and pl.pno = 'TH20013U4VGY5M'
    )pl where pl.rn=1
)

select
pl.pno
,pl.created_at
,pr.min_at
,pr.max_at
,pr.forceTakePhotoCategory
from pl
join fle_staging.parcel_info pi
on pl.pno=pi.pno and pi.cod_enabled=1
left join
(
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO'
#     and pr.pno='TH20013U4VGY5M'
)pr on pl.pno=pr.pno;
;-- -. . -..- - / . -. - .-. -.--
select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO';
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-02-01'
        and pl.created_at<'2023-03-01'
        and pl.source=12
#         and pl.pno = 'TH20013U4VGY5M'
    )pl where pl.rn=1
)

# select
#     pl.pno
#     ,pl.created_at
#     ,pr.min_at
#     ,pr.max_at
#     ,pr.forceTakePhotoCategory
# from pl
# join fle_staging.parcel_info pi on pl.pno=pi.pno and pi.cod_enabled=1
# left join
# (
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
    and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO';
;-- -. . -..- - / . -. - .-. -.--
with pl AS
(
    select
        pl.*
    from
    (
        select
            pl.pno
            ,pl.state
            ,pl.duty_result
            ,pl.operator_id
            ,pl.created_at
            ,pl.updated_at
            ,pl.source
            ,row_number()over(partition by pl.pno order by pl.created_at) rn
        from bi_pro.parcel_lose_task pl
        where pl.created_at>='2023-04-01'
#         and pl.created_at<'2023-03-01'
        and pl.source=12
#         and pl.pno = 'TH20013U4VGY5M'
    )pl where pl.rn=1
)

# select
#     pl.pno
#     ,pl.created_at
#     ,pr.min_at
#     ,pr.max_at
#     ,pr.forceTakePhotoCategory
# from pl
# join fle_staging.parcel_info pi on pl.pno=pi.pno and pi.cod_enabled=1
# left join
# (
    select
        pr.pno
        ,convert_tz(min(pr.routed_at),'+00:00','+07:00') min_at
        ,convert_tz(max(pr.routed_at),'+00:00','+07:00') max_at
        ,json_extract(pr.extra_value,'$.forceTakePhotoCategory') forceTakePhotoCategory
    from rot_pro.parcel_route pr
    join pl on pr.pno=pl.pno
    where pr.routed_at>='2023-01-25'
#     and pr.routed_at<'2023-03-05'
    and pr.route_action='TAKE_PHOTO';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(
    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.created_at 任务生成时间
    ,concat('SSRD', plt.id) 任务ID
    ,case plt.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,plt.client_id 客户ID
    ,pi.cod_amount/100 COD金额
    ,oi.cogs_amount COGS
    ,ss.short_name 始发地
    ,ss2.name  目的地
    ,convert(pi.created_at , '+00:00', '+07:00') 揽件时间
    ,cast(pi.exhibition_weight as double)/1000 '重量'
    ,concat(pi.exhibition_length,'*',pi.exhibition_width,'*',pi.exhibition_height) '尺寸'
    ,case pi.parcel_category
        when '0' then '文件'
        when '1' then '干燥食品'
        when '10' then '家居用具'
        when '11' then '水果'
        when '2' then '日用品'
        when '3' then '数码产品'
        when '4' then '衣物'
        when '5' then '书刊'
        when '6' then '汽车配件'
        when '7' then '鞋包'
        when '8' then '体育器材'
        when '9' then '化妆品'
        when '99' then '其它'
    end  as 物品类型
    ,case  plt.last_valid_action
        when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
    end 最后有效路由
    ,plt.last_valid_routed_at 最后有效路由网点
    ,plt.last_valid_staff_info_id 最后有效路由操作人
    ,ss3.name 最后有效路由网点
    ,case plt.is_abnormal
        when 1 then '是'
        when 0 then '否'
     end 是否异常
    ,wo.order_no 工单编号
    ,'C-包裹状态未更新' 问题来源渠道
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 状态
    ,if(plt.fleet_routeids is null, '一致', '不一致') 解封车是否异常
    ,plt.fleet_stores 异常区间
    ,ft.line_name 异常车线
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.order_info oi on oi.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.dst_store_id
left join bi_pro.fleet_time ft on ft.proof_id = substring_index(plt.fleet_routeids, '/', 1)
left join fle_staging.sys_store ss3 on ss3.id = plt.last_valid_store_id
left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
where
    plt.created_at >= '2023-04-01'
    and plt.source = 3 -- C来源
    and plt.state < 5;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.created_at 任务生成时间
    ,concat('SSRD', plt.id) 任务ID
    ,case plt.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,plt.client_id 客户ID
    ,pi.cod_amount/100 COD金额
    ,oi.cogs_amount COGS
    ,ss.short_name 始发地
    ,ss2.short_name  目的地
    ,convert(pi.created_at , '+00:00', '+07:00') 揽件时间
    ,cast(pi.exhibition_weight as double)/1000 '重量'
    ,concat(pi.exhibition_length,'*',pi.exhibition_width,'*',pi.exhibition_height) '尺寸'
    ,case pi.parcel_category
        when '0' then '文件'
        when '1' then '干燥食品'
        when '10' then '家居用具'
        when '11' then '水果'
        when '2' then '日用品'
        when '3' then '数码产品'
        when '4' then '衣物'
        when '5' then '书刊'
        when '6' then '汽车配件'
        when '7' then '鞋包'
        when '8' then '体育器材'
        when '9' then '化妆品'
        when '99' then '其它'
    end  as 物品类型
    ,case  plt.last_valid_action
        when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
    end 最后有效路由
    ,plt.last_valid_routed_at 最后有效路由网点
    ,plt.last_valid_staff_info_id 最后有效路由操作人
    ,ss3.name 最后有效路由网点
    ,case plt.is_abnormal
        when 1 then '是'
        when 0 then '否'
     end 是否异常
    ,wo.order_no 工单编号
    ,'C-包裹状态未更新' 问题来源渠道
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 状态
    ,if(plt.fleet_routeids is null, '一致', '不一致') 解封车是否异常
    ,plt.fleet_stores 异常区间
    ,ft.line_name 异常车线
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.order_info oi on oi.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.dst_store_id
left join bi_pro.fleet_time ft on ft.proof_id = substring_index(plt.fleet_routeids, '/', 1)
left join fle_staging.sys_store ss3 on ss3.id = plt.last_valid_store_id
left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
where
    plt.created_at >= '2023-04-01'
    and plt.source = 3 -- C来源
    and plt.state < 5;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.created_at 任务生成时间
    ,concat('SSRD', plt.id) 任务ID
    ,case plt.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,plt.client_id 客户ID
    ,pi.cod_amount/100 COD金额
    ,oi.cogs_amount COGS
    ,ss.short_name 始发地
    ,ss2.short_name  目的地
    ,convert_tz(pi.created_at , '+00:00', '+07:00') 揽件时间
    ,cast(pi.exhibition_weight as double)/1000 '重量'
    ,concat(pi.exhibition_length,'*',pi.exhibition_width,'*',pi.exhibition_height) '尺寸'
    ,case pi.parcel_category
        when '0' then '文件'
        when '1' then '干燥食品'
        when '10' then '家居用具'
        when '11' then '水果'
        when '2' then '日用品'
        when '3' then '数码产品'
        when '4' then '衣物'
        when '5' then '书刊'
        when '6' then '汽车配件'
        when '7' then '鞋包'
        when '8' then '体育器材'
        when '9' then '化妆品'
        when '99' then '其它'
    end  as 物品类型
    ,case  plt.last_valid_action
        when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
    end 最后有效路由
    ,plt.last_valid_routed_at 最后有效路由网点
    ,plt.last_valid_staff_info_id 最后有效路由操作人
    ,ss3.name 最后有效路由网点
    ,case plt.is_abnormal
        when 1 then '是'
        when 0 then '否'
     end 是否异常
    ,wo.order_no 工单编号
    ,'C-包裹状态未更新' 问题来源渠道
    ,case plt.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 状态
    ,if(plt.fleet_routeids is null, '一致', '不一致') 解封车是否异常
    ,plt.fleet_stores 异常区间
    ,ft.line_name 异常车线
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.order_info oi on oi.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = pi.dst_store_id
left join bi_pro.fleet_time ft on ft.proof_id = substring_index(plt.fleet_routeids, '/', 1)
left join fle_staging.sys_store ss3 on ss3.id = plt.last_valid_store_id
left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
where
    plt.created_at >= '2023-04-01'
    and plt.source = 3 -- C来源
    and plt.state < 5;
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from t1
left join fle_staging.parcel_info pi on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join
    (
        select t1.pno from t1 group by 1
    )t1 on t1.pno = pi.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join t1 on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
        and plt.pno = 'TH01473ZKM3N2B'
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,row_number() over (partition by wo.id order by wor.created_at desc ) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,1st.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',1st.object_key) 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',2nd.object_key) 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',3rd.object_key) 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join t1 on pi.pno = t1.pno
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r1 = 1
            and t.r2 = 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 2
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            *
        from t
        where
            t.r2 = 1
            and t.r1 = 3
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
    wo.loseparcel_task_id
    ,count(wo.id) num
from bi_pro.work_order wo
where
    wo.loseparcel_task_id is not null
group by 1
having count(wo.id)  >1
limit 100;
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
        and plt.pno = 'TH013640M50S3A'
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,dense_rank() over (partition by wo.loseparcel_task_id order by wor.created_at) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,fo.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,1st.extra_file 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,2nd.extra_file 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,3rd.extra_file 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join t1 on pi.pno = t1.pno
left join
    (
        select
            t.loseparcel_task_id
            ,min(t.order_creat_at) order_creat_at
        from t
        group by 1
    ) fo on fo.loseparcel_task_id = t1.last_valid_store_id
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 1
        group by 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 2
        group by 1
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 2
        group by 1
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
with t1 as
(
    select
        plt.pno
        ,plt.id
        ,plt.client_id
        ,plt.created_at
        ,plt.last_valid_store_id
        ,plt.last_valid_staff_info_id
    from bi_pro.parcel_lose_task plt
    where
        plt.state < 5
        and plt.source = 2
        and plt.pno = 'TH013640M50S3A'
)
,t as
(

    select
        wo.id
        ,wo.loseparcel_task_id
        ,wo.created_at order_creat_at
        ,wor.content wor_content
        ,woi.object_key
        ,row_number() over (partition by wo.loseparcel_task_id order by wo.created_at) r1
        ,dense_rank() over (partition by wo.loseparcel_task_id order by wor.created_at) r2
    from bi_pro.work_order wo
    join t1 on t1.id = wo.loseparcel_task_id
    left join bi_pro.work_order_reply wor on wor.order_id = wo.id
    left join bi_pro.work_order_img woi on woi.origin_id = wor.id
)
,t2 as
(
    select
        wo.pnos
        ,wo.created_at
        ,row_number() over (partition by wo.pnos order by wo.created_at ) rn
    from bi_pro.work_order wo
    join t1 on t1.pno = wo.pnos
)
select
    t1.created_at 任务生成时间
    ,t1.id 任务ID
    ,t1.pno 运单号
    ,t1.client_id 客户ID
    ,las2.route_action
    ,case las2.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,las2.remark 最后一条路由备注
    ,mark.remark 最后一条包裹备注
    ,t1.last_valid_staff_info_id 最后有效路由操作人
    ,ss_valid.name 最后有效路由网点
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,dst_ss.name 目的地网点
    ,del_ss.name 妥投网点
    ,pi.ticket_delivery_staff_info_id 妥投快递员ID
    ,if(pi.state = 5 ,convert_tz(pi.finished_at, '+00:00', '+07:00'), null) 包裹妥投时间
    ,if(st_distance_sphere(point(pi.`ticket_delivery_staff_lng`, pi.`ticket_delivery_staff_lat`), point(del_ss.`lng`, del_ss.`lat`)) <= 100, '是', '否') 是否在网点妥投
    ,if(pi.state = 5 and pho.routed_at < pi.finished_at , '是', '否') 妥投前是否给客户打电话
    ,if(noduty.pno is null, '否', '是') 是否无需追责过
    ,pi.dst_phone  收件人电话
    ,num.num 创建工单次数
    ,fo.order_creat_at 第一次创建工单时间
    ,fir.created_at 第一次全组织发工单时间
    ,lst.content 最后一次全组织工单回复内容
    ,1st.wor_content 第一次回复内容
    ,1st.extra_file 第一次回复附件
    ,2nd.wor_content 第二次回复内容
    ,2nd.extra_file 第二次回复附件
    ,3rd.wor_content 第三次回复内容
    ,3rd.extra_file 第三次回复附件
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa1.object_key) 签收凭证
    ,concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',sa2.object_key) 其他凭证
from fle_staging.parcel_info pi
join t1 on pi.pno = t1.pno
left join
    (
        select
            t.loseparcel_task_id
            ,min(t.order_creat_at) order_creat_at
        from t
        group by 1
    ) fo on fo.loseparcel_task_id = t1.id
left join fle_staging.sys_store dst_ss on dst_ss.id = pi.dst_store_id
left join fle_staging.sys_store del_ss on del_ss.id = pi.ticket_delivery_store_id
left join fle_staging.sys_store ss_valid on ss_valid.id = t1.last_valid_store_id
left join
    (
        select
            *
        from
            (
                select
                    pr.route_action
                    ,pr.pno
                    ,pr.staff_info_id
                    ,pr.routed_at
                    ,pr.store_id
                    ,pr.remark
                    ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rn
                 from rot_pro.parcel_route pr
                 join
                     (
                        select t1.pno from t1 group by 1
                    )t1 on t1.pno = pr.pno
                where
                    pr.routed_at > curdate() - interval 10 day
            ) pr
        where pr.rn = 1
    ) las2 on las2.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at) rn
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'PHONE'
            and json_extract(pr.extra_value, '$.callDuration') > 7
            and pr.routed_at > curdate() - interval 10 day
    ) pho on pho.pno = t1.pno and pho.rn = 1
left join
    (
        select
            pr.pno
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc) rn
            ,pr.remark
        from rot_pro.parcel_route pr
        join
            (
                select t1.pno from t1 group by 1
            ) t on pr.pno = t.pno
        where pr.route_action = 'MANUAL_REMARK'
            and pr.routed_at > curdate() - interval 10 day
    ) mark on mark.pno = t1.pno and mark.rn = 1
left join
    (
        select
            t.loseparcel_task_id
            ,count(distinct t.id) num
        from t
        group by 1
    ) num on num.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 1
        group by 1
    ) 1st on 1st.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 2
        group by 1
    ) 2nd on 2nd.loseparcel_task_id = t1.id
left join
    (
        select
            t.loseparcel_task_id
            ,t.id
            ,t.wor_content
            ,group_concat(concat('https://fle-asset-internal.oss-ap-southeast-1.aliyuncs.com/',t.object_key)) extra_file
        from t
        where
            t.r2 = 2
        group by 1
    ) 3rd on 3rd.loseparcel_task_id = t1.id
left join t2 fir on fir.pnos = t1.pno and fir.rn = 1
left join
    (
        select
            wo2.pnos
            ,wor.content
            ,row_number() over (partition by wo2.pnos order by wor.created_at desc) rn
        from bi_pro.work_order wo2
        join t1 on t1.pno = wo2.pnos
        left join bi_pro.work_order_reply wor on wor.order_id = wo2.id
        where
            wor.staff_info_id != wo2.created_staff_info_id
    ) lst on lst.pnos = t1.pno and lst.rn = 1
left join
    (
        select
            plt2.pno
        from bi_pro.parcel_lose_task plt2
        join
            (
                select t1.pno from t1 group by 1
            )t1 on t1.pno = plt2.pno
        where
            plt2.state = 5
            and plt2.source = 2
        group by 1
    ) noduty on noduty.pno = t1.pno
left join fle_staging.sys_attachment sa1 on sa1.oss_bucket_key = t1.pno and sa1.oss_bucket_type = 'DELIVERY_CONFIRM'
left join fle_staging.sys_attachment sa2 on sa2.oss_bucket_key = t1.pno and sa2.oss_bucket_type = 'DELIVERY_CONFIRM_OTHER';
;-- -. . -..- - / . -. - .-. -.--
select
    ph.print_state
from fle_staging.parcel_headless ph
where
    ph.state != 3
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_date
    ,a.submit_store_name
    ,case ss.category
      when 1 then 'SP'
      when 2 then 'DC'
      when 4 then 'SHOP'
      when 5 then 'SHOP'
      when 6 then 'FH'
      when 7 then 'SHOP'
      when 8 then 'Hub'
      when 9 then 'Onsite'
      when 10 then 'BDC'
      when 11 then 'fulfillment'
      when 12 then 'B-HUB'
      when 13 then 'CDC'
      when 14 then 'PDC'
    end 网点类型
    ,count(distinct a.hno) 上报无头件总数
    ,count(distinct if(a.state = 5, a.hno, null)) 撤销数量
    ,count(distinct if(a.head_state in ('认领成功', '认领成功-已失效', '认领失败-已失效'), a.hno, null)) 认领成功数量
    ,count(distinct if(a.head_state in ('未认领-已失效'), a.hno, null)) 失效的数量
    ,count(distinct if(a.state = 3 and a.print_state in (1,2), a.hno, null)) 失效后已处理数量
from
    (
        select
            ph.hno
            ,date(ph.created_at) creat_date
            ,ph.submit_store_name
            ,ph.submit_store_id
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
            ,ph.print_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
#             ph.state < 4
            ph.created_at >= '2023-04-05 17:00:00'
            and ph.created_at < '2023-04-18 17:00:00'
            and ph.claim_store_id is not null -- 有认领动作
            and ph.claim_staff_id is not null
    ) a
left join fle_staging.sys_store ss on ss.id = a.submit_store_id
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_date
    ,a.submit_store_name
    ,case ss.category
      when 1 then 'SP'
      when 2 then 'DC'
      when 4 then 'SHOP'
      when 5 then 'SHOP'
      when 6 then 'FH'
      when 7 then 'SHOP'
      when 8 then 'Hub'
      when 9 then 'Onsite'
      when 10 then 'BDC'
      when 11 then 'fulfillment'
      when 12 then 'B-HUB'
      when 13 then 'CDC'
      when 14 then 'PDC'
    end 网点类型
    ,count(distinct a.hno) 上报无头件总数
    ,count(distinct if(a.state = 5, a.hno, null)) 撤销数量
    ,count(distinct if(a.head_state in ('认领成功', '认领成功-已失效', '认领失败-已失效'), a.hno, null)) 认领成功数量
    ,count(distinct if(a.head_state in ('未认领-已失效'), a.hno, null)) 失效的数量
    ,count(distinct if(a.state = 3 and a.print_state in (1,2), a.hno, null)) 失效后已处理数量
from
    (
        select
            ph.hno
            ,date(ph.created_at) creat_date
            ,ph.submit_store_name
            ,ph.submit_store_id
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
            ,ph.print_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
#             ph.state < 4
            ph.created_at >= '2023-04-05 17:00:00'
            and ph.created_at < '2023-04-18 17:00:00'
#             and ph.claim_store_id is not null -- 有认领动作
#             and ph.claim_staff_id is not null
    ) a
left join fle_staging.sys_store ss on ss.id = a.submit_store_id
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    ph.submit_store_name
from fle_staging.parcel_headless ph
where
    ph.created_at >= '2023-04-05 17:00:00'
    and ph.created_at < '2023-04-18 17:00:00'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from ph_bi.parcel_lose_task plt
where
    plt.total >= 2
    and plt.created_at >= '2023-04-01'
order by pno;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from bi_pro.parcel_lose_task plt
where
    plt.total >= 2
    and plt.created_at >= '2023-04-01'
order by pno;
;-- -. . -..- - / . -. - .-. -.--
SELECT
    t.*
FROM bi_pro.parcel_cs_operation_log t
WHERE
    t.task_id in ('20610585','20973964','21418614')
    and search_string(t.created_at);
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.operator_id
    ,a.created_at
    ,a.action
    ,max(a.point) max_point
from
    (
        select
            pcol.action
            ,plt.pno
            ,pcol.operator_id
            ,plt.created_at
            ,plt.source
        #     ,count(pcol.id)over (partition by pcol.created_at) num
            ,case
                when plt.source in (3,33,12) and pcol.action = 4 then 3
                when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                when plt.source in (4,8) and pcol.action = 3 then 3
                when plt.source in (6,7) and pcol.action = 3 then 5
            end as point
        from bi_pro.parcel_cs_operation_log pcol
        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
        where
            pcol.task_id in ('20610585','20973964','21418614')
            and pcol.action in (3,4)
            and pcol.operator_id not in (10000,10001)
    ) a
group by 1,2,3,4;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.operator_id
    ,a.created_at
    ,a.action
    ,max(a.point) max_point
from
    (
        select
            pcol.action
            ,plt.pno
            ,pcol.operator_id
            ,pcol.created_at
            ,plt.source
        #     ,count(pcol.id)over (partition by pcol.created_at) num
            ,case
                when plt.source in (3,33,12) and pcol.action = 4 then 3
                when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                when plt.source in (4,8) and pcol.action = 3 then 3
                when plt.source in (6,7) and pcol.action = 3 then 5
            end as point
        from bi_pro.parcel_cs_operation_log pcol
        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
        where
            pcol.task_id in ('20610585','20973964','21418614')
            and pcol.action in (3,4)
            and pcol.operator_id not in (10000,10001)
    ) a
group by 1,2,3,4;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
                    pcol.task_id in ('20610585','20973964','21418614')
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.source, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
                    pcol.task_id in ('20610585','20973964','21418614')
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.source, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'TH01403ZFM5S1A'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'TH01403ZFM5S1A'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'TH02053YVYQ71B'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'THT18058MH2T2Z'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    *
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'TH01283YYCN60C'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.pno
    ,a.source
    ,a.action
    ,a.operator_id
    ,a.point
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
            ,a.point
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.task_id in ('20610585','20973964','21418614')
                    plt.pno = 'TH01283YYCN60C'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.operator_id
    ,date(a.created_at) creat_date
    ,a.source
    ,a.action
    ,a.point
    ,a.id
from
    (
        select
            a.pno
            ,a.operator_id
            ,a.created_at
            ,a.action
            ,a.source
            ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
            ,a.point
            ,a.id
        from
            (
                select
                    pcol.action
                    ,plt.pno
                    ,pcol.operator_id
                    ,pcol.created_at
                    ,plt.source
                    ,pcol.id
                #     ,count(pcol.id)over (partition by pcol.created_at) num
                    ,case
                        when plt.source in (3,33,12) and pcol.action = 4 then 3
                        when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                        when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                        when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                        when plt.source in (4,8) and pcol.action = 3 then 3
                        when plt.source in (6,7) and pcol.action = 3 then 5
                    end as point
                from bi_pro.parcel_cs_operation_log pcol
                left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                where
#                     pcol.created_at >= '${date}'
#                     and pcol.created_at < date_add('${date1}', interval 1 day)
                plt.pno = 'TH01283YYCN60C'
                    and pcol.action in (3,4)
                    and pcol.operator_id not in (10000,10001)
            ) a
    ) a
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    b.operator_id
    ,hsi.name
    ,b.creat_date 日期
    ,count(b.id) 总处理合计
    ,sum(b.point) 综合人效得分
from
    (
        select
            a.pno
            ,a.operator_id
            ,date(a.created_at) creat_date
            ,a.source
            ,a.action
            ,a.point
            ,a.id
        from
            (
                select
                    a.pno
                    ,a.operator_id
                    ,a.created_at
                    ,a.action
                    ,a.source
                    ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
                    ,a.point
                    ,a.id
                from
                    (
                        select
                            pcol.action
                            ,plt.pno
                            ,pcol.operator_id
                            ,pcol.created_at
                            ,plt.source
                            ,pcol.id
                        #     ,count(pcol.id)over (partition by pcol.created_at) num
                            ,case
                                when plt.source in (3,33,12) and pcol.action = 4 then 3
                                when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                                when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                                when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                                when plt.source in (4,8) and pcol.action = 3 then 3
                                when plt.source in (6,7) and pcol.action = 3 then 5
                            end as point
                        from bi_pro.parcel_cs_operation_log pcol
                        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                        where
                            pcol.created_at >= '2023-03-31'
                            and pcol.created_at < date_add('2023-03-31', interval 1 day)
        #                 plt.pno = 'TH01283YYCN60C'
                            and pcol.action in (3,4)
                            and pcol.operator_id not in (10000,10001)
                    ) a
            ) a
        where
            a.rk = 1

        union

        select
            plt.pno
            ,pcol.operator_id
            ,date(pcol.created_at) creat_date
            ,plt.source
            ,pcol.action
            ,case
                when plt.source in (1,2,3,4,5,11,12) then 1
                when plt.source in (6,7,8) then 2
            end point
            ,pcol.id
        from bi_pro.parcel_cs_operation_log pcol
        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
        where
            pcol.created_at >= '2023-03-31'
            and pcol.created_at < date_add('2023-03-31', interval 1 day)
            and pcol.action in (1)
            and pcol.operator_id not in (10000,10001)
    ) b
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = b.operator_id
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    b.operator_id
    ,hsi.name
#     ,b.creat_date 日期
    ,count(b.id) 总处理合计
    ,sum(b.point) 综合人效得分
from
    (
        select
            a.pno
            ,a.operator_id
            ,date(a.created_at) creat_date
            ,a.source
            ,a.action
            ,a.point
            ,a.id
        from
            (
                select
                    a.pno
                    ,a.operator_id
                    ,a.created_at
                    ,a.action
                    ,a.source
                    ,row_number() over (partition by a.pno, a.action, a.created_at order by a.point desc ) rk
                    ,a.point
                    ,a.id
                from
                    (
                        select
                            pcol.action
                            ,plt.pno
                            ,pcol.operator_id
                            ,pcol.created_at
                            ,plt.source
                            ,pcol.id
                        #     ,count(pcol.id)over (partition by pcol.created_at) num
                            ,case
                                when plt.source in (3,33,12) and pcol.action = 4 then 3
                                when plt.source in (1,4,8,11) and pcol.action = 4 then 5
                                when plt.source in (2,5,6,7) and pcol.action = 4 then 7
                                when plt.source in (1,2,3,33,5,11,12) and pcol.action = 3 then 1
                                when plt.source in (4,8) and pcol.action = 3 then 3
                                when plt.source in (6,7) and pcol.action = 3 then 5
                            end as point
                        from bi_pro.parcel_cs_operation_log pcol
                        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
                        where
                            pcol.created_at >= '2023-03-31'
                            and pcol.created_at < date_add('2023-03-31', interval 1 day)
        #                 plt.pno = 'TH01283YYCN60C'
                            and pcol.action in (3,4)
                            and pcol.operator_id not in (10000,10001)
                    ) a
            ) a
        where
            a.rk = 1

        union

        select
            plt.pno
            ,pcol.operator_id
            ,date(pcol.created_at) creat_date
            ,plt.source
            ,pcol.action
            ,case
                when plt.source in (1,2,3,4,5,11,12) then 1
                when plt.source in (6,7,8) then 2
            end point
            ,pcol.id
        from bi_pro.parcel_cs_operation_log pcol
        left join bi_pro.parcel_lose_task plt on pcol.task_id = plt.id
        where
            pcol.created_at >= '2023-03-31'
            and pcol.created_at < date_add('2023-03-31', interval 1 day)
            and pcol.action in (1)
            and pcol.operator_id not in (10000,10001)
    ) b
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = b.operator_id
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.name district_name
        ,ss.city_code
        ,sc.name city_name
        ,ss.province_code
        ,sp.name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,pi.dst_province_code 目的地省code
    ,sp.name 目的地省
    ,pcd.old_value 变更前目的地省
    ,pi.dst_city_code 目的地市code
    ,sc.name 目的地市
    ,pcd2.old_value 变更前目的地市
    ,pi.dst_district_code 目的地乡code
    ,sd.name 目的地乡
    ,pcd3.old_value 变更前目的地乡
    ,pi.dst_postal_code 目的地邮编
    ,pcd4.old_value 变更前目的地邮编
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join ss ss2 on ss2.id = pi.dst_store_id
left join fle_staging.sys_province sp on sp.code = pi.dst_province_code
left join fle_staging.sys_city sc on sc.code = pi.dst_city_code
left join fle_staging.sys_district sd on sd.code = pi.dst_district_code
left join fle_staging.parcel_change_detail pcd on pcd.new_value = pi.dst_province_code and pcd.field_name = 'dst_province_code'
left join fle_staging.parcel_change_detail pcd2 on pcd2.new_value = pi.dst_city_code and pcd.field_name = 'dst_city_code'
left join fle_staging.parcel_change_detail pcd3 on pcd3.new_value = pi.dst_district_code and pcd.field_name = 'dst_district_code'
left join fle_staging.parcel_change_detail pcd4 on pcd4.new_value = pi.dst_postal_code and pcd.field_name = 'dst_postal_code';
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.name district_name
        ,ss.city_code
        ,sc.name city_name
        ,ss.province_code
        ,sp.name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,pi.dst_province_code 目的地省code
    ,sp.name 目的地省
    ,pcd.old_value 变更前目的地省
    ,pi.dst_city_code 目的地市code
    ,sc.name 目的地市
    ,pcd2.old_value 变更前目的地市
    ,pi.dst_district_code 目的地乡code
    ,sd.name 目的地乡
    ,pcd3.old_value 变更前目的地乡
    ,pi.dst_postal_code 目的地邮编
    ,pcd4.old_value 变更前目的地邮编
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join ss ss2 on ss2.id = pi.dst_store_id
left join fle_staging.sys_province sp on sp.code = pi.dst_province_code
left join fle_staging.sys_city sc on sc.code = pi.dst_city_code
left join fle_staging.sys_district sd on sd.code = pi.dst_district_code
left join fle_staging.parcel_change_detail pcd on pcd.new_value = pi.dst_province_code and pcd.field_name = 'dst_province_code' and pcd.pno = pi.pno
left join fle_staging.parcel_change_detail pcd2 on pcd2.new_value = pi.dst_city_code and pcd.field_name = 'dst_city_code' and pcd2.pno = pi.pno
left join fle_staging.parcel_change_detail pcd3 on pcd3.new_value = pi.dst_district_code and pcd.field_name = 'dst_district_code' and pcd3.pno = pi.pno
left join fle_staging.parcel_change_detail pcd4 on pcd4.new_value = pi.dst_postal_code and pcd.field_name = 'dst_postal_code' and pcd4.pno = pi.pno;
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.name district_name
        ,ss.city_code
        ,sc.name city_name
        ,ss.province_code
        ,sp.name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,case t.type
        when 'bb' then '本本'
        when 'kj' then '跨境'
    end 类型
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,pi.dst_province_code 目的地省code
    ,sp.name 目的地省
    ,pcd.old_value 变更前目的地省
    ,pi.dst_city_code 目的地市code
    ,sc.name 目的地市
    ,pcd2.old_value 变更前目的地市
    ,pi.dst_district_code 目的地乡code
    ,sd.name 目的地乡
    ,pcd3.old_value 变更前目的地乡
    ,pi.dst_postal_code 目的地邮编
    ,pcd4.old_value 变更前目的地邮编
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join ss ss2 on ss2.id = pi.dst_store_id
left join fle_staging.sys_province sp on sp.code = pi.dst_province_code
left join fle_staging.sys_city sc on sc.code = pi.dst_city_code
left join fle_staging.sys_district sd on sd.code = pi.dst_district_code
left join fle_staging.parcel_change_detail pcd on pcd.new_value = pi.dst_province_code and pcd.field_name = 'dst_province_code' and pcd.pno = pi.pno
left join fle_staging.parcel_change_detail pcd2 on pcd2.new_value = pi.dst_city_code and pcd.field_name = 'dst_city_code' and pcd2.pno = pi.pno
left join fle_staging.parcel_change_detail pcd3 on pcd3.new_value = pi.dst_district_code and pcd.field_name = 'dst_district_code' and pcd3.pno = pi.pno
left join fle_staging.parcel_change_detail pcd4 on pcd4.new_value = pi.dst_postal_code and pcd.field_name = 'dst_postal_code' and pcd4.pno = pi.pno;
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.name district_name
        ,ss.city_code
        ,sc.name city_name
        ,ss.province_code
        ,sp.name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,case t.type
        when 'bb' then '本本'
        when 'kj' then '跨境'
    end 类型
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,oi.dst_province_code 订单目的地省code
    ,sp.name 订单目的地省
    ,ss2.province_code 妥投网点所在省code
    ,ss2.province_name 妥投网点所在省
    ,if(ss2.province_code = oi.dst_province_code, '是', '否') 省份是否相同
    ,oi.dst_city_code 订单目的地市code
    ,sc.name 订单目的地市
    ,ss2.city_code 妥投网点所在市code
    ,ss2.city_name 妥投网点所在市
    ,if(ss2.city_code = oi.dst_city_code, '是', '否') 市是否相同
    ,oi.dst_district_code 订单目的地乡code
    ,sd.name 订单目的地乡
    ,ss2.district_code 妥投网点所在乡code
    ,ss2.district_name 妥投网点所在乡
    ,if(ss2.district_code = oi.dst_district_code, '是', '否') 乡是否相同
    ,oi.dst_postal_code 订单目的地邮编
    ,ss2.postal_code 妥投网点邮编
    ,if(ss2.postal_code = oi.dst_postal_code, '是', '否') 邮编是否相同
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join fle_staging.order_info oi on oi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join fle_staging.sys_province sp on sp.code = oi.dst_province_code
left join fle_staging.sys_city sc on sc.code = oi.dst_city_code
left join fle_staging.sys_district sd on sd.code = oi.dst_district_code
left join ss ss2 on ss2.id = pi.ticket_delivery_store_id;
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.en_name district_name
        ,ss.city_code
        ,sc.en_name city_name
        ,ss.province_code
        ,sp.en_name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,case t.type
        when 'bb' then '本本'
        when 'kj' then '跨境'
    end 类型
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,oi.dst_province_code 订单目的地省code
    ,sp.name 订单目的地省
    ,ss2.province_code 妥投网点所在省code
    ,ss2.province_name 妥投网点所在省
    ,if(ss2.province_code = oi.dst_province_code, '是', '否') 省份是否相同
    ,oi.dst_city_code 订单目的地市code
    ,sc.name 订单目的地市
    ,ss2.city_code 妥投网点所在市code
    ,ss2.city_name 妥投网点所在市
    ,if(ss2.city_code = oi.dst_city_code, '是', '否') 市是否相同
    ,oi.dst_district_code 订单目的地乡code
    ,sd.name 订单目的地乡
    ,ss2.district_code 妥投网点所在乡code
    ,ss2.district_name 妥投网点所在乡
    ,if(ss2.district_code = oi.dst_district_code, '是', '否') 乡是否相同
    ,oi.dst_postal_code 订单目的地邮编
    ,ss2.postal_code 妥投网点邮编
    ,if(ss2.postal_code = oi.dst_postal_code, '是', '否') 邮编是否相同
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join fle_staging.order_info oi on oi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join fle_staging.sys_province sp on sp.code = oi.dst_province_code
left join fle_staging.sys_city sc on sc.code = oi.dst_city_code
left join fle_staging.sys_district sd on sd.code = oi.dst_district_code
left join ss ss2 on ss2.id = pi.ticket_delivery_store_id;
;-- -. . -..- - / . -. - .-. -.--
with ss as
(
    select
        ss.id
        ,ss.name
        ,ss.district_code
        ,sd.en_name district_name
        ,ss.city_code
        ,sc.en_name city_name
        ,ss.province_code
        ,sp.en_name province_name
        ,ss.postal_code
    from fle_staging.sys_store ss
    left join fle_staging.sys_province sp on sp.code = ss.province_code
    left join fle_staging.sys_city sc on sc.code = ss.city_code
    left join fle_staging.sys_district sd on sd.code = ss.district_code
)
select
    pi.pno
    ,case t.type
        when 'bb' then '本本'
        when 'kj' then '跨境'
    end 类型
    ,ss1.id 网点编号
    ,ss1.name 揽收网点名称
    ,ss1.province_code 揽收网点省code
    ,ss1.province_name 揽收网点省
    ,ss1.city_code 揽收网点市code
    ,ss1.city_name 揽收网点市
    ,ss1.district_code 揽收网点乡code
    ,ss1.district_name 揽收网点乡
    ,ss1.postal_code 揽收网点邮编
    ,oi.dst_province_code 订单目的地省code
    ,sp.en_name 订单目的地省
    ,ss2.province_code 妥投网点所在省code
    ,ss2.province_name 妥投网点所在省
    ,if(ss2.province_code = oi.dst_province_code, '是', '否') 省份是否相同
    ,oi.dst_city_code 订单目的地市code
    ,sc.en_name 订单目的地市
    ,ss2.city_code 妥投网点所在市code
    ,ss2.city_name 妥投网点所在市
    ,if(ss2.city_code = oi.dst_city_code, '是', '否') 市是否相同
    ,oi.dst_district_code 订单目的地乡code
    ,sd.en_name 订单目的地乡
    ,ss2.district_code 妥投网点所在乡code
    ,ss2.district_name 妥投网点所在乡
    ,if(ss2.district_code = oi.dst_district_code, '是', '否') 乡是否相同
    ,oi.dst_postal_code 订单目的地邮编
    ,ss2.postal_code 妥投网点邮编
    ,if(ss2.postal_code = oi.dst_postal_code, '是', '否') 邮编是否相同
    ,pi.upcountry '1=偏远地区'
    ,pi.upcountry_amount '偏远地区费（分）'
    ,if(pi.dst_province_code in ('TH01','TH02','TH03','TH04'), 1, 0) 是否BKK
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0426 t on pi.pno = t.pno
left join fle_staging.order_info oi on oi.pno = t.pno
left join ss ss1 on ss1.id = pi.ticket_pickup_store_id
left join fle_staging.sys_province sp on sp.code = oi.dst_province_code
left join fle_staging.sys_city sc on sc.code = oi.dst_city_code
left join fle_staging.sys_district sd on sd.code = oi.dst_district_code
left join ss ss2 on ss2.id = pi.ticket_delivery_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    --,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pct.updated_at)/60,'M') 处理时长
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
    when 1 then '是'
    when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
    when 0 then '普通客户'
    when 1 then 'KAM客户'
    end 客户类型
   /* ,case pct.vehicle_abnormal_type

    end 车辆异常
    , 理赔对象*/
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,plt.duty_reasons
    ,t.t_key
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
   /* , 是否符合水果理赔条件
    , 不符合理赔条件原因
    ,case pct.state

    end 状态*/
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
   -- , 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,if(pcn.neg_type IN (1,3,5,6,7),json_extract(pcn.neg_result,'$.money'),null) 理赔金额
  --  , 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
  --  , 驳回次数
    ,if(pi.state=5,round(TIMESTAMPDIFF(second,pi.created_at,pi.finished_at)/86400,1),round(TIMESTAMPDIFF(second,convert_tz(pi.created_at,'+00:00','+07:00'),pct.created_at)/86400,1))运输天数
    ,case pi.freight_insure_enabled
    when 0 then '否'
    when 1 then '是'
    end 是否购买运费险
from bi_pro.parcel_claim_task pct

left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.id=pct.lose_task_id

left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh_CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-03-01'
-- and pct.created_at<'2023-04-01'
and pct.pno='TH011840B1YJ1A0'
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pct.updated_at)/60,'M') 处理时长
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
    when 1 then '是'
    when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
    when 0 then '普通客户'
    when 1 then 'KAM客户'
    end 客户类型
   /* ,case pct.vehicle_abnormal_type

    end 车辆异常
    , 理赔对象*/
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,plt.duty_reasons
    ,t.t_key
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
   /* , 是否符合水果理赔条件
    , 不符合理赔条件原因
    ,case pct.state

    end 状态*/
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
   -- , 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,if(pcn.neg_type IN (1,3,5,6,7),json_extract(pcn.neg_result,'$.money'),null) 理赔金额
  --  , 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
  --  , 驳回次数
    ,if(pi.state=5,round(TIMESTAMPDIFF(second,pi.created_at,pi.finished_at)/86400,1),round(TIMESTAMPDIFF(second,convert_tz(pi.created_at,'+00:00','+07:00'),pct.created_at)/86400,1))运输天数
    ,case pi.freight_insure_enabled
    when 0 then '否'
    when 1 then '是'
    end 是否购买运费险
from bi_pro.parcel_claim_task pct

left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.id=pct.lose_task_id

left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh_CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-03-01'
-- and pct.created_at<'2023-04-01'
and pct.pno='TH011840B1YJ1A0'
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pct.updated_at)/60,'M') 处理时长
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
    when 1 then '是'
    when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
    when 0 then '普通客户'
    when 1 then 'KAM客户'
    end 客户类型
   /* ,case pct.vehicle_abnormal_type

    end 车辆异常
    , 理赔对象*/
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,plt.duty_reasons
    ,t.t_key
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
   /* , 是否符合水果理赔条件
    , 不符合理赔条件原因
    ,case pct.state

    end 状态*/
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
   -- , 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,if(pcn.neg_type IN (1,3,5,6,7),json_extract(pcn.neg_result,'$.money'),null) 理赔金额
  --  , 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
  --  , 驳回次数
    ,if(pi.state=5,round(TIMESTAMPDIFF(second,pi.created_at,pi.finished_at)/86400,1),round(TIMESTAMPDIFF(second,convert_tz(pi.created_at,'+00:00','+07:00'),pct.created_at)/86400,1))运输天数
    ,case pi.freight_insure_enabled
    when 0 then '否'
    when 1 then '是'
    end 是否购买运费险
from bi_pro.parcel_claim_task pct

left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.id=pct.lose_task_id

left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-03-01'
-- and pct.created_at<'2023-04-01'
and pct.pno='TH011840B1YJ1A0'
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select  time_format(timediff('2023-03-01 00:00:00', '2023-03-02 02:59'), '%Hh%im');
;-- -. . -..- - / . -. - .-. -.--
select  date_format(timediff('2023-03-01 00:00:00', '2023-03-02 02:59'), '%jD%HH');
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,'2023-03-01 00:00:00', '2023-03-02 02:59'), timestampdiff(hour, '2023-03-01 00:00:00', '2023-03-02 02:59')/24;
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,'2023-03-01 00:00:00', '2023-03-02 02:59'), timestampdiff(hour, '2023-03-01 00:00:00', '2023-03-02 02:59');
;-- -. . -..- - / . -. - .-. -.--
set @d2 = '2023-03-01 00:00:00' ,@d1 = '2023-03-02 02:59';
;-- -. . -..- - / . -. - .-. -.--
set @d2 := '2023-03-01 00:00:00' ,@d1 := '2023-03-02 02:59';
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,@d2, @d1), timestampdiff(hour, @d2, @d1);
;-- -. . -..- - / . -. - .-. -.--
select  date_format(timediff('2023-03-01 00:00:00', '2023-03-02 02:59'), '%dD%HH');
;-- -. . -..- - / . -. - .-. -.--
select  date_format(timediff('2023-03-01 00:00:00', '2023-03-02 02:59:00'), '%dD%HH');
;-- -. . -..- - / . -. - .-. -.--
select  time_format(timediff('2023-03-01 00:00:00', '2023-03-02 02:59:00'), '%hh%im');
;-- -. . -..- - / . -. - .-. -.--
select  date_format('2023-03-01 00:00:00', '%H-%i-%s');
;-- -. . -..- - / . -. - .-. -.--
select  concat(timestampdiff(day, '2023-03-01 00:00:00', '2023-03-02 02:59:00'), 'D', timestampdiff(hour, date_format('2023-03-01 00:00:00', '%H:%i:%s'), date_format('2023-03-02 02:59:00', '%H:%i:%s')), 'H');
;-- -. . -..- - / . -. - .-. -.--
select  timestampdiff(day, '2023-03-01 00:00:00', '2023-03-02 02:59:00');
;-- -. . -..- - / . -. - .-. -.--
select  timestampdiff(hour, date_format('2023-03-01 00:00:00', '%H:%i:%s'), date_format('2023-03-02 02:59:00', '%H:%i:%s'));
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,'2023-03-01 00:00:00','2023-03-02 02:59:00'),timestampdiff(hour,'2023-03-01 00:00:00','2023-03-02 02:59:00')/24;
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,'2023-03-01 00:00:00','2023-03-01 02:59:00'),timestampdiff(hour,'2023-03-01 00:00:00','2023-03-01 02:59:00')/24;
;-- -. . -..- - / . -. - .-. -.--
select timestampdiff(day,'2023-03-01 00:00:00','2023-03-01 02:59:00'),timestampdiff(hour,'2023-03-01 00:00:00','2023-03-01 02:59:00')%24;
;-- -. . -..- - / . -. - .-. -.--
select concat(timestampdiff(day,'2023-03-01 00:00:00','2023-03-01 02:59:00'),'D', timestampdiff(hour,'2023-03-01 00:00:00','2023-03-01 02:59:00')%24, 'H');
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'
    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,if(pcn.neg_type IN (1,3,5,6,7),json_extract(pcn.neg_result,'$.money'),null) 理赔金额
    ,case pct.claim_where
        when 0 then '赔付至账户余额'
        when 1 then '赔付至银行账户'
    end 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null)
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=22
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,if(pcn.neg_type IN (1,3,5,6,7),json_extract(pcn.neg_result,'$.money'),null) 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null)
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-03-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,pco1.created_at 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-03-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-03-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        a.*
    from
        (
            select
                pct.id
                ,pct.pno
                ,pct.client_id
                ,pct.source
                ,pcn.neg_result
                ,pct.updated_at
                ,row_number() over (partition by pct.id order by pcn.created_at desc ) rk
            from bi_pro.parcel_claim_task pct
            left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct .id
            where
                pct.state = 6
                and pct.special_claim_category = 1 -- 水果件理赔
                and pct.updated_at >= date_sub(curdate(), interval 1 day )
                and pct.updated_at < curdate()
        ) a
    where
        a.rk = 1
)
select
    convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
    ,t.pno 运单号
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,json_extract(t.neg_result,'$.money') 理赔金额
    ,case
        when t.source in (1,2,3,5,8,33,12) then '丢失'
        when t.source in (4,6,7,9,10) then '破损'
        when t.source in (11) then '超时效'
    end 理赔类型
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,group_concat(distinct plr.store_id) 责任网点
    ,t.client_id 客户ID
    ,coalesce(kp.name, ui.name) 客户名称
    ,pi.exhibition_length 长
    ,pi.exhibition_width 宽
    ,pi.exhibition_height 高
    ,pi.store_weight/1000 计费重量
    ,pi.store_total_amount 总运费
    ,dt.store_name 揽收网点
    ,dt.area_name 揽收区域
    ,dt.province_name 揽收省
    ,dt2.store_name 目的地网点
    ,dt2.area_name 目的地区域
    ,dt2.province_name 目的地省
    ,case bc.client_name
        when 'lazada' then dl.sla
        when 'shopee' then ds.sla_day
    else null
    end 理论运输时效
    ,datediff(t.updated_at, convert_tz(pi.created_at, '+00:00', '+07:00')) '实际运输时效（理赔完成时间-揽收）'
from t
left join fle_staging.parcel_info pi on pi.pno = t.pno
left join fle_staging.ka_profile kp on kp.id = t.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join bi_pro.parcel_lose_task plt on plt.pno = t.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.user_info ui on ui.id = t.client_id
left join dwm.dim_th_sys_store_rd dt  on dt.store_id = pi.ticket_pickup_store_id
left join dwm.dim_th_sys_store_rd dt2 on dt2.store_id = pi.dst_store_id
left join dwm.dwd_ex_th_lazada_sla_detail dl on dl.pno = t.pno
left join dwm.dwd_ex_th_shopee_sla_detail ds on ds.pno = t.pno
left join dwm.dwd_ex_th_tiktok_sla_detail dtt on dtt.pno = t.pno
left join dwm.dwd_ex_th_shein_sla_detail dse on dse.pno = t.pno;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        a.*
    from
        (
            select
                pct.id
                ,pct.pno
                ,pct.client_id
                ,pct.source
                ,pcn.neg_result
                ,pct.updated_at
                ,row_number() over (partition by pct.id order by pcn.created_at desc ) rk
            from bi_pro.parcel_claim_task pct
            left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct .id
            where
                pct.state = 6
                and pct.special_claim_category = 1 -- 水果件理赔
                and pct.updated_at >= date_sub(curdate(), interval 1 day )
                and pct.updated_at < curdate()
        ) a
    where
        a.rk = 1
)
select
    convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
    ,t.pno 运单号
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,json_extract(t.neg_result,'$.money') 理赔金额
    ,case
        when t.source in (1,2,3,5,8,33,12) then '丢失'
        when t.source in (4,6,7,9,10) then '破损'
        when t.source in (11) then '超时效'
    end 理赔类型
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,group_concat(distinct plr.store_id) 责任网点
    ,t.client_id 客户ID
    ,coalesce(kp.name, ui.name) 客户名称
    ,pi.exhibition_length 长
    ,pi.exhibition_width 宽
    ,pi.exhibition_height 高
    ,pi.store_weight/1000 计费重量
    ,pi.store_total_amount 总运费
    ,dt.store_name 揽收网点
    ,dt.area_name 揽收区域
    ,dt.province_name 揽收省
    ,dt2.store_name 目的地网点
    ,dt2.area_name 目的地区域
    ,dt2.province_name 目的地省
    ,case bc.client_name
        when 'lazada' then dl.sla
        when 'shopee' then ds.sla_day
    else null
    end 理论运输时效
    ,datediff(t.updated_at, convert_tz(pi.created_at, '+00:00', '+07:00')) '实际运输时效（理赔完成时间-揽收）'
from t
left join fle_staging.parcel_info pi on pi.pno = t.pno
left join fle_staging.ka_profile kp on kp.id = t.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join bi_pro.parcel_lose_task plt on plt.pno = t.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.user_info ui on ui.id = t.client_id
left join dwm.dim_th_sys_store_rd dt  on dt.store_id = pi.ticket_pickup_store_id
left join dwm.dim_th_sys_store_rd dt2 on dt2.store_id = pi.dst_store_id
left join dwm.dwd_ex_th_lazada_sla_detail dl on dl.pno = t.pno
left join dwm.dwd_ex_th_shopee_sla_detail ds on ds.pno = t.pno
left join dwm.dwd_ex_th_tiktok_sla_detail dtt on dtt.pno = t.pno
left join dwm.dwd_ex_th_shein_sla_detail dse on dse.pno = t.pno
group by 2;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        a.*
    from
        (
            select
                pct.id
                ,pct.pno
                ,pct.client_id
                ,pct.source
                ,pcn.neg_result
                ,pct.updated_at
                ,row_number() over (partition by pct.id order by pcn.created_at desc ) rk
            from bi_pro.parcel_claim_task pct
            left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct .id
            where
                pct.state = 6
                and pct.special_claim_category = 1 -- 水果件理赔
#                 and pct.updated_at >= date_sub(curdate(), interval 1 day )
#                 and pct.updated_at < curdate()
                and date(pct.updated_at) = '2023-04-28'
        ) a
    where
        a.rk = 1
)
select
    convert_tz(pi.created_at, '+00:00', '+07:00') 揽收时间
    ,t.pno 运单号
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,json_extract(t.neg_result,'$.money') 理赔金额
    ,case
        when t.source in (1,2,3,5,8,33,12) then '丢失'
        when t.source in (4,6,7,9,10) then '破损'
        when t.source in (11) then '超时效'
    end 理赔类型
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,group_concat(distinct plr.store_id) 责任网点
    ,t.client_id 客户ID
    ,coalesce(kp.name, ui.name) 客户名称
    ,pi.exhibition_length 长
    ,pi.exhibition_width 宽
    ,pi.exhibition_height 高
    ,pi.store_weight/1000 计费重量
    ,pi.store_total_amount 总运费
    ,dt.store_name 揽收网点
    ,dt.area_name 揽收区域
    ,dt.province_name 揽收省
    ,dt2.store_name 目的地网点
    ,dt2.area_name 目的地区域
    ,dt2.province_name 目的地省
    ,case bc.client_name
        when 'lazada' then dl.sla
        when 'shopee' then ds.sla_day
    else null
    end 理论运输时效
    ,datediff(t.updated_at, convert_tz(pi.created_at, '+00:00', '+07:00')) '实际运输时效（理赔完成时间-揽收）'
from t
left join fle_staging.parcel_info pi on pi.pno = t.pno
left join fle_staging.ka_profile kp on kp.id = t.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join bi_pro.parcel_lose_task plt on plt.pno = t.pno
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
left join fle_staging.user_info ui on ui.id = t.client_id
left join dwm.dim_th_sys_store_rd dt  on dt.store_id = pi.ticket_pickup_store_id
left join dwm.dim_th_sys_store_rd dt2 on dt2.store_id = pi.dst_store_id
left join dwm.dwd_ex_th_lazada_sla_detail dl on dl.pno = t.pno
left join dwm.dwd_ex_th_shopee_sla_detail ds on ds.pno = t.pno
left join dwm.dwd_ex_th_tiktok_sla_detail dtt on dtt.pno = t.pno
left join dwm.dwd_ex_th_shein_sla_detail dse on dse.pno = t.pno
group by 2;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pcn.neg_result
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id =pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.neg_result
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id = pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11
group by 3;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.neg_result
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count() ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id = pct.id and pcn.neg_type in (5,6,7)

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    -- ,concat(TIMESTAMPDIFF(second,pct.created_at,pct.updated_at)/3600,'H',timestampdiff(second,pct.created_at,pupdated_at)/60,'M') 处理时长ct.
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'

    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.neg_result
    ,if(pcn.neg_type IN (5,6,7),json_extract(pcn.neg_result,'$.money'),null) 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count(pco.id) ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join  bi_pro.parcel_claim_negotiation pcn
on pcn.task_id = pct.id and pcn.neg_type in (5,6,7)

left join
    (
        select
            a1.*
        from
            (
                select
                    pcn.task_id
                    ,json_extract(pcn.neg_result,'$.money') monkey
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at ) rk
                from bi_pro.parcel_claim_negotiation pcn
                left join bi_pro.parcel_claim_task pct on pcn.task_id = pct.id
                where
                    pct.created_at >= '2023-01-01'
                    and pct.created_at < '2023-04-28'
                    and pcn.neg_type in (5,6,7)
                    and json_extract(pcn.neg_result,'$.money') is not null
            ) a1
        where
            a1.rk = 1
    ) pcn on pcn.task_id = pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where pct.created_at>='2023-01-01'
and pct.created_at<'2023-04-28'
-- and pct.pno='TH13043WSW0E8N'
and pi.article_category=11;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'
    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.monkey 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count(pco.id) ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join
    (
        select
            a1.*
        from
            (
                select
                    pcn.task_id
                    ,json_extract(pcn.neg_result,'$.money') monkey
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at ) rk
                from bi_pro.parcel_claim_negotiation pcn
                left join bi_pro.parcel_claim_task pct on pcn.task_id = pct.id
                where
                    pct.created_at >= '2023-01-01'
                    and pct.created_at < '2023-04-28'
                    and pcn.neg_type in (5,6,7)
                    and json_extract(pcn.neg_result,'$.money') is not null
            ) a1
        where
            a1.rk = 1
    ) pcn on pcn.task_id = pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where
    pct.created_at >= '2023-01-01'
    and pct.created_at < '2023-04-28'
    and pi.article_category = 11;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'
    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.monkey 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count(pco.id) ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join
    (
        select
            a1.*
        from
            (
                select
                    pcn.task_id
                    ,json_extract(pcn.neg_result,'$.money') monkey
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at ) rk
                from bi_pro.parcel_claim_negotiation pcn
                left join bi_pro.parcel_claim_task pct on pcn.task_id = pct.id
                where
                    pct.created_at >= '2023-01-01'
                    and pct.created_at < '2023-04-28'
                    and pcn.neg_type in (5,6,7)
                    and json_extract(pcn.neg_result,'$.money') is not null
            ) a1
        where
            a1.rk = 1
    ) pcn on pcn.task_id = pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2023-01-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno and plt.duty_reasons is not null


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where
    pct.created_at >= '2023-01-01'
    and pct.created_at < '2023-04-28'
    and pi.article_category = 11;
;-- -. . -..- - / . -. - .-. -.--
select
    pct.created_at 任务生成时间
    ,pct.parcel_created_at 包裹揽收时间
    ,concat('SSLP00',pct.id) 任务ID
    ,pct.pno 运单号
    ,pi.returned_pno 退货运单号
    ,case pct.self_claim
        when 1 then '是'
        when 0 then '否'
    end 自主理赔
    ,case pct.vip_enable
        when 0 then '普通客户'
        when 1 then 'KAM客户'
    end 客户类型
    ,case pct.vehicle_abnormal_type
        when 0 then '车辆车祸'
        when 1 then '车辆湿损'
        when 2 then '车辆途中故障'
        when 3 then '其他'
    end 车辆异常
    ,case pct.claim_target
        when 1 then  '客户'
        when 2 then '收件人'
        when 3 then 'Drop Point寄件人'
    end 理赔对象
    ,pct.client_id 客户ID
    ,if(bc.client_name = 'lazada', oi.insure_declare_value/100, oi.cogs_amount/100) cogs
    ,case pct.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,t.t_value QAQC判责原因
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length,pi.exhibition_width,pi.exhibition_height) 尺寸
    ,case pct.special_claim_category
        when 0 then '否'
        when 1 then '是'
    end 是否符合水果理赔条件
    ,pct.no_claim_reason 不符合理赔条件原因
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then' 待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,pct.area 区域
    ,hsi.name 处理人
    ,pct.updated_at 处理时间
    ,pco6.created_at 理赔完成时间
    ,pct.id
    ,pcn.task_id
    ,pcn.monkey 客户申请理赔金额
    ,json_extract(pcn2.neg_result,'$.money') 理赔金额
    ,case pct.claim_where
        when 1 then '赔付至账户余额'
        when 2 then '赔付至银行账户'
    end 理赔途径
    ,coalesce(pco1.created_at, convert_tz(ci.created_at, '+00:00', '+07:00')) 客户第一次上传资料时间
    ,pco2.created_at 客户最后上传资料时间
    ,pco3.created_at 客服第一次处理时间
    ,pco4.created_at 客服最后处理时间
    ,pco5.ct 驳回次数
    ,if(pi.state=5,concat(timestampdiff(day, pi.created_at, pi.finished_at),'D', timestampdiff(hour,  pi.created_at, pi.finished_at)%24, 'H'),concat(timestampdiff(day, convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at),'D', timestampdiff(hour,  convert_tz(pi.created_at,'+00:00','+07:00') ,pct.created_at)%24, 'H'))运输天数
    ,if(pai.pno is not null , '是', '否') 是否购买外包装破损险
    ,if(pco2.created_at is not null,if(hour(pco2.created_at) >= 14, '否', '是'), null)   '客户是否当天 14:00 提供资料'
    ,timestampdiff(hour, pco1.created_at, pco4.created_at) '客户最后提交资料到客服处理时间（小时）'
    ,if(pct.state = 6, timestampdiff(hour,  pco4.created_at, pct.finance_updated_at), null) '从客服审核到财务打款（小时）'
    ,if(pct.state = 6 ,timestampdiff(hour,  pco2.created_at, pct.finance_updated_at), null) '从客户最后提交理赔资料到财务打款（小时）'
from bi_pro.parcel_claim_task pct
left join fle_staging.parcel_amount_info pai on pai.pno = pct.pno and pai.item = 'OPD_INSURE_AMOUNT'
left join fle_staging.customer_issue ci on pct.source_id = ci.id and pct.source in (2,5,6,7)
left join
(-- 第一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22,15)
    )pco where pco.rn=1
)pco1
on pco1.task_id=pct.id

left join
(-- 最后一次上传资料
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action in (5,22)
    )pco where pco.rn=1
)pco2
on pco2.task_id=pct.id
left join
(-- 客服第一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco3
on pco3.task_id=pct.id

left join
(-- 客服最后一次联系
    select
    pco.*
    from
    (
    select
        pco.task_id
        ,pco.created_at
        ,row_number()over(partition by pco.task_id order by pco.created_at desc) rn
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=21
    )pco where pco.rn=1
)pco4
on pco4.task_id=pct.id

left join
(-- 驳回
    select
       pco.task_id
       ,count(pco.id) ct
    from bi_pro.parcel_cs_operation_log pco
    where pco.action=13 -- 驳回
    group by 1
)pco5
on pco5.task_id=pct.id

left join bi_pro.parcel_cs_operation_log pco6
on pco6.task_id=pct.id and pco6.action=9 -- 理赔完成

left join
    (
        select
            a1.*
        from
            (
                select
                    pcn.task_id
                    ,json_extract(pcn.neg_result,'$.money') monkey
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at ) rk
                from bi_pro.parcel_claim_negotiation pcn
                left join bi_pro.parcel_claim_task pct on pcn.task_id = pct.id
                where
                    pct.created_at >= '2023-01-01'
                    and pct.created_at < '2023-04-28'
                    and pcn.neg_type in (5,6,7)
                    and json_extract(pcn.neg_result,'$.money') is not null
            ) a1
        where
            a1.rk = 1
    ) pcn on pcn.task_id = pct.id

left join
    (
        select
            a.*
        from
            (
                select
                    pcn.task_id
                    ,pcn.neg_result
                    ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
                from  bi_pro.parcel_claim_negotiation pcn
                where
                    pcn.created_at >= '2022-10-01'
            ) a
        where
            a.rk = 1
    ) pcn2 on pcn2.task_id = pct.id

left join dwm.tmp_ex_big_clients_id_detail bc
on pct.client_id=bc.client_id

left join fle_staging.order_info oi
on pct.pno=oi.pno

left join bi_pro.parcel_lose_task plt
on plt.pno=pct.pno and plt.penalties > 0


left join bi_pro.translations t
on plt.duty_reasons=t.t_key
and t.lang ='zh-CN'

left join fle_staging.parcel_info pi
on pct.pno=pi.pno

left join bi_pro.hr_staff_info hsi
on hsi.staff_info_id=pct.operator_id

where
    pct.created_at >= '2023-01-01'
    and pct.created_at < '2023-04-28'
    and pi.article_category = 11;
;-- -. . -..- - / . -. - .-. -.--
select
    sa.clientid
    ,sa.device_sn_code
from fle_staging.staff_account sa
where
    sa.clientid in ('865881041667772520050990849492', '16203385549921620338555013', '16558656414981655865641507', '16810952284461681095228447', '16620382663641662038266366', '16153401676141615340167620', '16442814214101644281421411', '865881043087086520002029460890', '16349150961421634915096143', '16553450225111655345022514', '16640138290191664013829019', '865881043825063520002003971967', '16629931162381662993116238', '05cd31000d24ea1c', '16775115495741677511549577', '16805140205791680514020582', '16744067534871674406753488', '16461346685831646134668584', '16583677563401658367756341', '16731725772771673172577283', '16632408955401663240895540', '16487274914661648727491466', '16611405558281661140555828', 'A10000126E46A91680957731731', '16676588205731667658820575', '20ba34ca2809974d', '862122049207003520002018812517', '16520042063131652004206319', '12623048393981262304839398', '4b8133489a868af0', '358145091489527520033402859409', '16564282304111656428230414', '111fd3a2441d7851', '16579641489541657964148970', '16242808422771624280842283', '16753084578851675308457886', '21e3404e618968c0', '869193044147026520050808895046', '16665738190271666573819033', '16702921802831670292180283', '16784915326031678491532608', '16799243870891679924387089', '16592750563171659275056317', '865881040085810520002054400036', '16232856897361623285689737', '16343661090221634366109023', '16497228350651649722835069', '16688596221151668859622121', '16477662588901647766258890', '865209047221214520002047159176', '16729274321641672927432164', 'A10000126E4F221664326573139', '16321883726091632188372613', '16675652540791667565254086', '16391913922471639191392252', '16335784299831633578429983', '16817868439961681786844005', '16819170427201681917042727', '16417167403511641716740351', '16324687470241632468747025', '16766469494211676646949422', '16385806564411638580656451', '16741115787801674111578780', '16824186817081682418681708', '14832288209501483228820950', '16698557389521669855738952', '5c9622cd3160fcf2', '16678686709961667868670996', '16575226882821657522688288', '16689909817651668990981765', '8472e3bde023edbf', 'bed82a8b3181eb4a', 'dc56d1b13e4bccbc', '16549097435811654909743582', '16601921273731660192127373', '16626832094901662683209499', '16754329642911675432964298', '16824325378261682432537832', '16826518781781682651878179', '1a3e484ab1a3b9a8', '861128047907412520051903302103', '8673510337276101680159777209', '16310299098651631029909866', '16468224008601646822400861', '16491214629181649121462922', '16608726509311660872650932', '16826427236401682642723648', '16826477040971682647704100', '359116081567654520002015236410', '593d134d6d7c2436', '862122049181042520002023950378', '869881013712362520002051420879', '869881019895583520002029036310', '16345202415511634520241555', '16500985928341650098592834', '16593283642871659328364287', '16636556357761663655635777', '16735740451861673574045194', '16818969791131681896979117', '16825905436761682590543679', '16826038869611682603886961', '16826921604121682692160416', '16827502117251682750211729', '16827779966991682777996699', '27dbc3f034a20655', '861244040622625520044030181824', '865881042915923520002029462082', '8ad3916f655abe38')
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    t.staff_info_id
    ,pick.num '日均揽收量 pick up/day'
    ,scan.num '日均交接量 scan/day'
    ,del.num '日均妥投量 delivery/day'
from tmpale.tmp_th_staff_0404 t
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.created_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pi.ticket_pickup_staff_info_id
        where
            pi.created_at >= '2023-03-31 17:00:00'
            and pi.created_at < '2023-04-30 17:00:00'
        group by 1
    ) pick on pick.ticket_pickup_staff_info_id = t.staff_info_id
left join
    (
        select
            pr.staff_info_id
            ,count(distinct pr.pno)/count(distinct date(convert_tz(pr.routed_at, '+00:00', '+07:00'))) num
        from rot_pro.parcel_route pr
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pr.staff_info_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at >= '2023-03-31 17:00:00'
            and pr.routed_at < '2023-04-30 17:00:00'
        group by 1
    ) scan on scan.staff_info_id = t.staff_info_id
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
        where
            pi.finished_at >= '2023-03-31 17:00:00'
            and pi.finished_at < '2023-04-30 17:00:00'
            and pi.state = 5
        group by 1
    ) del on del.ticket_pickup_staff_info_id = t.staff_info_id;
;-- -. . -..- - / . -. - .-. -.--
select
    t.staff_info_id
    ,pick.num '日均揽收量 pick up/day'
    ,scan.num '日均交接量 scan/day'
    ,del.num '日均妥投量 delivery/day'
from tmpale.tmp_th_staff_0504 t
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.created_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pi.ticket_pickup_staff_info_id
        where
            pi.created_at >= '2023-03-31 17:00:00'
            and pi.created_at < '2023-04-30 17:00:00'
        group by 1
    ) pick on pick.ticket_pickup_staff_info_id = t.staff_info_id
left join
    (
        select
            pr.staff_info_id
            ,count(distinct pr.pno)/count(distinct date(convert_tz(pr.routed_at, '+00:00', '+07:00'))) num
        from rot_pro.parcel_route pr
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pr.staff_info_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at >= '2023-03-31 17:00:00'
            and pr.routed_at < '2023-04-30 17:00:00'
        group by 1
    ) scan on scan.staff_info_id = t.staff_info_id
left join
    (
        select
            pi.ticket_pickup_staff_info_id
            ,count(distinct pi.pno)/count(distinct date(convert_tz(pi.finished_at, '+00:00', '+07:00'))) num
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_staff_0504 t on t.staff_info_id = pi.ticket_delivery_staff_info_id
        where
            pi.finished_at >= '2023-03-31 17:00:00'
            and pi.finished_at < '2023-04-30 17:00:00'
            and pi.state = 5
        group by 1
    ) del on del.ticket_pickup_staff_info_id = t.staff_info_id;
;-- -. . -..- - / . -. - .-. -.--
select
    t.pno
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then '待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,json_extract(a.neg_result,'$.money') 理赔金额
from bi_pro.parcel_claim_task pct
join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
left join
    (
        select
            pct.id
        #     ,case pct.state
        #         when 1 then '待协商'
        #         when 2 then '协商不一致，待重新协商'
        #         when 3 then '待财务核实'
        #         when 4 then '核实通过，待财务支付'
        #         when 5 then '财务驳回'
        #         when 6 then '理赔完成'
        #         when 7 then '理赔终止'
        #         when 8 then '异常关闭'
        #         when 9 then' 待协商（搁置）'
        #         when 10 then '等待再次联系'
        #     end 状态
            ,pct.state
            ,pcn.neg_result
            ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
        from bi_pro.parcel_claim_task pct
        join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
        left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct.id
        where
            pct.state = 6
    ) a on pct.id = a.id and a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.运单号
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then '待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,json_extract(a.neg_result,'$.money') 理赔金额
from bi_pro.parcel_claim_task pct
join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
left join
    (
        select
            pct.id
        #     ,case pct.state
        #         when 1 then '待协商'
        #         when 2 then '协商不一致，待重新协商'
        #         when 3 then '待财务核实'
        #         when 4 then '核实通过，待财务支付'
        #         when 5 then '财务驳回'
        #         when 6 then '理赔完成'
        #         when 7 then '理赔终止'
        #         when 8 then '异常关闭'
        #         when 9 then' 待协商（搁置）'
        #         when 10 then '等待再次联系'
        #     end 状态
            ,pct.state
            ,pcn.neg_result
            ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
        from bi_pro.parcel_claim_task pct
        join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
        left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct.id
        where
            pct.state = 6
    ) a on pct.id = a.id and a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.运单号
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then '待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,json_unquote(json_extract(a.neg_result,'$.money')) 理赔金额
from bi_pro.parcel_claim_task pct
join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
left join
    (
        select
            pct.id
        #     ,case pct.state
        #         when 1 then '待协商'
        #         when 2 then '协商不一致，待重新协商'
        #         when 3 then '待财务核实'
        #         when 4 then '核实通过，待财务支付'
        #         when 5 then '财务驳回'
        #         when 6 then '理赔完成'
        #         when 7 then '理赔终止'
        #         when 8 then '异常关闭'
        #         when 9 then' 待协商（搁置）'
        #         when 10 then '等待再次联系'
        #     end 状态
            ,pct.state
            ,pcn.neg_result
            ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
        from bi_pro.parcel_claim_task pct
        join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
        left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct.id
        where
            pct.state = 6
    ) a on pct.id = a.id and a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    t.运单号
    ,case pct.state
        when 1 then '待协商'
        when 2 then '协商不一致，待重新协商'
        when 3 then '待财务核实'
        when 4 then '核实通过，待财务支付'
        when 5 then '财务驳回'
        when 6 then '理赔完成'
        when 7 then '理赔终止'
        when 8 then '异常关闭'
        when 9 then '待协商（搁置）'
        when 10 then '等待再次联系'
    end 状态
    ,replace(json_extract(a.neg_result,'$.money'),'"','') 理赔金额
from bi_pro.parcel_claim_task pct
join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
left join
    (
        select
            pct.id
        #     ,case pct.state
        #         when 1 then '待协商'
        #         when 2 then '协商不一致，待重新协商'
        #         when 3 then '待财务核实'
        #         when 4 then '核实通过，待财务支付'
        #         when 5 then '财务驳回'
        #         when 6 then '理赔完成'
        #         when 7 then '理赔终止'
        #         when 8 then '异常关闭'
        #         when 9 then' 待协商（搁置）'
        #         when 10 then '等待再次联系'
        #     end 状态
            ,pct.state
            ,pcn.neg_result
            ,row_number() over (partition by pcn.task_id order by pcn.created_at desc ) rk
        from bi_pro.parcel_claim_task pct
        join tmpale.tmp_th_pno_lj_0508 t on t.运单号 = pct.pno
        left join bi_pro.parcel_claim_negotiation pcn on pcn.task_id = pct.id
        where
            pct.state = 6
    ) a on pct.id = a.id and a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
SELECT
    krw.stat_date 揽收日期
    ,krw.client_id 客户ID
    ,krw.client_name
    ,if(krw.client_name is null ,ui.name,krw.client_name) 客户名称
FROM bi_pro.`ka_cod_refuse_warning_mail` krw
left join fle_staging.user_info ui
on ui.id=krw.client_id
WHERE krw.`created_at` >= '2023-05-08' AND krw.`forbid_status` IN (1,2,3);
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,di.store_id
    ,plt.parcel_created_at
    ,plt.last_valid_store_id
    ,plt.last_valid_staff_info_id
    ,hjt.job_name
    ,plt.created_at
from bi_pro.parcel_lose_task plt
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
where
    plt.source = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,di.store_id
    ,plt.parcel_created_at
    ,plt.last_valid_store_id
    ,plt.last_valid_staff_info_id
    ,hjt.job_name
    ,plt.created_at
from bi_pro.parcel_lose_task plt
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
where
    plt.source = 1
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,di.store_id
    ,ss.name  上报网点
    ,plt.parcel_created_at
    ,plt.last_valid_store_id
    ,ss2.name  最后有效路由操作网点
    ,plt.last_valid_action
    ,plt.last_valid_staff_info_id
    ,hjt.job_name
    ,plt.created_at
from bi_pro.parcel_lose_task plt
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join fle_staging.sys_store ss on ss.id = di.store_id
left join fle_staging.sys_store ss2 on ss2.id = plt.last_valid_store_id
where
    plt.source = 1
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    count(*)
from fle_staging.parcel_headless ph
where
    ph.created_at > '2023-03-31 17:00:00'
    and ph.created_at < '2023-04-30 17:00:00'
    and ph.submit_store_id = 'TH05110404';
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,if(pi.returned = 1,pi.customary_pno, pi.pno) 原单号
    ,ss.name  上报网点
    ,plt.parcel_created_at 揽收时间
    ,ss2.name  最后有效路由操作网点
    ,plt.last_valid_action 最后有效操作路由
    ,plt.last_valid_staff_info_id 最后有效路由操作人ID
    ,hjt.job_name 最后有效路由操作人职位
    ,pi.cod_amount/100  COD金额
    ,concat_ws('*', pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 包裹尺寸
    ,pssn.arrived_at ‘到件入仓时间（目的地网点）’
    ,plt.created_at 闪速任务生成时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join fle_staging.sys_store ss on ss.id = di.store_id
left join fle_staging.sys_store ss2 on ss2.id = plt.last_valid_store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = plt.pno and pssn.store_id = pi.dst_store_id
where
    plt.source = 1
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,pi.customary_pno 原单号
    ,ss.name  上报网点
    ,plt.parcel_created_at 揽收时间
    ,ss2.name  最后有效路由操作网点
    ,plt.last_valid_action 最后有效操作路由
    ,plt.last_valid_staff_info_id 最后有效路由操作人ID
    ,hjt.job_name 最后有效路由操作人职位
    ,pi.cod_amount/100  COD金额
    ,concat_ws('*', pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 包裹尺寸
    ,pssn.arrived_at ‘到件入仓时间（目的地网点）’
    ,plt.created_at 闪速任务生成时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join fle_staging.sys_store ss on ss.id = di.store_id
left join fle_staging.sys_store ss2 on ss2.id = plt.last_valid_store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = plt.pno and pssn.store_id = pi.dst_store_id
where
    plt.source = 1
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,pi.customary_pno 原单号
    ,ss.name  上报网点
    ,plt.parcel_created_at 揽收时间
    ,case plt.last_valid_action
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end 最后有效操作路由
    ,plt.last_valid_staff_info_id 最后有效路由操作人ID
    ,hjt.job_name 最后有效路由操作人职位
    ,pi.cod_amount/100  COD金额
    ,concat_ws('*', pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 包裹尺寸
    ,pssn.arrived_at ‘到件入仓时间（目的地网点）’
    ,plt.created_at 闪速任务生成时间
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join fle_staging.sys_store ss on ss.id = di.store_id
left join fle_staging.sys_store ss2 on ss2.id = plt.last_valid_store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = plt.pno and pssn.store_id = pi.dst_store_id
where
    plt.source = 1
    and plt.state not in (5,6);
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = de.pno and de.dst_store_id = pssn.store_id
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,pssn.first_valid_routed_at
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = de.pno and de.dst_store_id = pssn.store_id
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,pssn.first_valid_routed_at
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = pi.pno and pi.dst_store_id = pssn.store_id
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = pi.pno and pi.dst_store_id = pssn.store_id
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,de.dst_routed_at 目的地网点的第一次有效路由时间
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), de.dst_routed_at) 在仓天数
from dwm.dwd_ex_th_parcel_details de
join fle_staging.parcel_info pi on pi.pno = de.pno
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = pi.pno and pi.dst_store_id = pssn.store_id and pssn.valid_store_order is not null
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    de.pno
    ,pssn.first_valid_routed_at 目的地网点的第一次有效路由时间
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), pssn.first_valid_routed_at) 在仓天数
from fle_staging.parcel_info pi
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = pi.pno and pi.dst_store_id = pssn.store_id and pssn.valid_store_order is not null
where
    pi.state not in (5,7,8,9)
    and de.dst_routed_at < date_sub(curdate(), interval  2 day )
    and pssn.first_valid_routed_at is not null;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pssn.first_valid_routed_at 目的地网点的第一次有效路由时间
    ,pssn.last_valid_routed_at 目的地网点的最后一次有效路由时间
    ,datediff(curdate(), pssn.first_valid_routed_at) 在仓天数
from fle_staging.parcel_info pi
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = pi.pno and pi.dst_store_id = pssn.store_id and pssn.valid_store_order is not null
where
    pi.state not in (5,7,8,9)
    and pssn.first_valid_routed_at < date_sub(curdate(), interval  2 day );
;-- -. . -..- - / . -. - .-. -.--
select
    count(distinct pi.pno)
from fle_staging.parcel_info pi
left join  fle_staging.parcel_problem_detail ppd on ppd.pno = pi.pno
where
    hour(convert_tz(ppd.created_at, '+00:00', '+07:00')) < 4
    and pi.created_at > '2023-03-31 17:00:00'
    and pi.created_at < '2023-04-30 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.created_at
from fle_staging.parcel_info pi
left join  fle_staging.parcel_problem_detail ppd on ppd.pno = pi.pno
where
    hour(convert_tz(ppd.created_at, '+00:00', '+07:00')) < 4
    and pi.created_at > '2023-03-31 17:00:00'
    and pi.created_at < '2023-04-30 17:00:00'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case ppd.parcel_problem_type_category
        when 1 then '问题件'
        when 2 then '留仓件'
    end 类型
    ,date(convert_tz(ppd.created_at, '+00:00', '+07:00')) 标记时间
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
from fle_staging.parcel_info pi
left join  fle_staging.parcel_problem_detail ppd on ppd.pno = pi.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(convert_tz(ppd.created_at, '+00:00', '+07:00')) and dt.网点ID = ppd.store_id
where
    hour(convert_tz(ppd.created_at, '+00:00', '+07:00')) < 4
    and pi.created_at > '2023-03-31 17:00:00'
    and pi.created_at < '2023-04-30 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
        di.pno
        ,di.created_at
    from fle_staging.diff_info di
    where
        di.diff_marker_category = 31 -- 分错网点，地址錯誤
        and di.created_at >= '2023-03-31 17:00:00'
        and di.created_at < '2023-04-30 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
        di.pno
        ,di.store_id
        ,di.created_at
    from fle_staging.diff_info di
    where
        di.diff_marker_category = 31 -- 分错网点，地址錯誤
        and di.created_at >= '2023-03-31 17:00:00'
        and di.created_at < '2023-04-30 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
    pr.pno
from rot_pro.parcel_route pr
join bi_pro.hr_staff_info hsi on pr.staff_info_id = hsi.staff_info_id and hsi.job_title = 37
where
    pr.route_action = 'PHONE'
    and pr.routed_at > '2023-05-10';
;-- -. . -..- - / . -. - .-. -.--
select
    pr.pno
    ,pr.routed_at
from rot_pro.parcel_route pr
join bi_pro.hr_staff_info hsi on pr.staff_info_id = hsi.staff_info_id and hsi.job_title = 37
where
    pr.route_action = 'PHONE'
    and pr.routed_at > '2023-05-10';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category = 31 -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id = 31
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,json_extract(pr2.extra_value, '$.callDuration') cal
                ,json_extract(pr2.extra_value, '$.diaboloDuration') dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = tdm.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,json_extract(pr2.extra_value, '$.callDuration') cal
                ,json_extract(pr2.extra_value, '$.diaboloDuration') dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = tdm.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,ppd.staff_info_id '快递员工号'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm on tdm.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category = 31 -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id = 31
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,json_extract(pr2.extra_value, '$.callDuration') cal
                ,json_extract(pr2.extra_value, '$.diaboloDuration') dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,json_extract(pr2.extra_value, '$.callDuration') cal
                ,json_extract(pr2.extra_value, '$.diaboloDuration') dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,ppd.staff_info_id '快递员工号'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm on tdm.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category = 31 -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id = 31
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,ppd.staff_info_id '快递员工号'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm on tdm.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category = 31 -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id = 31
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,tdm.staff_info_id '快递员工号'
    ,if(t2.pno is not null, '是', '否' ) '快递员是否标记“分错网点-地址错误”'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm t2 on t2.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
select
    a.creat_date
    ,a.submit_store_name
    ,case ss.category
      when 1 then 'SP'
      when 2 then 'DC'
      when 4 then 'SHOP'
      when 5 then 'SHOP'
      when 6 then 'FH'
      when 7 then 'SHOP'
      when 8 then 'Hub'
      when 9 then 'Onsite'
      when 10 then 'BDC'
      when 11 then 'fulfillment'
      when 12 then 'B-HUB'
      when 13 then 'CDC'
      when 14 then 'PDC'
    end 网点类型
    ,count(distinct a.hno) 上报无头件总数
    ,count(distinct if(a.state = 5, a.hno, null)) 撤销数量
    ,count(distinct if(a.head_state in ('认领成功', '认领成功-已失效', '认领失败-已失效'), a.hno, null)) 认领成功数量
    ,count(distinct if(a.head_state in ('未认领-已失效'), a.hno, null)) 失效的数量
    ,count(distinct if(a.state = 3 and a.print_state in (1,2), a.hno, null)) 失效后已处理数量
from
    (
        select
            ph.hno
            ,date(ph.created_at) creat_date
            ,ph.submit_store_name
            ,ph.submit_store_id
            ,ph.pno
            ,case
                when ph.state = 0 then '未认领-待认领'
                when ph.state = 2 then '认领成功'
                when ph.state = 3 and ph.claim_store_id is null then '未认领-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at < coalesce(sx.claim_time,curdate()) then '认领成功-已失效'
                when ph.state = 3 and ph.claim_store_id is not null and ph.updated_at >= coalesce(sx.claim_time,curdate()) then '认领失败-已失效'
            end head_state
            ,ph.state
            ,ph.created_at
            ,ph.claim_store_id
            ,ph.claim_store_name
            ,ph.claim_at
            ,ph.updated_at
            ,ph.print_state
        from  fle_staging.parcel_headless ph
        left join
            (
                select
                    ph.pno
                    ,min(pct.created_at) claim_time
                from fle_staging.parcel_headless ph
                join bi_pro.parcel_claim_task pct on pct.pno = ph.pno
                where
                    ph.state = 3 -- 失效
                group by 1
            ) sx on sx.pno = ph.pno
        where
#             ph.state < 4
            ph.created_at >= '2023-04-05 17:00:00'
            and ph.created_at < '2023-05-06 17:00:00'
#             and ph.claim_store_id is not null -- 有认领动作
#             and ph.claim_staff_id is not null
    ) a
left join fle_staging.sys_store ss on ss.id = a.submit_store_id
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category = 31 -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id = 31
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,t2.staff_info_id '快递员工号'
    ,if(t2.pno is not null, '是', '否' ) '快递员是否标记“分错网点-地址错误”'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm t2 on t2.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        di.*
    from
        (
            select
                di.pno
                ,di.store_id
                ,di.created_at
                ,date(convert_tz(di.created_at, '+00:00', '+07:00')) creat_date
                ,row_number() over (partition by di.pno order by di.created_at) rk
            from fle_staging.diff_info di
            where
                di.diff_marker_category in (31,79)  -- 分错网点，地址錯誤
                and di.created_at >= '2023-03-31 17:00:00'
                and di.created_at < '2023-04-30 17:00:00'
        ) di
    where
        di.rk = 1
)
, tdm as
(
    select
        a.*
    from
        (
              select
                td.pno
                ,tdm.created_at
                ,td.staff_info_id
                ,td.store_id
                ,t.creat_date
                ,row_number() over (partition by td.pno order by tdm.created_at desc ) rk
            from fle_staging.ticket_delivery_marker tdm
            join fle_staging.ticket_delivery td on td.id = tdm.delivery_id
            join t on t.pno = td.pno and t.store_id = td.store_id
            where
                date(convert_tz(tdm.created_at, '+00:00', '+07:00')) = t.creat_date
                and tdm.created_at < t.created_at
                and tdm.marker_id in (31,79)
        ) a
    where
        a.rk = 1
)
, pho1 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (13,110,1000)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
, pho2 as
(
    select
        a.pno
        ,a.routed_at
        ,a.cal
        ,a.dia
        ,row_number() over (partition by a.pno order by a.cal desc ) rk1
        ,row_number() over (partition by a.pno order by a.dia desc ) rk2
        ,sum(a.cal) over (partition by a.pno) cal_total
    from
        (
            select
                pr2.pno
                ,pr2.routed_at
                ,cast(json_extract(pr2.extra_value, '$.callDuration') as int) cal
                ,cast(json_extract(pr2.extra_value, '$.diaboloDuration') as int) dia
            from rot_pro.parcel_route pr2
            join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pr2.staff_info_id and hsi.job_title in (37)
            join tdm t2 on t2.pno = pr2.pno and t2.store_id = pr2.store_id
            where
                pr2.route_action = 'PHONE'
                and date(convert_tz(pr2.routed_at, '+00:00', '+07:00')) = t2.creat_date
                and pr2.routed_at < t2.created_at
        ) a
)
select
    pi.pno
    ,pi.client_id
    ,if(scan.pno is not  null, '是', '否') 上报错分前是否交接扫描
    ,if(ppd.pno is not null , '是', '否') 上报错分前是否留仓或提交其它问题件
    ,case  ppd.diff_marker_category
        when 1 then '客户不在家/电话无人接听'
         when 2 then '收件人拒收'
         when 3 then '快件分错网点'
         when 4 then '外包装破损'
         when 5 then '货物破损'
         when 6 then '货物短少'
         when 7 then '货物丢失'
         when 8 then '电话联系不上'
         when 9 then '客户改约时间'
         when 10 then '客户不在'
         when 11 then '客户取消任务'
         when 12 then '无人签收'
         when 13 then '客户周末或假期不收货'
         when 14 then '客户改约时间'
         when 15 then '当日运力不足，无法派送'
         when 16 then '联系不上收件人'
         when 17 then '收件人拒收'
         when 18 then '快件分错网点'
         when 19 then '外包装破损'
         when 20 then '货物破损'
         when 21 then '货物短少'
         when 22 then '货物丢失'
         when 23 then '收件人/地址不清晰或不正确'
         when 24 then '收件地址已废弃或不存在'
         when 25 then '收件人电话号码错误'
         when 26 then 'cod金额不正确'
         when 27 then '无实际包裹'
         when 28 then '已妥投未交接'
         when 29 then '收件人电话号码是空号'
         when 30 then '快件分错网点-地址正确'
         when 31 then '快件分错网点-地址错误'
         when 32 then '禁运品'
         when 33 then '严重破损（丢弃）'
         when 34 then '退件两次尝试派送失败'
         when 35 then '不能打开locker'
         when 36 then 'locker不能使用'
         when 37 then '该地址找不到lockerstation'
         when 38 then '一票多件'
         when 39 then '多次尝试派件失败'
         when 40 then '客户不在家/电话无人接听'
         when 41 then '错过班车时间'
         when 42 then '目的地是偏远地区,留仓待次日派送'
         when 43 then '目的地是岛屿,留仓待次日派送'
         when 44 then '企业/机构当天已下班'
         when 45 then '子母件包裹未全部到达网点'
         when 46 then '不可抗力原因留仓(台风)'
         when 47 then '虚假包裹'
         when 50 then '客户取消寄件'
         when 51 then '信息录入错误'
         when 52 then '客户取消寄件'
         when 69 then '禁运品'
         when 70 then '客户改约时间'
         when 71 then '当日运力不足，无法派送'
         when 72 then '客户周末或假期不收货'
         when 73 then '收件人/地址不清晰或不正确'
         when 74 then '收件地址已废弃或不存在'
         when 75 then '收件人电话号码错误'
         when 76 then 'cod金额不正确'
         when 77 then '企业/机构当天已下班'
         when 78 then '收件人电话号码是空号'
         when 79 then '快件分错网点-地址错误'
         when 80 then '客户取消任务'
         when 81 then '重复下单'
         when 82 then '已完成揽件'
         when 83 then '联系不上客户'
         when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 85 then '寄件人电话号码是空号'
         when 86 then '包裹不符合揽收条件超大件'
         when 87 then '包裹不符合揽收条件违禁品'
         when 88 then '寄件人地址为岛屿'
         when 89 then '运力短缺，跟客户协商推迟揽收'
         when 90 then '包裹未准备好推迟揽收'
         when 91 then '包裹包装不符合运输标准'
         when 92 then '客户提供的清单里没有此包裹'
         when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
         when 94 then '客户取消寄件/客户实际不想寄此包裹'
         when 95 then '车辆/人力短缺推迟揽收'
         when 96 then '遗漏揽收(已停用)'
         when 97 then '子母件(一个单号多个包裹)'
         when 98 then '地址错误addresserror'
         when 99 then '包裹不符合揽收条件：超大件'
         when 100 then '包裹不符合揽收条件：违禁品'
         when 101 then '包裹包装不符合运输标准'
         when 102 then '包裹未准备好'
         when 103 then '运力短缺，跟客户协商推迟揽收'
         when 104 then '子母件(一个单号多个包裹)'
         when 105 then '破损包裹'
         when 106 then '空包裹'
         when 107 then '不能打开locker(密码错误)'
         when 108 then 'locker不能使用'
         when 109 then 'locker找不到'
         when 110 then '运单号与实际包裹的单号不一致'
         when 111 then 'box客户取消任务'
         when 112 then '不能打开locker(密码错误)'
         when 113 then 'locker不能使用'
         when 114 then 'locker找不到'
         when 115 then '实际重量尺寸大于客户下单的重量尺寸'
         when 116 then '客户仓库关闭'
         when 117 then '客户仓库关闭'
         when 118 then 'SHOPEE订单系统自动关闭'
         when 119 then '客户取消包裹'
         when 121 then '地址错误'
         when 122 then '当日运力不足，无法揽收'
    end '上报错分前留仓/问题件原因'
    ,t2.staff_info_id '快递员工号'
    ,if(t2.pno is not null, '是', '否' ) '快递员是否标记“分错网点-地址错误”'
    ,if(coalesce(p1.pno, p2.pno) is not null, '是', '否' ) 快递员标记前是否联系收件人
    ,coalesce(p1.dia, p2.dia) 快递员联系收件人响铃时长
    ,coalesce(p1.cal, p2.cal) 快递员联系收件人通话时长
    ,if(coalesce(p3.pno, p4.pno) is not null, '是', '否' ) '仓管员提交“分错网点-地址错误”前是否联系收件人'
    ,coalesce(p3.dia, p4.dia) 仓管员联系收件人响铃时长
    ,coalesce(p3.cal, p4.cal) 仓管员联系收件人通话时长
    ,if(am.pno is null, '否', '是' ) '是否产生“虚假错分”处罚'
    ,case am.state
        when 1 then '处罚'
        when 2 then '未审核'
        when 3 then '无需追责'
    end 处罚审核状态
    ,if(am.isdel = 1, '已删除', '未删除') 处罚删除状态
    ,case
        when am.state = 1 and am.isappeal = 1 then '未申诉'
        when am.state = 1 and am.isappeal > 1 then '已申诉'
    else null
    end 处罚申诉状态
from fle_staging.parcel_info pi
join t on t.pno = pi.pno
left join
    (
        select
            pr.pno
            ,pr.store_id
        from rot_pro.parcel_route pr
        join t on t.pno = pr.pno and t.store_id = pr.store_id
        where
            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
            and pr.routed_at < t.created_at
        group by 1,2
    ) scan on scan.pno = t.pno and scan.store_id = t.store_id
left join
    (
        select
            ppd.pno
            ,ppd.diff_marker_category
            ,ppd.staff_info_id
            ,ppd.store_id
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc) rk
        from fle_staging.parcel_problem_detail ppd
        join t on t.pno = ppd.pno and t.store_id = ppd.store_id
        where
            ppd.created_at < t.created_at
    ) ppd on ppd.store_id = t.store_id and ppd.pno = t.pno
left join tdm t2 on t2.pno = t.pno
left join pho1 p1 on p1.pno = t.pno and p1.cal_total > 0 and p1.rk1 = 1
left join pho1 p2 on p2.pno = t.pno and p2.cal_total = 0 and p2.rk2 = 1
left join pho2 p3 on p3.pno = t.pno and p3.cal_total > 0 and p3.rk1 = 1
left join pho2 p4 on p4.pno = t.pno and p4.cal_total = 0 and p4.rk2 = 1
left join bi_pro.abnormal_message am on am.pno = t.pno and am.punish_category = '53';
;-- -. . -..- - / . -. - .-. -.--
select
    min(plt.parcel_created_at)
from bi_pro.parcel_lose_task plt
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
where
    plt.state in (1,2,3,4)
    and plt.created_at >= '2023-01-01'
    and plt.source = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    min(plt.parcel_created_at)
from bi_pro.parcel_lose_task plt
# left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
# left join fle_staging.diff_info di on di.id = cdt.diff_info_id
# left join
where
    plt.state in (1,2,3,4)
    and plt.created_at >= '2023-01-01'
    and plt.source = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    min(plt.created_at)
from bi_pro.parcel_lose_task plt
# left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
# left join fle_staging.diff_info di on di.id = cdt.diff_info_id
# left join
where
    plt.state in (1,2,3,4)
    and plt.created_at >= '2023-01-01'
    and plt.source = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno
    ,plt.id 闪速任务ID
    ,if(t.id is null, '是', '否' ) 是否人工上报
    ,pi.customary_pno 原单号
    ,ss.name  上报网点
    ,plt.parcel_created_at 揽收时间
    ,case plt.last_valid_action
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end 最后有效操作路由
    ,plt.last_valid_staff_info_id 最后有效路由操作人ID
    ,hjt.job_name 最后有效路由操作人职位
    ,pi.cod_amount/100  COD金额
    ,concat_ws('*', pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 包裹尺寸
    ,pssn.arrived_at ‘到件入仓时间（目的地网点）’
    ,plt.created_at 闪速任务生成时间
from bi_pro.parcel_lose_task plt
left join tmpale.tmp_th_plt_id_0515 t on t.id = plt.id
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join fle_staging.customer_diff_ticket cdt on cdt.id = plt.source_id
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = plt.last_valid_staff_info_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
left join fle_staging.sys_store ss on ss.id = di.store_id
left join fle_staging.sys_store ss2 on ss2.id = plt.last_valid_store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = plt.pno and pssn.store_id = pi.dst_store_id
where
    plt.source = 1
    and plt.state not in (5,6)
    and plt.created_at >= '2023-01-01'
    and plt.created_at < curdate();
;-- -. . -..- - / . -. - .-. -.--
select
    date(convert_tz(ft.`created_at`,'+00:00','+07:00')) 日期
    ,ss.name 网点
    ,smr.staff_info_id 快递员
    ,ft.input_by 审核人员
    ,case ft.input_state
        when 0 then '未审核'
        when 1 then '审核中'
        when 2 then '通过'
        when 3 then '模糊'
        when 4 then '虚假'
        when 5 then '任务回收'
    end  审批状态
from `wrs_production`.`fuel_task` ft
left join backyard_pro.staff_mileage_record smr on smr.id = ft.smr_id
left join fle_staging.sys_store ss on ss.id = smr.store_id
where
    ft.`created_at` >= convert_tz(CURRENT_DATE-interval 7 day,'+07:00','+00:00');
;-- -. . -..- - / . -. - .-. -.--
select
    date(convert_tz(smr.`created_at`,'+00:00','+07:00')) 日期
    ,ss.name 网点
    ,smr.staff_info_id 快递员
    ,smr.input_by 审核人员
    ,case smr.input_state
        when 0 then '未审核'
        when 1 then '审核中'
        when 2 then '通过'
        when 3 then '模糊'
        when 4 then '虚假'
    end  审批状态
from  backyard_pro.staff_mileage_record smr
left join fle_staging.sys_store ss on ss.id = smr.store_id
where
    smr.`created_at` >= convert_tz(CURRENT_DATE-interval 7 day,'+07:00','+00:00');
;-- -. . -..- - / . -. - .-. -.--
select
    date(convert_tz(smr.`created_at`,'+00:00','+07:00')) 日期
    ,ss.name 网点
    ,smr.staff_info_id 快递员
    ,smr.input_by 审核人员
    ,case smr.input_state
        when 0 then '未审核'
        when 1 then '审核中'
        when 2 then '通过'
        when 3 then '模糊'
        when 4 then '虚假'
    end  审批状态
from  backyard_pro.staff_mileage_record smr
left join fle_staging.sys_store ss on ss.id = smr.store_id
where
#     smr.`created_at` >= convert_tz(CURRENT_DATE-interval 7 day,'+07:00','+00:00')
    smr.created_at >= '2023-05-02 17:00:00'
    and smr.created_at < '2023-05-12 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,pwr.after_weight
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.drds_parcel_weight_revise_record_d pwr on pwr.pno = fvp.relation_no
where
    fvp.proof_id = 'SAMQQ9A63';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,pwr.after_weight
    ,sum(pwr.id) over (partition by fvp.relation_no) num
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.drds_parcel_weight_revise_record_d pwr on pwr.pno = fvp.relation_no
where
    fvp.proof_id = 'SAMQQ9A63';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,pwr.after_weight
    ,count(pwr.id) over (partition by fvp.relation_no) num
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.drds_parcel_weight_revise_record_d pwr on pwr.pno = fvp.relation_no
where
    fvp.proof_id = 'SAMQQ9A63';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
     ,pwr.before_weight
    ,pwr.after_weight
    ,pwr.after_weight - pwr.before_weight chaju
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.drds_parcel_weight_revise_record_d pwr on pwr.pno = fvp.relation_no
where
    fvp.proof_id = 'SAMQQ9A63';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
        SELECT
        t.*
        from
        (
        SELECT
                di.pno
                ,pi.dst_phone
                ,count(di.pno)over(partition by pi.dst_phone) 拒收量
                ,pi2.总量
        from fle_staging.diff_info di
        left join fle_staging.parcel_info pi
        on di.pno=pi.pno
        left JOIN
        (
                select
                        pi.pno
                        ,pi.dst_phone
                        ,count(pi.pno)over(partition by pi.dst_phone) 总量
                from fle_staging.parcel_info pi
                where pi.created_at>=convert_tz('2023-04-30','+07:00','+00:00')
                group by 1,2
        )pi2 on pi.dst_phone= pi2.dst_phone
        where di.diff_marker_category=17
        and di.created_at>=convert_tz('2023-05-01','+07:00','+00:00')
        and pi2.总量 is not null
        group by 1,2
        )t where t.拒收量/t.总量>0.15
),
di AS
(
SELECT
        t.*
        ,di.created_at
from t
left join
(
        select
                di.pno
                ,max(di.created_at) created_at
        from fle_staging.diff_info di
        where di.created_at>=convert_tz('2023-05-01','+07:00','+00:00')
        and di.diff_marker_category=17
        group by 1
)di on t.pno=di.pno
)
SELECT
        di.pno
        ,convert_tz(di.created_at,'+00:00','+07:00') 最后一次标记时间
        ,pr.ct 最后一次标记拒收前电话次数
        ,pr.callduration '有效通话次数（>=15s）次数'
        ,pr.diaboloduration '响有效通话次数（>=15s）且铃时长为3s\2s\4s的通话次数'
from di
left join
(
        select
       pr.pno
       ,date(pr.routed_at) routed_at
       ,count(pr.diaboloduration)over(partition by pr.pno) ct
       ,count(if(pr.callduration >=15,pr.pno,null))over(partition by pr.pno,date(pr.routed_at)) callduration
       ,count(if(pr.callduration >=15 and pr.diaboloduration in (2,3,4),pr.pno,null))over(partition by pr.pno, date(pr.routed_at)) diaboloduration
    from
    (
                select
                pr.pno
                ,convert_tz(pr.routed_at,'+00:00','+07:00') routed_at
                ,json_extract(pr.extra_value,'$.callDuration') callduration
                ,json_extract(pr.extra_value,'$.diaboloDuration') diaboloduration
            from rot_pro.parcel_route pr
            left join di on di.pno=pr.pno
            where pr.route_action = 'PHONE'
            and pr.routed_at>='2023-04-20'
            and pr.routed_at<di.created_at
          -- and pr.pno='P13261HD7UQAB'
            group by 1,2
         )pr
)pr on di.pno=pr.pno
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with di as
(SELECT
        di.*
        /*,pr.ct
        -- ,convert_tz(cdt.updated_at,'+00:00','+08:00') 协商继续派送时间
        ,pr.callduration '有效通话次数（>=15s）'
    ,pr.diaboloduration '响有效通话次数（>=15s）且铃时长为3s\2s\4s的通话次数'*/
from
(
        select
                di.*
                ,pr.routed_at
                ,pr.remark
        from
        (
                select
                        di.pno
                        ,di.created_at
                        ,row_number()over(partition by di.pno order by di.created_at) rn
                from fle_staging.diff_info di
                left join fle_staging.customer_diff_ticket cdt
                on cdt.diff_info_id =di.id
                where di.diff_marker_category=17
                and cdt.negotiation_result_category=5
                -- and di.pno='P27151JVT29AC'
                and di.created_at>=convert_tz('2023-05-01','+08:00','+00:00')
        )di
        left join
        (
                select
                        pr.pno
                        ,pr.routed_at
                        ,pr.remark
                        ,json_extract(pr.extra_value,'$.deliveryAttemptNum') deliveryAttemptNum
                from rot_pro.parcel_route pr
                where pr.route_action ='DELIVERY_MARKER'
        )pr on di.pno=pr.pno
        where di.rn=1
        and pr.deliveryAttemptNum=1
        and pr.routed_at>di.created_at
)di
)
SELECT
di.pno
,convert_tz(di.created_at,'+00:00','+08:00') 提交疑难时间
,convert_tz(di.routed_at,'+00:00','+08:00') 二次派送失败时间
,di.remark 二次派送后标记原因
,pr.ct 继续派送后电话次数
,pr.callduration '有效通话次数（>=15s）次数'
,pr.diaboloduration '响有效通话次数（>=15s）且铃时长为3s\2s\4s的通话次数'
from di
left join
(
   select
   pr.pno
   ,date(pr.routed_at) routed_at
   ,count(pr.diaboloduration)over(partition by pr.pno) ct
   ,count(if(pr.callduration >=15,pr.pno,null))over(partition by pr.pno) callduration
   ,count(if(pr.callduration >=15 and pr.diaboloduration in (2,3,4),pr.pno,null))over(partition by pr.pno) diaboloduration
   from
   (
    select
        pr.pno
        ,convert_tz(pr.routed_at,'+00:00','+08:00') routed_at
        ,json_extract(pr.extra_value,'$.callDuration') callduration
        ,json_extract(pr.extra_value,'$.diaboloDuration') diaboloduration
    from rot_pro.parcel_route pr
    left join di on pr.pno=di.pno
    where pr.route_action = 'PHONE'
    and pr.routed_at>='2023-04-20'
    -- and pr.pno='P27151JVT29AC'
    and pr.routed_at>di.created_at
    and  pr.routed_at< di.routed_at
    group by 1,2
    )pr
)pr on pr.pno=di.pno
group by 1,2,3,4,5,6,7;
;-- -. . -..- - / . -. - .-. -.--
SELECT
        t.*
from
(
        SELECT
                di.pno
                ,pi2.dst_phone 收件人电话
                ,convert_tz(di.created_at,'+00:00','+08:00') 提交拒收时间
                ,pr.callduration '有效通话次数（>=15s）'
            ,pr.diaboloduration '响有效通话次数（>=15s）且铃时长为3s\2s\4s的通话次数'
            ,count(di.pno)over(partition by pi2.dst_phone) 拒收次数
        FROM fle_staging.diff_info di
        left join fle_staging.parcel_info pi2
        on di.pno =pi2.pno
        left join
        (
           select
           pr.pno
           ,date(pr.routed_at) routed_at
           ,count(if(pr.callduration >=15,pr.pno,null))over(partition by pr.pno,date(pr.routed_at)) callduration
           ,count(if(pr.callduration >=15 and pr.diaboloduration in (2,3,4),pr.pno,null))over(partition by pr.pno, date(pr.routed_at)) diaboloduration
           from
           (
            select
                pr.pno
                ,convert_tz(pr.routed_at,'+00:00','+08:00') routed_at
                ,json_extract(pr.extra_value,'$.callDuration') callduration
                ,json_extract(pr.extra_value,'$.diaboloDuration') diaboloduration
            from rot_pro.parcel_route pr
            where pr.route_action = 'PHONE'
            and pr.routed_at>='2023-04-20'
          -- and pr.pno='P13261HD7UQAB'
            group by 1,2
            )pr

        )pr on pr.pno=di.pno and date(convert_tz(di.created_at,'+00:00','+08:00'))=pr.routed_at

        where pi2.cod_enabled=1
        and di.diff_marker_category=17
        and di.created_at>=convert_tz('2023-05-01','+08:00','+00:00')
 -- and di.pno='P47211HMYR8AW'
        group by 1,2,3,4,5
)t where t.拒收次数>=3;
;-- -. . -..- - / . -. - .-. -.--
select * from tmpale.tmp_th_pno_0515;
;-- -. . -..- - / . -. - .-. -.--
select
    date(convert_tz(smr.`created_at`,'+00:00','+07:00')) 日期
    ,ss.name 网点
    ,smr.staff_info_id 快递员
    ,smr.input_by 审核人员
    ,case smr.input_state
        when 0 then '未审核'
        when 1 then '审核中'
        when 2 then '通过'
        when 3 then '模糊'
        when 4 then '虚假'
    end  审批状态
from  backyard_pro.staff_mileage_record smr
left join fle_staging.sys_store ss on ss.id = smr.store_id
where
#     smr.`created_at` >= convert_tz(CURRENT_DATE-interval 7 day,'+07:00','+00:00')
    smr.created_at >= '2023-05-14 17:00:00'
    and smr.created_at < '2023-05-21 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0522 t on t.pno = pi.pno
left join fle_staging.ka_profile kp on kp.id = pi.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id;
;-- -. . -..- - / . -. - .-. -.--
select
    oi.pno
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
from fle_staging.order_info oi
join tmpale.tmp_th_pno_lj_0522 t on t.pno = oi.pno
left join fle_staging.ka_profile kp on kp.id = oi.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = oi.client_id;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0522 t on t.pno = pi.pno
left join fle_staging.ka_profile kp on kp.id = pi.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id

union

select
    pi.recent_pno
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  客户类型
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_lj_0522 t on t.pno = pi.recent_pno
left join fle_staging.ka_profile kp on kp.id = pi.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id;
;-- -. . -..- - / . -. - .-. -.--
select
    dt.store_name 网点名称
    ,dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_type 网点类型
    ,if(dd.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,count(distinct coalesce(am.average_merge_key, am.average_merge_key)) 生成处罚总量
    ,count(distinct if(pssn.store_id in ('TH02030121', 'TH46010401', 'TH02030307') or pssn.store_category = 14, pssn.pno, null)) '揽件网点没有收件入仓但包裹发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pssn.store_id not in ('TH02030121', 'TH46010401', 'TH02030307') and  pssn.store_category != 14, pssn.pno, null)) '揽件网点没有收件入仓且未发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pi.dst_store_id = pi.ticket_pickup_store_id, pi.pno, null)) 自揽自派总量
    ,count(if(am.isappeal in (2,3,4,5), coalesce(am.average_merge_key, am.average_merge_key), null)) 网点申诉总量
from bi_pro.abnormal_message am
left join fle_staging.parcel_info pi on pi.pno = am.merge_column
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join dwm.dwd_th_network_spill_detl_rd dd on dd.统计日期 = am.abnormal_time and dd.网点ID = am.store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = am.merge_column and pssn.valid_store_order = 2
where
    am.punish_category = 39 -- 不揽收包裹未入仓
    and am.created_at >= '2023-04-19'
    and am.created_at < '2023-05-20'
group by 1,2,3,4,5;
;-- -. . -..- - / . -. - .-. -.--
select
    dt.store_name 网点名称
    ,dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_type 网点类型
    ,if(dd.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,count(distinct coalesce(am.average_merge_key, am.average_merge_key)) 生成处罚总量
    ,count(distinct if(pssn.store_id in ('TH02030121', 'TH46010401', 'TH02030307') or pssn.store_category = 14, pssn.pno, null)) '揽件网点没有收件入仓但包裹发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pssn.store_id not in ('TH02030121', 'TH46010401', 'TH02030307') and  pssn.store_category != 14, pssn.pno, null)) '揽件网点没有收件入仓且未发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pi.dst_store_id = pi.ticket_pickup_store_id, pi.pno, null)) 自揽自派总量
    ,count(distinct if(am.isappeal in (2,3,4,5), coalesce(am.average_merge_key, am.average_merge_key), null)) 网点申诉总量
from bi_pro.abnormal_message am
left join fle_staging.parcel_info pi on pi.pno = am.merge_column
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join dwm.dwd_th_network_spill_detl_rd dd on dd.统计日期 = am.abnormal_time and dd.网点ID = am.store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = am.merge_column and pssn.valid_store_order = 2
where
    am.punish_category = 39 -- 不揽收包裹未入仓
    and am.created_at >= '2023-04-19'
    and am.created_at < '2023-05-20'
group by 1,2,3,4,5;
;-- -. . -..- - / . -. - .-. -.--
select
    dt.store_name 网点名称
    ,dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_type 网点类型
    ,if(dd.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,count(distinct coalesce(am.average_merge_key, am.average_merge_key)) 生成处罚总量
    ,count(distinct if(pssn.store_id in ('TH02030121', 'TH46010401', 'TH02030307') or pssn.store_category = 14, pssn.pno, null)) '揽件网点没有收件入仓但包裹发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pssn.store_id not in ('TH02030121', 'TH46010401', 'TH02030307') and  pssn.store_category != 14, pssn.pno, null)) '揽件网点没有收件入仓且未发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pi.dst_store_id = pi.ticket_pickup_store_id, pi.pno, null)) 自揽自派总量
    ,count(distinct if(am.isappeal in (2,3,4,5), coalesce(am.average_merge_key, am.average_merge_key), null)) 网点申诉总量
    ,count(distinct if((am.state = 1 and am.isdel = 0, coalesce(am.average_merge_key, am.average_merge_key), null))) 实际处罚量
from bi_pro.abnormal_message am
left join fle_staging.parcel_info pi on pi.pno = am.merge_column
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join dwm.dwd_th_network_spill_detl_rd dd on dd.统计日期 = am.abnormal_time and dd.网点ID = am.store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = am.merge_column and pssn.valid_store_order = 2
where
    am.punish_category = 39 -- 不揽收包裹未入仓
    and am.created_at >= '2023-04-19'
    and am.created_at < '2023-05-20'
group by 1,2,3,4,5;
;-- -. . -..- - / . -. - .-. -.--
select
    dt.store_name 网点名称
    ,dt.region_name 大区
    ,dt.piece_name 片区
    ,dt.store_type 网点类型
    ,if(dd.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,count(distinct coalesce(am.average_merge_key, am.average_merge_key)) 生成处罚总量
    ,count(distinct if(pssn.store_id in ('TH02030121', 'TH46010401', 'TH02030307') or pssn.store_category = 14, pssn.pno, null)) '揽件网点没有收件入仓但包裹发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pssn.store_id not in ('TH02030121', 'TH46010401', 'TH02030307') and  pssn.store_category != 14, pssn.pno, null)) '揽件网点没有收件入仓且未发往BAG89、BAG88、BAG99、PDC总量'
    ,count(distinct if(pi.dst_store_id = pi.ticket_pickup_store_id, pi.pno, null)) 自揽自派总量
    ,count(distinct if(am.isappeal in (2,3,4,5), coalesce(am.average_merge_key, am.average_merge_key), null)) 网点申诉总量
    ,count(distinct if(am.state = 1 and am.isdel = 0, coalesce(am.average_merge_key, am.average_merge_key), null)) 实际处罚量
from bi_pro.abnormal_message am
left join fle_staging.parcel_info pi on pi.pno = am.merge_column
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join dwm.dwd_th_network_spill_detl_rd dd on dd.统计日期 = am.abnormal_time and dd.网点ID = am.store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = am.merge_column and pssn.valid_store_order = 2
where
    am.punish_category = 39 -- 不揽收包裹未入仓
    and am.created_at >= '2023-04-19'
    and am.created_at < '2023-05-20'
group by 1,2,3,4,5;
;-- -. . -..- - / . -. - .-. -.--
select
    dt.store_name
    ,am.merge_column
from bi_pro.abnormal_message am
left join fle_staging.parcel_info pi on pi.pno = am.merge_column
left join dwm.dim_th_sys_store_rd dt on dt.store_id = am.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join dwm.dwd_th_network_spill_detl_rd dd on dd.统计日期 = am.abnormal_time and dd.网点ID = am.store_id
left join dw_dmd.parcel_store_stage_new pssn on pssn.pno = am.merge_column and pssn.valid_store_order = 2
where
    am.punish_category = 39 -- 不揽收包裹未入仓
    and am.created_at >= '2023-04-19'
    and am.created_at < '2023-05-20'
    and dt.store_name in ('2LPW_BDC-ลาดพร้าว', '2LLK_BDC-ลำลูกกา', 'TMI_SP-ท่าไม้')
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select  * from tmpale.d_th_excelToJSON;
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,de.parcel_state_name 包裹当前状态
    ,de.last_store_name 包裹当前网点

from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
where
    fvp.proof_id = 'PETQWM527';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,de.parcel_state_name 包裹当前状态
    ,de.last_store_name 包裹当前网点
    ,pi.state
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
where
    fvp.proof_id = 'PETQWM527';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,de.parcel_state_name 包裹当前状态
    ,de.last_store_name 包裹当前网点
    ,pi.state
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'PETQWM527';
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,de.parcel_state_name 包裹当前状态
    ,de.last_store_name 包裹当前网点
    ,pi.state
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'PETQWM527'
    and fvp.relation_category = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,de.parcel_state_name 包裹当前状态
    ,de.parcel_state
    ,de.last_store_name 包裹当前网点
    ,pi.state
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'PETQWM527'
    and fvp.relation_category = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,de.last_store_name 包裹当前网点
    ,de.last_cn_route_action 最后一条有效路由
    ,de.last_route_time 最后一条有效路由时间
    ,de.last_cn_marker_category 最近一次派送失败原因
    ,de.last_inventory_at 最后一次盘库时间
    ,de.dst_routed_at 目的地网点第一次有效路由时间
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'PETQWM527'
    and fvp.relation_category = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,de.last_store_name 包裹当前网点
    ,de.last_cn_route_action 最后一条有效路由
    ,de.last_route_time 最后一条有效路由时间
    ,de.last_cn_marker_category 最近一次派送失败原因
    ,de.last_inventory_at 最后一次盘库时间
    ,de.dst_routed_at 目的地网点第一次有效路由时间
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'BKKOWZF63'
    and fvp.relation_category = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    fvp.relation_no
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,de.last_store_name 包裹当前网点
    ,de.last_cn_route_action 最后一条有效路由
    ,de.last_route_time 最后一条有效路由时间
    ,de.last_cn_marker_category 最近一次派送失败原因
    ,de.last_inventory_at 最后一次盘库时间
    ,de.dst_routed_at 目的地网点第一次有效路由时间
from fle_staging.fleet_van_proof_parcel_detail fvp
left join dwm.dwd_ex_th_parcel_details de on de.pno = fvp.relation_no
left join fle_staging.parcel_info pi on pi.recent_pno = fvp.recent_pno
where
    fvp.proof_id = 'BKKQWZF63'
    and fvp.relation_category = 1;
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno) num
from fle_staging.parcel_info pi
where
    pi.ticket_delivery_store_id in ('TH20040247','TH20040268','TH20040248')
    and pi.state = 5
    and pi.finished_at >= date_sub(curdate(), interval 3 month );
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno 单号
    ,pi.client_id 客户ID
    ,ss.name 揽收网点
    ,pi.exhibition_weight 揽收重量
    ,concat_ws('*', pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 揽收尺寸
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0529 t on t.pno = pi.pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    sci.pno
    ,sci.third_sorting_code
from dwm.drds_parcel_sorting_code_info sci
where
    sci.pno in ('TH01163Z321U1B1','THT01168SH8K0Z','THT01168JCBZ6Z','THT01168KH1V3Z','THT01168MMGQ0Z','THT01168G7AZ3Z','TH01163UDK146B0','TH01163YZSKJ3B0','TH01163YJXN05B0','TH011640X70B6B0','TH01163XX6QJ8B0','TH44113ZM9YY7H','TH011641T8K26B0','TH011641MCHR6B0','TH01163WCPTN9B0','THT011695SZF5Z','TH011641TC963B0','TH011641E6FW5B0','TH011641HUT08B0','TH011641ACGA7B0','TH01163ZACAE4B0','SSLT730008335006','THT01169ERA97Z','TH011641HQG02B0','TH011640XBF10B0','TH01163ZNAHK6B1','TH011641G4AF3B0','TH011640RTZ36B0','TH01163Z3X1C6B0','TH014440FU9Z3C','SSLT730007989946','THT01169BSST8Z','TH0116415HE72B0','TH011640XJYC5B0','THT011694NU44Z','TH01163Z4H946B0','TH011641F8X54B0','TH0116412DGJ4B0','THT011693H079Z','TH01163YU4SA2B0','TH0116410AEE2B0','THT0116944XR6Z','TH01163Z8AQ52B0','THT011693C138Z','TH01163U8AS92B1','TH01163V4P9B1B0','TH01163YPJJK1B0','TH01163YFXKU7B0','TH01163VVJEV9B0','TH01163VVG5Z8B0','TH01163W1Z2G0B0','TH01163XECHM9B0','TH01163XEMYM6B0','TH01163WJ3SE5B0','TH01163XPM448B0','TH01163X5R432B0','TH01163XKNPK6B0','TH01163WDM636B0','TH01163X1XU37B0','TH01163XKDJT1B0','TH01163YFNVM9B0','TH01163W1BWH9B0','TH01163TFSU52B0','TH01163YERXH0B0','TH01163ZYV9K2B0','TH01163Y4F6D1B0','TH01163X5CY06B0','TH01163V870R5B1','TH01163ZRNS77B0','TH011640SD2J2B0','TH01163ZSJ6A5B0','TH01163YGPGH9B0','TH01163XMGGD6B0','TH01163XHH8Z6B0','TH01163YK6DV0B0','TH011641A59K8B0','THT011692RHV2Z','TH011640MB5K0B0','TH011641FFXZ5B0','TH01163ZNYRR4B0','TH011641696Q8B0','TH01163YXHA96B0','TH011640ZUWK0B0','TH0116417Y4G6B0','TH011641UVPQ4B0','THT01168M6S30Z','TH01163ZU2009B0','TH0116412NCN2B0','THT011691FUY7Z','TH011640CS7T9B0','TH01163ZRX9P7B0','TH011640HNKB3B0','TH01163Z4Q9Y3B0','TH01163Y03VW4B0','TH011640B07U7B0','TH01163YY4Q26B0','TH011640XBR69B0','TH0116426S4S4B0','TH011640PXDH6B0','TH01163YJTZY2B0','TH011640TVZU2B0','TH011640JYYM4B0','THT011694KBF8Z','TH011640J6KM1B0','TH01163YK04S2B0','TH01163YAFFN1B0','TH011640VJTR6B0','TH01163ZREAK9B0','TH0116401T7A7B0','TH0116428EE16B0','THT01169CVMQ8Z','TH01163YGKDK4B0','TH01163VFVQC4B0','THT01169E7G27Z','THT01169JPCJ9Z','TH01164228NA7B0','TH01163ZVW7D0B0','THT01169AM808Z','TH011642TXUS2B0','THT011696VJM3Z','TH01163Z4EWR5B0','THT01169CH5H2Z','THT01169C2H82Z','TH01163ZFHPA6B0','TH011642M3HJ2B0','TH011642HSP27B0','TH011642HS7P5B0','TH01164269QN5B0','TH01163ZMSW42B0','TH014441F6TH6C','TH011642280Y2B0','TH01163ZZ4FK1B0','TH0116426Z1Z7B0','TH011641NAMW9B0','TH0116421XA09B0','TH01164292EJ0B0','TH0202427TB98A','TH011641SHSE2B0','TH01164293RY1B0','TH01163ZSXPT0B0','TH011641X3CF9B0','TH011641KFEP2B0','TH01163VT71R2B0','TH011642EYYR7B0','TH011641FTUK0B0','TH011641HRX92B0','TH01163Z49Q99B0','TH01163NA6864B0','THT011699E4P5Z','TH011641SQ2M6B0','TH0116415KV91B0','TH011641B7R16B0','TH0116419B5M5B0','TH011641R6NX2B0','TH01163ZGR9T1B0','TH01164213YJ4B0','THT01169617J0Z','TH0116411SNE2B0','TH011640WJQH1B0','TH011641B33Y0B0','TH011641RZ6D0B0','TH0116414MCT8B0','THT01169Y1HE6Z','TH011643NH6Z6B0','TH011640YSG47B1','TH0116436Q271B0','TH01163VUKT30B0','TH011642744Q5B0','THT01169KYFT3Z','TH0116425G4D4B0','TH0116439WQW7B0','TH011643B5SU1B0','TH011643D1WK0B0','TH011642XXJ00B0','TH011643C43V7B0','TH011642U32U0B0','TH011642SXT32B0','TH0116414Z417B0','TH01163Y3ERR3B0','TH01163Y6TZ62B0','TH01163WXE178B0','TH0116416GCT9B0','THT01169M06D7Z','TH011643BPY21B0','TH0116437G3M5B1','TH011642XZ343B0','TH01164093PE1B0','TH0116410VAA8A1','THT01169WR6B1Z','TH011642KNMY2B0','TH01164269567A0','TH01163ZADFQ4B0','TH011642ZTKJ4B0','THT01169JAPN9Z','TH01163Z2GD33B0','TH011642NVB14B0','TH011642VQFB9B0','TH020342BRYB6B0','TH011641Y33E8B0');
;-- -. . -..- - / . -. - .-. -.--
select
    sci.pno
    ,sci.third_sorting_code
    ,sci.sorting_code
from dwm.drds_parcel_sorting_code_info sci
where
    sci.pno in ('TH01163Z321U1B1','THT01168SH8K0Z','THT01168JCBZ6Z','THT01168KH1V3Z','THT01168MMGQ0Z','THT01168G7AZ3Z','TH01163UDK146B0','TH01163YZSKJ3B0','TH01163YJXN05B0','TH011640X70B6B0','TH01163XX6QJ8B0','TH44113ZM9YY7H','TH011641T8K26B0','TH011641MCHR6B0','TH01163WCPTN9B0','THT011695SZF5Z','TH011641TC963B0','TH011641E6FW5B0','TH011641HUT08B0','TH011641ACGA7B0','TH01163ZACAE4B0','SSLT730008335006','THT01169ERA97Z','TH011641HQG02B0','TH011640XBF10B0','TH01163ZNAHK6B1','TH011641G4AF3B0','TH011640RTZ36B0','TH01163Z3X1C6B0','TH014440FU9Z3C','SSLT730007989946','THT01169BSST8Z','TH0116415HE72B0','TH011640XJYC5B0','THT011694NU44Z','TH01163Z4H946B0','TH011641F8X54B0','TH0116412DGJ4B0','THT011693H079Z','TH01163YU4SA2B0','TH0116410AEE2B0','THT0116944XR6Z','TH01163Z8AQ52B0','THT011693C138Z','TH01163U8AS92B1','TH01163V4P9B1B0','TH01163YPJJK1B0','TH01163YFXKU7B0','TH01163VVJEV9B0','TH01163VVG5Z8B0','TH01163W1Z2G0B0','TH01163XECHM9B0','TH01163XEMYM6B0','TH01163WJ3SE5B0','TH01163XPM448B0','TH01163X5R432B0','TH01163XKNPK6B0','TH01163WDM636B0','TH01163X1XU37B0','TH01163XKDJT1B0','TH01163YFNVM9B0','TH01163W1BWH9B0','TH01163TFSU52B0','TH01163YERXH0B0','TH01163ZYV9K2B0','TH01163Y4F6D1B0','TH01163X5CY06B0','TH01163V870R5B1','TH01163ZRNS77B0','TH011640SD2J2B0','TH01163ZSJ6A5B0','TH01163YGPGH9B0','TH01163XMGGD6B0','TH01163XHH8Z6B0','TH01163YK6DV0B0','TH011641A59K8B0','THT011692RHV2Z','TH011640MB5K0B0','TH011641FFXZ5B0','TH01163ZNYRR4B0','TH011641696Q8B0','TH01163YXHA96B0','TH011640ZUWK0B0','TH0116417Y4G6B0','TH011641UVPQ4B0','THT01168M6S30Z','TH01163ZU2009B0','TH0116412NCN2B0','THT011691FUY7Z','TH011640CS7T9B0','TH01163ZRX9P7B0','TH011640HNKB3B0','TH01163Z4Q9Y3B0','TH01163Y03VW4B0','TH011640B07U7B0','TH01163YY4Q26B0','TH011640XBR69B0','TH0116426S4S4B0','TH011640PXDH6B0','TH01163YJTZY2B0','TH011640TVZU2B0','TH011640JYYM4B0','THT011694KBF8Z','TH011640J6KM1B0','TH01163YK04S2B0','TH01163YAFFN1B0','TH011640VJTR6B0','TH01163ZREAK9B0','TH0116401T7A7B0','TH0116428EE16B0','THT01169CVMQ8Z','TH01163YGKDK4B0','TH01163VFVQC4B0','THT01169E7G27Z','THT01169JPCJ9Z','TH01164228NA7B0','TH01163ZVW7D0B0','THT01169AM808Z','TH011642TXUS2B0','THT011696VJM3Z','TH01163Z4EWR5B0','THT01169CH5H2Z','THT01169C2H82Z','TH01163ZFHPA6B0','TH011642M3HJ2B0','TH011642HSP27B0','TH011642HS7P5B0','TH01164269QN5B0','TH01163ZMSW42B0','TH014441F6TH6C','TH011642280Y2B0','TH01163ZZ4FK1B0','TH0116426Z1Z7B0','TH011641NAMW9B0','TH0116421XA09B0','TH01164292EJ0B0','TH0202427TB98A','TH011641SHSE2B0','TH01164293RY1B0','TH01163ZSXPT0B0','TH011641X3CF9B0','TH011641KFEP2B0','TH01163VT71R2B0','TH011642EYYR7B0','TH011641FTUK0B0','TH011641HRX92B0','TH01163Z49Q99B0','TH01163NA6864B0','THT011699E4P5Z','TH011641SQ2M6B0','TH0116415KV91B0','TH011641B7R16B0','TH0116419B5M5B0','TH011641R6NX2B0','TH01163ZGR9T1B0','TH01164213YJ4B0','THT01169617J0Z','TH0116411SNE2B0','TH011640WJQH1B0','TH011641B33Y0B0','TH011641RZ6D0B0','TH0116414MCT8B0','THT01169Y1HE6Z','TH011643NH6Z6B0','TH011640YSG47B1','TH0116436Q271B0','TH01163VUKT30B0','TH011642744Q5B0','THT01169KYFT3Z','TH0116425G4D4B0','TH0116439WQW7B0','TH011643B5SU1B0','TH011643D1WK0B0','TH011642XXJ00B0','TH011643C43V7B0','TH011642U32U0B0','TH011642SXT32B0','TH0116414Z417B0','TH01163Y3ERR3B0','TH01163Y6TZ62B0','TH01163WXE178B0','TH0116416GCT9B0','THT01169M06D7Z','TH011643BPY21B0','TH0116437G3M5B1','TH011642XZ343B0','TH01164093PE1B0','TH0116410VAA8A1','THT01169WR6B1Z','TH011642KNMY2B0','TH01164269567A0','TH01163ZADFQ4B0','TH011642ZTKJ4B0','THT01169JAPN9Z','TH01163Z2GD33B0','TH011642NVB14B0','TH011642VQFB9B0','TH020342BRYB6B0','TH011641Y33E8B0');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,ss.name 退件网点
    ,case pi.state
        when '1' then '已揽收'
        when '2' then '运输中'
        when '3' then '派送中'
        when '4' then '已滞留'
        when '5' then '已签收'
        when '6' then '疑难件处理中'
        when '7' then '已退件'
        when '8' then '异常关闭'
        when '9' then '已撤销'
    end as `退件包裹状态`
    ,if(pi.state = 5, pi.finished_at, null) 退件妥投时间
    ,if(pi.state = 5, pi.ticket_delivery_staff_info_id, null) 妥投员工
    ,pi2.cod_amount/100 正向包裹COD金额
    ,pi2.client_id 客户ID
from fle_staging.parcel_info pi -- 退件单号
join tmpale.tmp_th_pno_0531 t on t.pno = pi.pno
left join fle_staging.parcel_info pi2 on pi2.pno = pi.customary_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,ss.name 退件网点
    ,case pi.state
        when '1' then '已揽收'
        when '2' then '运输中'
        when '3' then '派送中'
        when '4' then '已滞留'
        when '5' then '已签收'
        when '6' then '疑难件处理中'
        when '7' then '已退件'
        when '8' then '异常关闭'
        when '9' then '已撤销'
    end as `退件包裹状态`
    ,if(pi.state = 5, pi.finished_at, null) 退件妥投时间
    ,if(pi.state = 5, pi.ticket_delivery_staff_info_id, null) 妥投员工
    ,pi2.cod_amount/100 正向包裹COD金额
    ,pi2.client_id 客户ID
from fle_staging.parcel_info pi -- 退件单号
join tmpale.tmp_th_pno_0530 t on t.pno = pi.pno
left join fle_staging.parcel_info pi2 on pi2.pno = pi.customary_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    ss.name
    ,ss.id
from fle_staging.sys_store ss
where
    ss.id in ('TH20040247','TH20040268','TH20040248');
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,ss.name 退件网点
    ,case pi.state
        when '1' then '已揽收'
        when '2' then '运输中'
        when '3' then '派送中'
        when '4' then '已滞留'
        when '5' then '已签收'
        when '6' then '疑难件处理中'
        when '7' then '已退件'
        when '8' then '异常关闭'
        when '9' then '已撤销'
    end as `退件包裹状态`
    ,if(pi.state = 5, pi.finished_at, null) 退件妥投时间
    ,if(pi.state = 5, pi.ticket_delivery_staff_info_id, null) 妥投员工
    ,case
        when  hsi.`state`=1 and hsi.`wait_leave_state` =0 then '在职'
        when  hsi.`state`=1 and hsi.`wait_leave_state` =1 then '待离职'
        when hsi.`state` =2 then '离职'
        when hsi.`state` =3 then '停职'
    end 在职状态
    ,pi2.cod_amount/100 正向包裹COD金额
    ,pi2.client_id 客户ID
from fle_staging.parcel_info pi -- 退件单号
join tmpale.tmp_th_pno_0530 t on t.pno = pi.pno
left join fle_staging.parcel_info pi2 on pi2.pno = pi.customary_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_pickup_store_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pi.ticket_delivery_staff_info_id;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,if(pi.state = 5, ss.name, null) 退件妥投网点
    ,case pi.state
        when '1' then '已揽收'
        when '2' then '运输中'
        when '3' then '派送中'
        when '4' then '已滞留'
        when '5' then '已签收'
        when '6' then '疑难件处理中'
        when '7' then '已退件'
        when '8' then '异常关闭'
        when '9' then '已撤销'
    end as `退件包裹状态`
    ,if(pi.state = 5, pi.finished_at, null) 退件妥投时间
    ,if(pi.state = 5, pi.ticket_delivery_staff_info_id, null) 妥投员工
    ,case
        when  hsi.`state`=1 and hsi.`wait_leave_state` =0 then '在职'
        when  hsi.`state`=1 and hsi.`wait_leave_state` =1 then '待离职'
        when hsi.`state` =2 then '离职'
        when hsi.`state` =3 then '停职'
    end 在职状态
    ,pi2.cod_amount/100 正向包裹COD金额
    ,pi2.client_id 客户ID
from fle_staging.parcel_info pi -- 退件单号
join tmpale.tmp_th_pno_0530 t on t.pno = pi.pno
left join fle_staging.parcel_info pi2 on pi2.pno = pi.customary_pno
left join fle_staging.sys_store ss on ss.id = pi.ticket_delivery_store_id
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = pi.ticket_delivery_staff_info_id;
;-- -. . -..- - / . -. - .-. -.--
select
    di.diff_marker_category
    ,case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002), '自动处理', '人工处理') 处理方式
    ,di.created_at 创建时间
    ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
    ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,case  cdt.service_type
        when 1 then '总部客服'
        when 2 then 'miniCS客服'
        when 3 then 'FH客服'
    end  客服类型
    ,case cdt.hand_over_normal_cs_reason # 状态
        when 1 then '协商不一致'
        when 2 then '无法联系客户'
    end as 转交总部cs理由
    ,timestampdiff(hour, di.created_at, cdt.updated_at)/24 处理时效_天数
    ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
    and cdt.operator_id not in (10000,10003,10002);
;-- -. . -..- - / . -. - .-. -.--
select count(*) from
(
select
    di.diff_marker_category
    ,case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002), '自动处理', '人工处理') 处理方式
    ,di.created_at 创建时间
    ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
    ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,case  cdt.service_type
        when 1 then '总部客服'
        when 2 then 'miniCS客服'
        when 3 then 'FH客服'
    end  客服类型
    ,case cdt.hand_over_normal_cs_reason # 状态
        when 1 then '协商不一致'
        when 2 then '无法联系客户'
    end as 转交总部cs理由
    ,timestampdiff(hour, di.created_at, cdt.updated_at)/24 处理时效_天数
    ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
    and cdt.operator_id not in (10000,10003,10002)
);
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002,10003), '自动处理', '人工处理') 处理方式
#     ,di.created_at 创建时间
#     ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
    ,count(distinct di.id) 个数
#     ,cdt.first_operated_at 第一次处理时间
#     ,case
#         when 0 then '客服未处理'
#         when 1 then '已处理完毕'
#         when 2 then '正在沟通中'
#         when 3 then '财务驳回'
#         when 4 then '客户未处理'
#         when 5 then '转交闪速系统'
#         when 6 then '转交QAQC'
#     end as 处理状态
#     ,case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
#     ,case  cdt.service_type
#         when 1 then '总部客服'
#         when 2 then 'miniCS客服'
#         when 3 then 'FH客服'
#     end  客服类型
#     ,case cdt.hand_over_normal_cs_reason # 状态
#         when 1 then '协商不一致'
#         when 2 then '无法联系客户'
#     end as 转交总部cs理由
#     ,timestampdiff(hour, di.created_at, cdt.updated_at)/24 处理时效_天数
#     ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
#     and cdt.operator_id not in (10000,10003,10002)
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002,10003), '自动处理', '人工处理') 处理方式
#     ,di.created_at 创建时间
#     ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
    ,count(distinct di.id) 个数
#     ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
#     ,case  cdt.service_type
#         when 1 then '总部客服'
#         when 2 then 'miniCS客服'
#         when 3 then 'FH客服'
#     end  客服类型
#     ,case cdt.hand_over_normal_cs_reason # 状态
#         when 1 then '协商不一致'
#         when 2 then '无法联系客户'
#     end as 转交总部cs理由
#     ,timestampdiff(hour, di.created_at, cdt.updated_at)/24 处理时效_天数
#     ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
#     and cdt.operator_id not in (10000,10003,10002)
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and cdt.operator_id like '1000%'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002,10003), '自动处理', '人工处理') 处理方式
#     ,di.created_at 创建时间
#     ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
#     ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
#     ,case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
#     ,case  cdt.service_type
#         when 1 then '总部客服'
#         when 2 then 'miniCS客服'
#         when 3 then 'FH客服'
#     end  客服类型
#     ,case cdt.hand_over_normal_cs_reason # 状态
#         when 1 then '协商不一致'
#         when 2 then '无法联系客户'
#     end as 转交总部cs理由
    ,case
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 1  then '1小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 1 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 2 then '1-2小时'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 2 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 3 then '2-3小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 3 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 4 then '3-4小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 4 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 5 then '4-5小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 5 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 6 then '5-6小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 6 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 12 then '6-12小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 12 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 24 then '12-24小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 24 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 49 then '1-2天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 48 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 168 then '2-7天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 168  then '7天以上'
    end 处理时效
#     ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
    ,count(distinct di.id) 个数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
#     and cdt.operator_id not in (10000,10003,10002)
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002,10003), '自动处理', '人工处理') 处理方式
#     ,di.created_at 创建时间
#     ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
#     ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
#     ,case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
#     ,case  cdt.service_type
#         when 1 then '总部客服'
#         when 2 then 'miniCS客服'
#         when 3 then 'FH客服'
#     end  客服类型
#     ,case cdt.hand_over_normal_cs_reason # 状态
#         when 1 then '协商不一致'
#         when 2 then '无法联系客户'
#     end as 转交总部cs理由
    ,case
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 1  then '1小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 1 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 2 then '1-2小时'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 2 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 3 then '2-3小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 3 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 4 then '3-4小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 4 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 5 then '4-5小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 5 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 6 then '5-6小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 6 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 12 then '6-12小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 12 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 24 then '12-24小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 24 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 49 then '1-2天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 48 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 168 then '2-7天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 168  then '7天以上'
    end 处理时效
#     ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
    ,count(distinct di.id) 个数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
#     and cdt.operator_id not in (10000,10003,10002)
group by 1,2,3,4;
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,if(cdt.operator_id in (10000,10001,10002,10003), '自动处理', '人工处理') 处理方式
#     ,di.created_at 创建时间
#     ,cdt.updated_at 更新时间
    ,bc.client_name 客户名称
#     ,cdt.first_operated_at 第一次处理时间
    ,case
        when 0 then '客服未处理'
        when 1 then '已处理完毕'
        when 2 then '正在沟通中'
        when 3 then '财务驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end as 处理状态
#     ,case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
#     ,case  cdt.service_type
#         when 1 then '总部客服'
#         when 2 then 'miniCS客服'
#         when 3 then 'FH客服'
#     end  客服类型
#     ,case cdt.hand_over_normal_cs_reason # 状态
#         when 1 then '协商不一致'
#         when 2 then '无法联系客户'
#     end as 转交总部cs理由
    ,case
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 1  then '1小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 1 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 2 then '1-2小时'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 2 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 3 then '2-3小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 3 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 4 then '3-4小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 4 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 5 then '4-5小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 5 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 6 then '5-6小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 6 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 12 then '6-12小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 12 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 24 then '12-24小时内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 24 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 49 then '1-2天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 48 and timestampdiff(second , di.created_at, cdt.updated_at)/3600 <= 168 then '2-7天内'
        when timestampdiff(second , di.created_at, cdt.updated_at)/3600 > 168  then '7天以上'
    end 处理时效
#     ,timestampdiff(hour, di.created_at, cdt.first_operated_at)/24 第一次处理时效_天数
    ,count(distinct di.id) 个数
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on di.id = cdt.diff_info_id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and cdt.state = 1 -- 已处理
#     and cdt.operator_id not in (10000,10003,10002)
group by 1,2,3,4,5;
;-- -. . -..- - / . -. - .-. -.--
select
    pr.store_name
    ,count(distinct pr.pno) holding包裹数
from
    (
        select
            pr.pno
            ,pr.routed_at
            ,pr.store_id
            ,pr.store_name
        from rot_pro.parcel_route pr
        where
            pr.route_action = 'REFUND_CONFIRM'
            and pr.routed_at > '2023-04-30 17:00:00'
            and pr.routed_at < '2023-05-31 17:00:00'
    ) pr
# left join fle_staging.parcel_info pi on pi.pno = pr.pno
group by 1
order by 2 desc;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,if(floor(a.pickup_weight) = floor(a.double_weight), 0, 1) 是否跨公斤段
    ,if(abs(a.double_weight - a.pickup_weight) > 1, 1, 0) 是否超1kg以上
    ,if(abs(a.double_weight - a.pickup_weight) > 2, 1, 0) 是否超2kg以上
from
    (
        select
            pi.pno
            ,pi.weight/1000 pickup_weight
            ,pwr.after_weight double_weight
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
        left join
            (
                select
                    pwr.pno
                    ,pwr.after_weight
                    ,row_number() over (partition by pwr.pno order by pwr.created_at desc ) rk
                from dwm.drds_parcel_weight_revise_record_d pwr
                join tmpale.tmp_th_pno_0602 t on t.pno = pwr.pno
            ) pwr on pi.pno = pwr.pno and pwr.rk = 1
    ) a;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.pickup_weight 揽收重量
    ,a.double_weight 最后一次复称重量
    ,if(floor(a.pickup_weight) = floor(a.double_weight), 0, 1) 是否跨公斤段
    ,if(abs(a.double_weight - a.pickup_weight) > 1, 1, 0) 是否超1kg以上
    ,if(abs(a.double_weight - a.pickup_weight) > 2, 1, 0) 是否超2kg以上
from
    (
        select
            pi.pno
            ,pi.exhibition_weight/1000 pickup_weight
            ,pwr.after_weight double_weight
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
        left join
            (
                select
                    pwr.pno
                    ,pwr.after_weight
                    ,row_number() over (partition by pwr.pno order by pwr.created_at desc ) rk
                from dwm.drds_parcel_weight_revise_record_d pwr
                join tmpale.tmp_th_pno_0602 t on t.pno = pwr.pno
            ) pwr on pi.pno = pwr.pno and pwr.rk = 1
    ) a;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno
    ,a.pickup_weight 揽收重量
    ,a.double_weight 最后一次复称重量
    ,if(floor(a.pickup_weight) = floor(a.double_weight), 0, 1) 是否跨公斤段
    ,if(abs(a.double_weight - a.pickup_weight) > 1, 1, 0) 是否超1kg以上
    ,if(abs(a.double_weight - a.pickup_weight) > 2, 1, 0) 是否超2kg以上
from
    (
        select
            pi.pno
            ,pi.exhibition_weight/1000 pickup_weight
            ,pwr.after_weight/1000 double_weight
        from fle_staging.parcel_info pi
        join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
        left join
            (
                select
                    pwr.pno
                    ,pwr.after_weight
                    ,row_number() over (partition by pwr.pno order by pwr.created_at desc ) rk
                from dwm.drds_parcel_weight_revise_record_d pwr
                join tmpale.tmp_th_pno_0602 t on t.pno = pwr.pno
            ) pwr on pi.pno = pwr.pno and pwr.rk = 1
    ) a;
;-- -. . -..- - / . -. - .-. -.--
select
    count(distinct pi.pno)
from fle_staging.parcel_info pi
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
where
    pi.created_at >= '2023-03-31 17:00:00'
    and pi.created_at < '2023-04-30 17:00:00';
;-- -. . -..- - / . -. - .-. -.--
select
    count(distinct pi.pno)
from fle_staging.parcel_info pi
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id and bc.client_name = 'tiktok'
where
    pi.created_at >= '2023-03-31 17:00:00'
    and pi.created_at < '2023-04-30 17:00:00'
    and pi.returned = 0;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
where
   ( pi.exhibition_weight = 5000 and pi.exhibition_length = 20 and pi.exhibition_width = 20 and pi.exhibition_height = 20 )
    or ( pi.exhibition_weight = 10000 and pi.exhibition_length = 50 and pi.exhibition_width = 50 and pi.exhibition_height = 50);
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 尺寸
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
where
   ( pi.exhibition_weight = 5000 and pi.exhibition_length = 20 and pi.exhibition_width = 20 and pi.exhibition_height = 20 )
    or ( pi.exhibition_weight = 10000 and pi.exhibition_length = 50 and pi.exhibition_width = 50 and pi.exhibition_height = 50);
;-- -. . -..- - / . -. - .-. -.--
select
    case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难件原因
    ,bc.client_name
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
#     and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,di.pno
    ,di.id
#     ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
    and cdt.operator_id = '3331921';
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,ss.name

#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
#     and cdt.operator_id = '3331921'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,ss.name
    ,count(distinct  di.id) deal_num
#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
#     and cdt.operator_id = '3331921'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
select
#     cdt.operator_id
#     ,ss.name
    case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,count(distinct  di.id) deal_num
#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
#     and cdt.operator_id = '3331921'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,ss.name
    ,hjt.job_name
#     case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
    ,count(distinct  di.id) deal_num
#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 39 -- 多次尝试派送失败
    and cdt.operator_id not in (10000,10001,10002,10003)
#     and cdt.operator_id = '3331921'
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    di.pno

from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    cdt.operator_id = '68683';
;-- -. . -..- - / . -. - .-. -.--
select
    di.pno

from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    cdt.operator_id = '68683'
    and di.diff_marker_category = 39;
;-- -. . -..- - / . -. - .-. -.--
select
    di.pno
    ,di.id
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
where
    cdt.operator_id = '68683'
    and di.diff_marker_category = 39;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,ss.name
    ,hjt.job_name
#     case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
    ,count(distinct  di.id) deal_num
#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 17 --
    and cdt.operator_id not in (10000,10001,10002,10003)
#     and cdt.operator_id = '3331921'
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,ss.name
    ,hjt.job_name
#     case cdt.negotiation_result_category
#         when 1 then '赔偿'
#         when 2 then '关闭订单(不赔偿不退货)'
#         when 3 then '退货'
#         when 4 then '退货并赔偿'
#         when 5 then '继续配送'
#         when 6 then '继续配送并赔偿'
#         when 7 then '正在沟通中'
#         when 8 then '丢弃包裹的，换单后寄回BKK'
#         when 9 then '货物找回，继续派送'
#         when 10 then '改包裹状态'
#         when 11 then '需客户修改信息'
#         when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
#         when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
#     end as 协商结果
    ,count(distinct  di.id) deal_num
#     ,di.pno
#     ,di.id
    ,sum(timestampdiff(second , di.created_at, cdt.updated_at)/3600)/count(distinct di.id) 平均处理时长_小时
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = cdt.operator_id
left join fle_staging.sys_store ss on ss.id = hsi.sys_store_id
left join bi_pro.hr_job_title hjt on hjt.id = hsi.job_title
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 17
    and cdt.operator_id not in (10000,10001,10002,10003)
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,di.pno
    ,di.id
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,timestampdiff(second , di.created_at, cdt.updated_at)/3600 处理时长_h
    ,if(vrv.id is not null , 1, 0) 是否进入回访
    ,vrv.data_source 回访逻辑
    ,vrv.visit_num 回访次数
    ,vrv.visit_staff_id 回访员工
    ,timestampdiff(second , vrv.created_at, vrv.updated_at)/3600 回访时长_h
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join nl_production.violation_return_visit vrv on di.id = json_extract(vrv.extra_value, '$.diff_id');
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,di.pno
    ,di.id
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,timestampdiff(second , di.created_at, cdt.updated_at)/3600 处理时长_h
    ,if(vrv.id is not null , 1, 0) 是否进入回访
    ,vrv.data_source 回访逻辑
    ,vrv.visit_num 回访次数
    ,vrv.visit_staff_id 回访员工
    ,timestampdiff(second , vrv.created_at, vrv.updated_at)/3600 回访时长_h
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join nl_production.violation_return_visit vrv on di.id = json_extract(vrv.extra_value, '$.diff_id')
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 17;
;-- -. . -..- - / . -. - .-. -.--
select
    cdt.operator_id
    ,di.pno
    ,bc.client_name 客户平台
    ,case pi.returned
        when 1 then '退件'
        when 0 then '正向'
    end 方向
    ,di.id
    ,case cdt.negotiation_result_category
        when 1 then '赔偿'
        when 2 then '关闭订单(不赔偿不退货)'
        when 3 then '退货'
        when 4 then '退货并赔偿'
        when 5 then '继续配送'
        when 6 then '继续配送并赔偿'
        when 7 then '正在沟通中'
        when 8 then '丢弃包裹的，换单后寄回BKK'
        when 9 then '货物找回，继续派送'
        when 10 then '改包裹状态'
        when 11 then '需客户修改信息'
        when 12 then '丢弃并赔偿（包裹发到内部拍卖仓）'
        when 13 then 'TT退件新增“holding（15天后丢弃）”协商结果'
    end as 协商结果
    ,case cdt.organization_type
        when 1 then '网点'
        when 2 then sd.name
    end 处理机构
    ,ss.name 处理网点
    ,case cdt.user_ticket_state
        when 0 then '未启用客户处理'
        when 0 then '启用但未处理'
        when 0 then '启用且已处理'
    end 客户处理状态
    ,timestampdiff(second , di.created_at, cdt.updated_at)/3600 处理时长_h
    ,if(vrv.id is not null , 1, 0) 是否进入回访
    ,vrv.data_source 回访逻辑
    ,vrv.visit_num 回访次数
    ,vrv.visit_staff_id 回访员工
    ,timestampdiff(second , vrv.created_at, vrv.updated_at)/3600 回访时长_h
from fle_staging.diff_info di
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = cdt.client_id and bc.client_name in ('lazada', 'shopee', 'tiktok')
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join nl_production.violation_return_visit vrv on di.id = json_extract(vrv.extra_value, '$.diff_id')
left join bi_pro.sys_department sd on sd.id = cdt.organization_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
where
    di.created_at >= '2023-04-30 17:00:00'
    and di.created_at < '2023-05-31 17:00:00'
    and di.diff_marker_category = 17;
;-- -. . -..- - / . -. - .-. -.--
select
    acc.pno
    ,acc.abnormal_time
    ,acc.client_id
    ,kp.courier_id
    ,kp.store_id
    ,acc.store_id
    ,acc.channel_type
    ,acc.complaints_type
    ,acc.complaints_sub_type
from bi_pro.abnormal_customer_complaint acc
left join fle_staging.parcel_info pi2 on acc.pno = pi2.pno
left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.sys_store  as ss on ss.id = pi2.ticket_pickup_store_id
left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
where
    acc.ticket_type = 2 -- 派件
    and
        (
            if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
            or (kp.id is null and ss.category in (1,10,13,4,5,7))
        );
;-- -. . -..- - / . -. - .-. -.--
select
    acc.state
from bi_pro.abnormal_customer_complaint acc
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    pi.pno
    ,toi.shop_id seller_id
    ,toi.shop_name seller_name
    ,pi.exhibition_weight 重量
    ,concat_ws('*',pi.exhibition_length, pi.exhibition_width, pi.exhibition_height) 尺寸
from fle_staging.parcel_info pi
join tmpale.tmp_th_pno_0602 t on t.pno = pi.pno
left join dwm.drds_tiktok_order_info toi on toi.pno=pi.pno
where
   ( pi.exhibition_weight = 5000 and pi.exhibition_length = 20 and pi.exhibition_width = 20 and pi.exhibition_height = 20 )
    or ( pi.exhibition_weight = 10000 and pi.exhibition_length = 50 and pi.exhibition_width = 50 and pi.exhibition_height = 50);
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno '运单号/任务号'
    ,case a.ticket_type
        when 1 then '揽件'
        when 2 then '派件'
    end 揽派件类型
    ,a.abnormal_time 投诉日期
    ,a.client_id 客户ID
    ,ss.name 客户所属网点
    ,a.courier_id 客户所属快递员
    ,smr.name 客户所属大区
    ,ss2.name 被投诉网点
    ,case
        when a.`channel_type` =1 then 'APP揽件任务'
        when a.`channel_type` =2 then 'APP派件任务'
        when a.`channel_type` =3 then 'APP投诉'
        when a.`channel_type` =4 then '短信揽件投诉'
        when a.`channel_type` =5 then '短信派件投诉'
        when a.`channel_type` =6 then '短信妥投投诉'
        when a.`channel_type` =7 then 'MS问题记录本'
        when a.`channel_type` =8 then '新增处罚记录'
        when a.`channel_type` =9 then 'KA投诉'
        when a.`channel_type` =10 then '官网投诉'
        when a.`channel_type` =12 then 'BS问题记录本'
    end as '投诉渠道'
    ,case a.`complaints_type`
        when 6 then '服务态度类投诉 1级'
        when 2 then '虚假揽件改约时间/取消揽件任务 2级'
        when 1 then '虚假妥投 3级'
        when 3 then '派件虚假留仓件/问题件 4级'
        when 7 then '操作规范类投诉 5级'
        when 5 then '其他 6级'
        when 4 then '普通客诉 已弃用，仅供展示历史'
    end as 投诉大类
    ,case a.complaints_sub_type
        when 1 then '业务不熟练'
        when 2 then '虚假签收'
        when 3 then '以不礼貌的态度对待客户'
        when 4   then '揽/派件动作慢'
        when 5 then '未经客户同意投递他处'
        when 6   then '未经客户同意改约时间'
        when 7 then '不接客户电话'
        when 8   then '包裹丢失 没有数据'
        when 9 then '改约的时间和客户沟通的时间不一致'
        when 10   then '未提前电话联系客户'
        when 11   then '包裹破损 没有数据'
        when 12   then '未按照改约时间派件'
        when 13    then '未按订单带包装'
        when 14   then '不找零钱'
        when 15    then '客户通话记录内未看到员工电话'
        when 16    then '未经客户允许取消揽件任务'
        when 17   then '未给客户回执'
        when 18   then '拨打电话时间太短，客户来不及接电话'
        when 19   then '未经客户允许退件'
        when 20    then '没有上门'
        when 21    then '其他'
        when 22   then '未经客户同意改约揽件时间'
        when 23    then '改约的揽件时间和客户要求的时间不一致'
        when 24    then '没有按照改约时间揽件'
        when 25    then '揽件前未提前联系客户'
        when 26    then '答应客户揽件，但最终没有揽'
        when 27    then '很晚才打电话联系客户'
        when 28    then '货物多/体积大，因骑摩托而拒绝上门揽收'
        when 29    then '因为超过当日截单时间，要求客户取消'
        when 30    then '声称不是自己负责的区域，要求客户取消'
        when 31    then '拨打电话时间太短，客户来不及接电话'
        when 32    then '不接听客户回复的电话'
        when 33    then '答应客户今天上门，但最终没有揽收'
        when 34    then '没有上门揽件，也没有打电话联系客户'
        when 35    then '货物不属于超大件/违禁品'
        when 36    then '没有收到包裹，且快递员没有联系客户'
        when 37    then '快递员拒绝上门派送'
        when 38    then '快递员擅自将包裹放在门口或他处'
        when 39    then '快递员没有按约定的时间派送'
        when 40    then '代替客户签收包裹'
        when   41   then '快说话不礼貌/没有礼貌/不愿意服务'
        when 42    then '说话不礼貌/没有礼貌/不愿意服务'
        when   43    then '快递员抛包裹'
        when   44    then '报复/骚扰客户'
        when 45   then '快递员收错COD金额'
        when   46   then '虚假妥投'
        when   47    then '派件虚假留仓件/问题件'
        when 48   then '虚假揽件改约时间/取消揽件任务'
        when   49   then '抛客户包裹'
        when 50    then '录入客户信息不正确'
        when 51    then '送货前未电话联系'
        when 52    then '未在约定时间上门'
        when   53    then '上门前不电话联系'
        when   54    then '以不礼貌的态度对待客户'
        when   55    then '录入客户信息不正确'
        when   56    then '与客户发生肢体接触'
        when   57    then '辱骂客户'
        when   58    then '威胁客户'
        when   59    then '上门揽件慢'
        when   60    then '快递员拒绝上门揽件'
        when 61    then '未经客户同意标记收件人拒收'
        when 62    then '未按照系统地址送货导致收件人拒收'
        when 63 then '情况不属实，快递员虚假标记'
        when 64 then '情况不属实，快递员诱导客户改约时间'
        when 65 then '包裹长时间未派送'
        when 66 then '未经同意拒收包裹'
        when 67 then '已交费仍索要COD'
        when 68 then '投递时要求开箱'
        when 69 then '不当场扫描揽收'
        when 70 then '揽派件速度慢'
    end as 投诉原因
    ,case
        when a.isdel = 1 then '已删除'
        when a.state = 1 then '责任已认定'
        when a.state = 2 then '未处理'
        when a.state = 3 then '无需追责'
        when a.state = 5 then '重复投诉'
    end 状态
from
    (
        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.courier_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.parcel_info pi2 on acc.pno = pi2.pno
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.ticket_pickup_store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 2 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
        union all

        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.courier_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.ticket_pickup  pi2 on acc.pno = pi2.id
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 1 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
    ) a
left join fle_staging.sys_store ss on ss.id = a.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_store ss2 on ss2.id = a.duty_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
from
    (
        select
            fvp.proof_id
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(ss2.id) over (partition by fvp.proof_id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.proof_id) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
    ) a
where
    a.ss_num < a.pno_num;
;-- -. . -..- - / . -. - .-. -.--
select
            fvp.proof_id
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(ss2.id) over (partition by fvp.proof_id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.proof_id) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour );
;-- -. . -..- - / . -. - .-. -.--
select
            fvp.proof_id
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.proof_id, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.proof_id) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour );
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
from
    (
        select
            fvp.proof_id
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.proof_id, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.proof_id) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
    ) a
where
    a.ss_num < a.pno_num;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
from
    (
        select
            fvp.proof_id
            ,fvp.pack_no
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.pack_no, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.pack_no) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
    ) a
where
    a.ss_num < a.pno_num;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
from
    (
        select
            fvp.proof_id
            ,fvp.pack_no
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.pack_no, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.pack_no) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
            and fvp.pack_no is not null
    ) a
where
    a.ss_num < a.pno_num;
;-- -. . -..- - / . -. - .-. -.--
select
            fvp.proof_id
            ,fvp.pack_no
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.pack_no, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.pack_no) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 1
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
            and fvp.pack_no is not null;
;-- -. . -..- - / . -. - .-. -.--
select
            fvp.proof_id
            ,fvp.pack_no
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.pack_no, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.pack_no) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 3
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
            and fvp.pack_no is not null;
;-- -. . -..- - / . -. - .-. -.--
select
    a.*
from
    (
        select
            fvp.proof_id
            ,fvp.pack_no
            ,fvp.relation_no
            ,ss2.id
            ,ss2.name
            ,count(fvp.relation_no) over (partition by fvp.pack_no, ss2.id) ss_num
            ,count(fvp.relation_no) over (partition by fvp.pack_no) pno_num
        from fleet_van_proof_parcel_detail fvp
        left join fle_staging.parcel_info pi on pi.pno = fvp.relation_no
        left join fle_staging.sys_store ss on ss.id = pi.dst_store_id
        left join fle_staging.sys_store ss2 on ss2.id = if(ss.category in (8,12), ss.id, substring_index(ss.ancestry, '/', -1))
        where
            fvp.relation_category = 3
            and fvp.created_at < date_sub(curdate(), interval 7 hour )
            and fvp.created_at >= date_sub(curdate(), interval 31 hour )
            and fvp.pack_no is not null
    ) a
where
    a.ss_num < a.pno_num;
;-- -. . -..- - / . -. - .-. -.--
select * from tmpale.tmp_th_lost_client_new_retail;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno '运单号/任务号'
    ,case a.ticket_type
        when 1 then '揽件'
        when 2 then '派件'
    end 揽派件类型
    ,a.abnormal_time 投诉日期
    ,a.client_id 客户ID
    ,if(a.归属部门 = 'retail-Sales', a.staff_info_id, ss.name) '客户所属网点-工号'
    ,smr.name 客户所属大区
    ,ss2.name 被投诉网点
    ,case
        when a.`channel_type` =1 then 'APP揽件任务'
        when a.`channel_type` =2 then 'APP派件任务'
        when a.`channel_type` =3 then 'APP投诉'
        when a.`channel_type` =4 then '短信揽件投诉'
        when a.`channel_type` =5 then '短信派件投诉'
        when a.`channel_type` =6 then '短信妥投投诉'
        when a.`channel_type` =7 then 'MS问题记录本'
        when a.`channel_type` =8 then '新增处罚记录'
        when a.`channel_type` =9 then 'KA投诉'
        when a.`channel_type` =10 then '官网投诉'
        when a.`channel_type` =12 then 'BS问题记录本'
    end as '投诉渠道'
    ,case a.`complaints_type`
        when 6 then '服务态度类投诉 1级'
        when 2 then '虚假揽件改约时间/取消揽件任务 2级'
        when 1 then '虚假妥投 3级'
        when 3 then '派件虚假留仓件/问题件 4级'
        when 7 then '操作规范类投诉 5级'
        when 5 then '其他 6级'
        when 4 then '普通客诉 已弃用，仅供展示历史'
    end as 投诉大类
    ,case a.complaints_sub_type
        when 1 then '业务不熟练'
        when 2 then '虚假签收'
        when 3 then '以不礼貌的态度对待客户'
        when 4   then '揽/派件动作慢'
        when 5 then '未经客户同意投递他处'
        when 6   then '未经客户同意改约时间'
        when 7 then '不接客户电话'
        when 8   then '包裹丢失 没有数据'
        when 9 then '改约的时间和客户沟通的时间不一致'
        when 10   then '未提前电话联系客户'
        when 11   then '包裹破损 没有数据'
        when 12   then '未按照改约时间派件'
        when 13    then '未按订单带包装'
        when 14   then '不找零钱'
        when 15    then '客户通话记录内未看到员工电话'
        when 16    then '未经客户允许取消揽件任务'
        when 17   then '未给客户回执'
        when 18   then '拨打电话时间太短，客户来不及接电话'
        when 19   then '未经客户允许退件'
        when 20    then '没有上门'
        when 21    then '其他'
        when 22   then '未经客户同意改约揽件时间'
        when 23    then '改约的揽件时间和客户要求的时间不一致'
        when 24    then '没有按照改约时间揽件'
        when 25    then '揽件前未提前联系客户'
        when 26    then '答应客户揽件，但最终没有揽'
        when 27    then '很晚才打电话联系客户'
        when 28    then '货物多/体积大，因骑摩托而拒绝上门揽收'
        when 29    then '因为超过当日截单时间，要求客户取消'
        when 30    then '声称不是自己负责的区域，要求客户取消'
        when 31    then '拨打电话时间太短，客户来不及接电话'
        when 32    then '不接听客户回复的电话'
        when 33    then '答应客户今天上门，但最终没有揽收'
        when 34    then '没有上门揽件，也没有打电话联系客户'
        when 35    then '货物不属于超大件/违禁品'
        when 36    then '没有收到包裹，且快递员没有联系客户'
        when 37    then '快递员拒绝上门派送'
        when 38    then '快递员擅自将包裹放在门口或他处'
        when 39    then '快递员没有按约定的时间派送'
        when 40    then '代替客户签收包裹'
        when   41   then '快说话不礼貌/没有礼貌/不愿意服务'
        when 42    then '说话不礼貌/没有礼貌/不愿意服务'
        when   43    then '快递员抛包裹'
        when   44    then '报复/骚扰客户'
        when 45   then '快递员收错COD金额'
        when   46   then '虚假妥投'
        when   47    then '派件虚假留仓件/问题件'
        when 48   then '虚假揽件改约时间/取消揽件任务'
        when   49   then '抛客户包裹'
        when 50    then '录入客户信息不正确'
        when 51    then '送货前未电话联系'
        when 52    then '未在约定时间上门'
        when   53    then '上门前不电话联系'
        when   54    then '以不礼貌的态度对待客户'
        when   55    then '录入客户信息不正确'
        when   56    then '与客户发生肢体接触'
        when   57    then '辱骂客户'
        when   58    then '威胁客户'
        when   59    then '上门揽件慢'
        when   60    then '快递员拒绝上门揽件'
        when 61    then '未经客户同意标记收件人拒收'
        when 62    then '未按照系统地址送货导致收件人拒收'
        when 63 then '情况不属实，快递员虚假标记'
        when 64 then '情况不属实，快递员诱导客户改约时间'
        when 65 then '包裹长时间未派送'
        when 66 then '未经同意拒收包裹'
        when 67 then '已交费仍索要COD'
        when 68 then '投递时要求开箱'
        when 69 then '不当场扫描揽收'
        when 70 then '揽派件速度慢'
    end as 投诉原因
    ,case
        when a.isdel = 1 then '已删除'
        when a.state = 1 then '责任已认定'
        when a.state = 2 then '未处理'
        when a.state = 3 then '无需追责'
        when a.state = 5 then '重复投诉'
    end 状态

from
    (
        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.staff_info_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
            ,CASE
                  WHEN kp.id ='AA0622' THEN 'PMD-shein'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
                  when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
                  WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
                  WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
                  WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
                  WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
                  when ss.`category` in ('11') and kp.id is null THEN 'FFM'
                  else 'Other'
              end as '归属部门'
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.parcel_info pi2 on acc.pno = pi2.pno
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.ticket_pickup_store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join dwm.tmp_ex_big_clients_id_detail  bc on bc.client_id = pi2.client_id
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 2 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
            and bc.client_id is null

        union all

        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.staff_info_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
            ,CASE
                  WHEN kp.id ='AA0622' THEN 'PMD-shein'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
                  when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
                  WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
                  WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
                  WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
                  WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
                  when ss.`category` in ('11') and kp.id is null THEN 'FFM'
                  else 'Other'
            end as '归属部门'
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.ticket_pickup  pi2 on acc.pno = pi2.id
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi2.client_id
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 1 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
            and bc.client_id is null
    ) a
left join fle_staging.sys_store ss on ss.id = a.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_store ss2 on ss2.id = a.duty_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    a.pno '运单号/任务号'
    ,case a.ticket_type
        when 1 then '揽件'
        when 2 then '派件'
    end 揽派件类型
    ,a.abnormal_time 投诉日期
    ,a.client_id 客户ID
    ,if(a.归属部门 = 'retail-Sales', a.staff_info_id, ss.name) '客户所属网点-工号'
    ,a.归属部门
    ,smr.name 客户所属大区
    ,ss2.name 被投诉网点
    ,case
        when a.`channel_type` =1 then 'APP揽件任务'
        when a.`channel_type` =2 then 'APP派件任务'
        when a.`channel_type` =3 then 'APP投诉'
        when a.`channel_type` =4 then '短信揽件投诉'
        when a.`channel_type` =5 then '短信派件投诉'
        when a.`channel_type` =6 then '短信妥投投诉'
        when a.`channel_type` =7 then 'MS问题记录本'
        when a.`channel_type` =8 then '新增处罚记录'
        when a.`channel_type` =9 then 'KA投诉'
        when a.`channel_type` =10 then '官网投诉'
        when a.`channel_type` =12 then 'BS问题记录本'
    end as '投诉渠道'
    ,case a.`complaints_type`
        when 6 then '服务态度类投诉 1级'
        when 2 then '虚假揽件改约时间/取消揽件任务 2级'
        when 1 then '虚假妥投 3级'
        when 3 then '派件虚假留仓件/问题件 4级'
        when 7 then '操作规范类投诉 5级'
        when 5 then '其他 6级'
        when 4 then '普通客诉 已弃用，仅供展示历史'
    end as 投诉大类
    ,case a.complaints_sub_type
        when 1 then '业务不熟练'
        when 2 then '虚假签收'
        when 3 then '以不礼貌的态度对待客户'
        when 4   then '揽/派件动作慢'
        when 5 then '未经客户同意投递他处'
        when 6   then '未经客户同意改约时间'
        when 7 then '不接客户电话'
        when 8   then '包裹丢失 没有数据'
        when 9 then '改约的时间和客户沟通的时间不一致'
        when 10   then '未提前电话联系客户'
        when 11   then '包裹破损 没有数据'
        when 12   then '未按照改约时间派件'
        when 13    then '未按订单带包装'
        when 14   then '不找零钱'
        when 15    then '客户通话记录内未看到员工电话'
        when 16    then '未经客户允许取消揽件任务'
        when 17   then '未给客户回执'
        when 18   then '拨打电话时间太短，客户来不及接电话'
        when 19   then '未经客户允许退件'
        when 20    then '没有上门'
        when 21    then '其他'
        when 22   then '未经客户同意改约揽件时间'
        when 23    then '改约的揽件时间和客户要求的时间不一致'
        when 24    then '没有按照改约时间揽件'
        when 25    then '揽件前未提前联系客户'
        when 26    then '答应客户揽件，但最终没有揽'
        when 27    then '很晚才打电话联系客户'
        when 28    then '货物多/体积大，因骑摩托而拒绝上门揽收'
        when 29    then '因为超过当日截单时间，要求客户取消'
        when 30    then '声称不是自己负责的区域，要求客户取消'
        when 31    then '拨打电话时间太短，客户来不及接电话'
        when 32    then '不接听客户回复的电话'
        when 33    then '答应客户今天上门，但最终没有揽收'
        when 34    then '没有上门揽件，也没有打电话联系客户'
        when 35    then '货物不属于超大件/违禁品'
        when 36    then '没有收到包裹，且快递员没有联系客户'
        when 37    then '快递员拒绝上门派送'
        when 38    then '快递员擅自将包裹放在门口或他处'
        when 39    then '快递员没有按约定的时间派送'
        when 40    then '代替客户签收包裹'
        when   41   then '快说话不礼貌/没有礼貌/不愿意服务'
        when 42    then '说话不礼貌/没有礼貌/不愿意服务'
        when   43    then '快递员抛包裹'
        when   44    then '报复/骚扰客户'
        when 45   then '快递员收错COD金额'
        when   46   then '虚假妥投'
        when   47    then '派件虚假留仓件/问题件'
        when 48   then '虚假揽件改约时间/取消揽件任务'
        when   49   then '抛客户包裹'
        when 50    then '录入客户信息不正确'
        when 51    then '送货前未电话联系'
        when 52    then '未在约定时间上门'
        when   53    then '上门前不电话联系'
        when   54    then '以不礼貌的态度对待客户'
        when   55    then '录入客户信息不正确'
        when   56    then '与客户发生肢体接触'
        when   57    then '辱骂客户'
        when   58    then '威胁客户'
        when   59    then '上门揽件慢'
        when   60    then '快递员拒绝上门揽件'
        when 61    then '未经客户同意标记收件人拒收'
        when 62    then '未按照系统地址送货导致收件人拒收'
        when 63 then '情况不属实，快递员虚假标记'
        when 64 then '情况不属实，快递员诱导客户改约时间'
        when 65 then '包裹长时间未派送'
        when 66 then '未经同意拒收包裹'
        when 67 then '已交费仍索要COD'
        when 68 then '投递时要求开箱'
        when 69 then '不当场扫描揽收'
        when 70 then '揽派件速度慢'
    end as 投诉原因
    ,case
        when a.isdel = 1 then '已删除'
        when a.state = 1 then '责任已认定'
        when a.state = 2 then '未处理'
        when a.state = 3 then '无需追责'
        when a.state = 5 then '重复投诉'
    end 状态

from
    (
        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.staff_info_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
            ,CASE
                  WHEN kp.id ='AA0622' THEN 'PMD-shein'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
                  when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
                  WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
                  WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
                  WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
                  WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
                  when ss.`category` in ('11') and kp.id is null THEN 'FFM'
                  else 'Other'
              end as '归属部门'
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.parcel_info pi2 on acc.pno = pi2.pno
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.ticket_pickup_store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join dwm.tmp_ex_big_clients_id_detail  bc on bc.client_id = pi2.client_id
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 2 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
            and bc.client_id is null

        union all

        select
            acc.pno
            ,acc.ticket_type
            ,acc.abnormal_time
            ,acc.client_id
            ,kp.staff_info_id
            ,kp.store_id
            ,acc.store_id duty_store_id
            ,acc.channel_type
            ,acc.complaints_type
            ,acc.complaints_sub_type
            ,acc.state
            ,am.isdel
            ,CASE
                  WHEN kp.id ='AA0622' THEN 'PMD-shein'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
                  WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
                  when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
                  WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
                  WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
                  WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
                  WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
                  when ss.`category` in ('11') and kp.id is null THEN 'FFM'
                  else 'Other'
            end as '归属部门'
        from bi_pro.abnormal_customer_complaint acc
        left join bi_pro.abnormal_message am on am.id = acc.abnormal_message_id
        left join fle_staging.ticket_pickup  pi2 on acc.pno = pi2.id
        left join fle_staging.ka_profile  AS kp on kp.id = pi2.client_id
        left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
        left join fle_staging.sys_store  as ss on ss.id = pi2.store_id
        left join fle_staging.ka_profile kp3 on pi2.`agent_id`  =kp3.`id`
        left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi2.client_id
        left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
        where
            acc.ticket_type = 1 -- 派件
            and
                (
                    if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) in (4,34,40,13)
                    or (kp.id is null and ss.category in (1,10,13,4,5,7))
                ) -- retail
            and acc.abnormal_time >= '2023-06-04'
            and acc.abnormal_time <= '2023-06-05'
            and bc.client_id is null
    ) a
left join fle_staging.sys_store ss on ss.id = a.store_id
left join fle_staging.sys_manage_region smr on smr.id = ss.manage_region
left join fle_staging.sys_store ss2 on ss2.id = a.duty_store_id;
;-- -. . -..- - / . -. - .-. -.--
select
    a1.pno
    ,a1.staff_info_id 员工
    ,a1.pr_date 日期
    ,a1.ka_type 客户类型
    ,case a1.forceTakePhotoCategory
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
from
    (
        select
            a.pno
            ,a.forceTakePhotoCategory
            ,a.ka_type
            ,a.pr_date
            ,a.store_id
            ,a.staff_info_id
            ,a.routeExtraId
        from
            (
                select
                    pr.pno
                    ,pr.store_id
                    ,case
                        when bc.`client_id` is not null then bc.client_name
                        when kp.id is not null and bc.id is null then '普通ka'
                        when kp.`id` is null then '小c'
                    end as  ka_type
                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) pr_date
                    ,json_extract(pr.extra_value, '$.routeExtraId') routeExtraId
                    ,pr.staff_info_id
                    ,json_extract(pr.extra_value, '$.forceTakePhotoCategory') forceTakePhotoCategory
                    ,row_number() over (partition by pr.pno, date(convert_tz(pr.routed_at, '+00:00', '+07:00')) order by pr.routed_at ) rk
                from rot_pro.parcel_route pr
                left join fle_staging.parcel_info pi on pi.pno = pr.pno
                left join fle_staging.ka_profile kp on pi.client_id = kp.id
                left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
                # left join dwm.drds_parcel_route_extra dpr on dpr.id = json_extract(pr.extra_value, '$.routeExtraId')
                where
                    pr.route_action in ('TAKE_PHOTO')
                    and pr.routed_at > '2023-04-30 17:00:00'
                    and pr.routed_at < '2023-05-07 17:00:00'
            ) a
        where
            a.rk = 1
    ) a1
left join dwm.dwd_th_network_spill_detl_rd dt on dt.网点ID = a1.store_id and dt.统计日期 = a1.pr_date;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        plt.pno
        ,plt.updated_at
        ,plt.state
        ,plt.created_at
        ,plt.penalties
        ,case
            when bc.`client_id` is not null then bc.client_name
            when kp.id is not null and bc.id is null then '普通ka'
            when kp.`id` is null then '小c'
        end as  ka_type
#         ,plt.id
    from bi_pro.parcel_lose_task plt
    left join fle_staging.ka_profile kp on pi.client_id = kp.id
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    # left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
    where
        plt.created_at >= '2023-05-01'
        and plt.created_at < '2023-05-08'
        and plt.source = 12
)
select
    t1.pno
    ,t1.state
    ,case
        when t1.state = 6 and t1.penalties > 0 then 'L来源判责丢失'
        when t1.state = 6 and plt2.id is not null  then '其他来源判责丢失'
        when t1.state = 5 then '无须追责'
        else null
    end 分类
    ,t1.created_at 任务生成时间
    ,t1.ka_type 客户类型
    ,t1.updated_at 处理时间
from t t1
left join bi_pro.parcel_lose_task plt2 on plt2.pno = t1.pno and plt2.source not in (12) and plt2.state = 6 and plt2.penalties > 0;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        plt.pno
        ,plt.updated_at
        ,plt.state
        ,plt.created_at
        ,plt.penalties
        ,case
            when bc.`client_id` is not null then bc.client_name
            when kp.id is not null and bc.id is null then '普通ka'
            when kp.`id` is null then '小c'
        end as  ka_type
#         ,plt.id
    from bi_pro.parcel_lose_task plt
    left join fle_staging.ka_profile kp on plt.client_id = kp.id
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
    # left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
    where
        plt.created_at >= '2023-05-01'
        and plt.created_at < '2023-05-08'
        and plt.source = 12
)
select
    t1.pno
    ,t1.state
    ,case
        when t1.state = 6 and t1.penalties > 0 then 'L来源判责丢失'
        when t1.state = 6 and plt2.id is not null  then '其他来源判责丢失'
        when t1.state = 5 then '无须追责'
        else null
    end 分类
    ,t1.created_at 任务生成时间
    ,t1.ka_type 客户类型
    ,t1.updated_at 处理时间
from t t1
left join bi_pro.parcel_lose_task plt2 on plt2.pno = t1.pno and plt2.source not in (12) and plt2.state = 6 and plt2.penalties > 0;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno
from
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a1
left join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno
where
    a2.created_at > a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno
from
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
left join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno
from
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
left join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno
where
    a2.created_at > a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno
    ,a1.id
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
left join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno
    ,a1.id
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno 包裹
    ,a1.id 闪速任务ID
    ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno
where
    a2.created_at < a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno 包裹
    ,a1.id 闪速任务ID
    ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno
where
    a2.created_at > a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-08'
    and plt.source = 12
)
select
    a1.pno 包裹
    ,a1.id 闪速任务ID
    ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno
where
    a2.created_at > a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno 包裹
    ,a1.id 闪速任务ID
    ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
#     a1.pno 包裹
#     ,a1.id 闪速任务ID
#     ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
    a1.*
    ,a2.*
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.pno = a1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
#     a1.pno 包裹
#     ,a1.id 闪速任务ID
#     ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
    a1.*
    ,a2.*
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.id = a1.id;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,pcol.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-08'
    and plt.source = 12
)
select
    a1.pno 包裹
    ,a1.id 闪速任务ID
    ,timestampdiff(second, a1.created_at, a2.created_at)/3600 认定后无需追责时间_H
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 4
    ) a1
join
    (
        select
            t1.pno
            ,t1.id
            ,t1.created_at
            ,t1.action
        from t t1
        where
            t1.action = 3
    ) a2 on a2.id = a1.id
where
    a2.created_at > a1.created_at;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        plt.pno
        ,plt.updated_at
        ,plt.state
        ,plt.created_at
        ,plt.penalties
        ,case
            when bc.`client_id` is not null then bc.client_name
            when kp.id is not null and bc.id is null then '普通ka'
            when kp.`id` is null then '小c'
        end as  ka_type
#         ,plt.id
    from bi_pro.parcel_lose_task plt
    left join fle_staging.ka_profile kp on plt.client_id = kp.id
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
    # left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
    where
        plt.created_at >= '2023-05-01'
        and plt.created_at < '2023-05-08'
        and plt.source = 12
)
select
    t1.pno
    ,t1.state
    ,case
        when t1.state = 6 and t1.penalties > 0 then 'L来源判责丢失'
        when t1.state = 6 and plt2.id is not null  then '其他来源判责丢失'
        when plt2.id is null and t1.state = 5 then 'L来源被判无须追责'
        when t1.state = 5 then '无须追责'
        else null
    end 分类
    ,t1.created_at 任务生成时间
    ,t1.ka_type 客户类型
    ,t1.updated_at 处理时间
from t t1
left join bi_pro.parcel_lose_task plt2 on plt2.pno = t1.pno and plt2.source not in (12) and plt2.state = 6 and plt2.penalties > 0;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        plt.pno
        ,plt.updated_at
        ,plt.state
        ,plt.created_at
        ,plt.penalties
        ,case
            when bc.`client_id` is not null then bc.client_name
            when kp.id is not null and bc.id is null then '普通ka'
            when kp.`id` is null then '小c'
        end as  ka_type
#         ,plt.id
    from bi_pro.parcel_lose_task plt
    left join fle_staging.ka_profile kp on plt.client_id = kp.id
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
    # left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
    where
        plt.created_at >= '2023-05-01'
        and plt.created_at < '2023-05-08'
        and plt.source = 12
)
select
    t1.pno
    ,t1.state
    ,case
        when t1.state = 6 and t1.penalties > 0 then 'L来源判责丢失'
        when t1.state = 6 and plt2.id is not null  then '其他来源判责丢失'
        when plt3.id is null and t1.state = 5 then 'L来源被判无须追责'
        when t1.state = 5 then '无须追责'
        else null
    end 分类
    ,t1.created_at 任务生成时间
    ,t1.ka_type 客户类型
    ,t1.updated_at 处理时间
from t t1
left join bi_pro.parcel_lose_task plt2 on plt2.pno = t1.pno and plt2.source not in (12) and plt2.state = 6 and plt2.penalties > 0
left join bi_pro.parcel_lose_task plt3 on plt3.pno = t1.pno and plt3.source not in (12) and plt3.state = 5 and plt3.updated_at = t1.updated_at;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.state
        ,pi.ticket_pickup_store_id
        ,pi.returned
        ,pi.dst_store_id
        ,pi.client_id
        ,pi.cod_enabled
    from fle_staging.parcel_info pi
    where
        pi.created_at < '2023-05-31 16:00:00'
        and pi.state not in (5,7,8,9)
#         and pi.pno = 'P35231NPHV3BE'
)
select
    t1.pno
    ,if(t1.returned = 1, '退件', '正向件')  方向
    ,t1.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.client_id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as 客户类型
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 48 then '转交FH包裹留仓'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难原因
    ,case
        when t1.state = 6 and di.pno is not null then di.sh_do
        when t1.state = 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is null and pct.pno is not null then 'qaqc-TeamB'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then pr.store_name
        else de.last_store_name
    end 待处理节点
    ,case
        when t1.state = 6 and di.pno is not null then 'KAM/揽件网点未协商'
        when t1.state = 6 and di.pno is null  then '闪速系统沟通处理中'
        when t1.state != 6 and plt.pno is not null and plt2.pno is not null then '闪速系统沟通处理中'
        when plt.pno is null and pct.pno is not null then '闪速超时效理赔未完成'
        when de.last_store_id = t1.ticket_pickup_store_id and plt2.pno is null then '揽件未发出'
        when t1.dst_store_id = 'PH19040F05' and plt2.pno is null then '弃件未到拍卖仓'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then 'QAQC无须追责后长期无有效路由'
        else null
    end 卡点原因
    ,de.last_store_name 当前节点
    ,datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) 最后有效路由距今天数
#     ,de.last_cn_route_action 最新一条有效路由
    ,case pr.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,convert_tz(pr.routed_at ,'+00:00', '+08:00') 最新一条有效路由时间
    ,datediff(now(), de.dst_routed_at) 目的地网点停留时间
    ,de.dst_store 目的地网点
    ,de.src_store 揽收网点
    ,de.pickup_time 揽收时间
    ,de.pick_date 揽收日期
    ,if(hold.pno is not null, 'yes', 'no' ) 是否有holding标记
from t t1
left join fle_staging.ka_profile kp on t1.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t1.client_id
left join dwm.dwd_ex_th_parcel_details de on de.pno = t1.pno
left join
    (
        select
            plt.pno
            ,group_concat(ss.name ) should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
        left join fle_staging.sys_store ss on ss.id = wo.store_id
        where
            plt.state in (3)
            and wo.status in (1,2)
        group by 1

        union  all

        select
            plt.pno
            ,'QAQC' should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state in (1,2,4)
    ) plt on plt.pno = t1.pno
left join
    (
        select
            t2.pno
            ,cdt.negotiation_result_category
            ,di.diff_marker_category
            ,case
                when di.diff_marker_category in (20,21)  and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 0 then ss2.name
                WHEN di.diff_marker_category in (20,21) and cdt.vip_enable = 0 then ss2.name
            end sh_do
        from fle_staging.diff_info di
        join t t2 on t2.pno = di.pno
        join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
        left join bi_pro.parcel_lose_task plt on plt.source_id = cdt.id
        left join fle_staging.sys_store ss2 on ss2.id = t2.ticket_pickup_store_id
        where
            cdt.negotiation_result_category is null
    ) di on di.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.store_name
            ,pr.routed_at
            ,pr.route_action
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
        from  rot_pro.parcel_route pr
        join t t3 on t3.pno = pr.pno
        where
            pr.route_action in ('INVENTORY','RECEIVED' ,'RECEIVE_WAREHOUSE_SCAN', 'SORTING_SCAN', 'DELIVERY_TICKET_CREATION_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SHIPMENT_WAREHOUSE_SCAN', 'DETAIN_WAREHOUSE', 'DELIVERY_CONFIRM', 'DIFFICULTY_HANDOVER', 'DELIVERY_MARKER', 'REPLACE_PNO','SEAL', 'UNSEAL', 'STAFF_INFO_UPDATE_WEIGHT', 'STORE_KEEPER_UPDATE_WEIGHT', 'STORE_SORTER_UPDATE_WEIGHT', 'DISCARD_RETURN_BKK', 'DELIVERY_TRANSFER', 'PICKUP_RETURN_RECEIPT', 'FLASH_HOME_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SORTING_SCAN ', 'DELIVERY_PICKUP_STORE_SCAN', 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE', 'REFUND_CONFIRM', 'ACCEPT_PARCEL')
    ) pr on pr.pno = t1.pno and pr.rk = 1
left join
    (
        select
            plt.pno
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state = 5
            and plt.operator_id not in (10000,10001,10002)
        group by 1
    ) plt2 on plt2.pno = t1.pno
left join
    (
        select
            plt.pno
        from bi_pro.parcel_claim_task plt
        join t t4  on t4.pno = plt.pno
        where
            plt.state not in (6,7,8)
            and plt.source = 11
        group by 1
    ) pct on pct.pno = t1.pno
left join
    (
        select
            pr2.pno
        from rot_pro.parcel_route pr2
        join t t1 on t1.pno = pr2.pno
        where
            pr2.route_action = 'REFUND_CONFIRM'
        group by 1
    ) hold on hold.pno = t1.pno
group by t1.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    count(plt.id)
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-05-01'
    and plt.created_at < '2023-05-14'
    and plt.source = 2;
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno)
from fle_staging.parcel_info pi
where
    pi.created_at < '2023-01-01'
    and pi.state not in (5,7,8,9);
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno)
from fle_staging.parcel_info pi
where
    pi.created_at < '2023-01-01'
    and pi.state not in (5,7,8,9)
    and pi.created_at > '2022-01-01';
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno)
    ,min(pi.created_at)
from fle_staging.parcel_info pi
where
     pi.state not in (5,7,8,9)
    and pi.created_at >= '2022-01-01';
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno)
    ,min(pi.created_at)
from fle_staging.parcel_info pi
where
     pi.state not in (5,7,8,9)
    and pi.created_at >= '2023-01-01';
;-- -. . -..- - / . -. - .-. -.--
select
    count(pi.pno)
from fle_staging.parcel_info pi
where
    pi.created_at > '2023-02-28 17:00:00'
    and pi.created_at < '2023-06-04 17:00:00'
    and pi.state not in (5,7,8,9);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.returned
        ,pi.client_id
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_date
        ,pi.state
        ,pi.agent_id
        ,pi.ticket_pickup_store_id
        ,pi.dst_store_id
    from fle_staging.parcel_info pi
#     left join dwm.dwd_ex_th_parcel_details detpd
    where
        pi.created_at > '2023-02-28 17:00:00'
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state not in (5,7,8,9)
)
select
    t1.pno
    ,t1.pick_date 揽收日期
    ,if(t1.returned = 1, '退件', '正向') 包裹类型
    ,t1.client_id 客户ID
    ,datediff(curdate(), t1.pick_date) 揽收至今滞留天数
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,pr.CN_element 最新有效路由
    ,convert_tz(pr.routed_at, '+00:00', '+07:00')  最后有效路由时间
    ,datediff(curdate(),convert_tz(pr.routed_at, '+00:00', '+07:00')) 最后有效路由至今日期
    ,di.CN_element 问题件类型
    ,convert_tz(di.created_at, '+00:00', '+07:00') 最后一条问题件创建时间
    ,datediff(now(),convert_tz(di.created_at, '+00:00', '+07:00')) 问题件处理天数
    ,ppd.CN_element 最后一个留仓原因
    ,ss.name 揽收网点
    ,ss2.name 目的地网点
    ,CASE
          WHEN kp.id ='AA0622' THEN 'PMD-shein'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
          when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
          WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
          WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
          WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
          WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null THEN 'FFM'
          else 'Other'
      end as '归属部门'
from t t1
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join t t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t1.pno and pr.rk = 1
left join
     (
         select
             di.pno
            ,di.diff_marker_category
            ,ddd.CN_element
            ,di.created_at
            ,row_number() over (partition by di.pno order by di.created_at desc ) rk
         from fle_staging.diff_info di
         join t t1 on t1.pno = di.pno
         left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             di.state = 0
     ) di on di.pno = t1.pno and di.rk = 1
left join
     (
         select
             ppd.pno
            ,ppd.diff_marker_category
            ,ddd.CN_element
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc ) rk
         from fle_staging.parcel_problem_detail ppd
         join t t1 on t1.pno = ppd.pno
         left join dwm.dwd_dim_dict ddd on ppd.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             ppd.parcel_problem_type_category = 2
     ) ppd on ppd.pno = t1.pno and ppd.rk = 1
left join fle_staging.sys_store ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = t1.dst_store_id
left join fle_staging.ka_profile  AS kp on kp.id = t1.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.sys_store  as ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.ka_profile kp3 on t1.`agent_id`  = kp3.`id`;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.returned
        ,pi.client_id
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_date
        ,pi.state
        ,pi.agent_id
        ,pi.ticket_pickup_store_id
        ,pi.dst_store_id
    from fle_staging.parcel_info pi
#     left join dwm.dwd_ex_th_parcel_details detpd
    where
        pi.created_at > '2023-02-28 17:00:00'
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state not in (5,7,8,9)
)
select
    t1.pno
    ,t1.pick_date 揽收日期
    ,if(t1.returned = 1, '退件', '正向') 包裹类型
    ,t1.client_id 客户ID
    ,datediff(curdate(), t1.pick_date) 揽收至今滞留天数
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,pr.CN_element 最新有效路由
    ,convert_tz(pr.routed_at, '+00:00', '+07:00')  最后有效路由时间
    ,datediff(curdate(),convert_tz(pr.routed_at, '+00:00', '+07:00')) 最后有效路由至今日期
    ,di.CN_element 问题件类型
    ,convert_tz(di.created_at, '+00:00', '+07:00') 最后一条问题件创建时间
    ,datediff(now(),convert_tz(di.created_at, '+00:00', '+07:00')) 问题件处理天数
    ,ppd.CN_element 最后一个留仓原因
    ,ss.name 揽收网点
    ,ss2.name 目的地网点
    ,CASE
          WHEN kp.id ='AA0622' THEN 'PMD-shein'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
          when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
          WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
          WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
          WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
          WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null THEN 'FFM'
          else 'Other'
      end as '归属部门'
from t t1
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join t t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t1.pno and pr.rk = 1
left join
     (
         select
             di.pno
            ,di.diff_marker_category
            ,ddd.CN_element
            ,di.created_at
            ,row_number() over (partition by di.pno order by di.created_at desc ) rk
         from fle_staging.diff_info di
         join t t1 on t1.pno = di.pno
         left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             di.state = 0
     ) di on di.pno = t1.pno and di.rk = 1
left join
     (
         select
             ppd.pno
            ,ppd.diff_marker_category
            ,ddd.CN_element
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc ) rk
         from fle_staging.parcel_problem_detail ppd
         join t t1 on t1.pno = ppd.pno
         left join dwm.dwd_dim_dict ddd on ppd.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             ppd.parcel_problem_type_category = 2
     ) ppd on ppd.pno = t1.pno and ppd.rk = 1
left join fle_staging.sys_store ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = t1.dst_store_id
left join fle_staging.ka_profile  AS kp on kp.id = t1.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.sys_store  as ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.ka_profile kp3 on t1.`agent_id`  = kp3.`id`
left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101');
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.returned
        ,pi.client_id
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_date
        ,pi.state
        ,pi.agent_id
        ,pi.ticket_pickup_store_id
        ,pi.dst_store_id
    from fle_staging.parcel_info pi
#     left join dwm.dwd_ex_th_parcel_details detpd
    where
        pi.created_at > '2023-02-28 17:00:00'
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state not in (5,7,8,9)
)
select
    t1.pno
    ,t1.pick_date 揽收日期
    ,if(t1.returned = 1, '退件', '正向') 包裹类型
    ,t1.client_id 客户ID
    ,datediff(curdate(), t1.pick_date) 揽收至今滞留天数
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,pr.CN_element 最新有效路由
    ,convert_tz(pr.routed_at, '+00:00', '+07:00')  最后有效路由时间
    ,datediff(curdate(),convert_tz(pr.routed_at, '+00:00', '+07:00')) 最后有效路由至今日期
    ,di.CN_element 问题件类型
    ,convert_tz(di.created_at, '+00:00', '+07:00') 最后一条问题件创建时间
    ,datediff(now(),convert_tz(di.created_at, '+00:00', '+07:00')) 问题件处理天数
    ,ppd.CN_element 最后一个留仓原因
    ,ss.name 揽收网点
    ,ss2.name 目的地网点
    ,CASE
          WHEN kp.id ='AA0622' THEN 'PMD-shein'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
          when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
          WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
          WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
          WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
          WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null THEN 'FFM'
          else 'Other'
      end as '归属部门'
from t t1
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join t t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t1.pno and pr.rk = 1
left join
     (
         select
             di.pno
            ,di.diff_marker_category
            ,ddd.CN_element
            ,di.created_at
            ,row_number() over (partition by di.pno order by di.created_at desc ) rk
         from fle_staging.diff_info di
         join t t1 on t1.pno = di.pno
         left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             di.state = 0
     ) di on di.pno = t1.pno and di.rk = 1
left join
     (
         select
             ppd.pno
            ,ppd.diff_marker_category
            ,ddd.CN_element
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc ) rk
         from fle_staging.parcel_problem_detail ppd
         join t t1 on t1.pno = ppd.pno
         left join dwm.dwd_dim_dict ddd on ppd.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             ppd.parcel_problem_type_category = 2
     ) ppd on ppd.pno = t1.pno and ppd.rk = 1
left join fle_staging.sys_store ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = t1.dst_store_id
left join fle_staging.ka_profile  AS kp on kp.id = t1.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.ka_profile kp3 on t1.`agent_id`  = kp3.`id`
left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101');
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.state
        ,pi.ticket_pickup_store_id
        ,pi.returned
        ,pi.dst_store_id
        ,pi.client_id
        ,pi.cod_enabled
    from fle_staging.parcel_info pi
    where
        pi.created_at < '2023-05-31 17:00:00'
        and pi.state not in (5,7,8,9)
#         and pi.pno = 'P35231NPHV3BE'
)
select
    t1.pno
    ,if(t1.returned = 1, '退件', '正向件')  方向
    ,t1.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.client_id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as 客户类型
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 48 then '转交FH包裹留仓'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难原因
    ,case
        when t1.state = 6 and di.pno is not null then di.sh_do
        when t1.state = 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is null and pct.pno is not null then 'qaqc-TeamB'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then pr.store_name
        else de.last_store_name
    end 待处理节点
    ,case
        when t1.state = 6 and di.pno is not null then 'KAM/揽件网点未协商'
        when t1.state = 6 and di.pno is null  then '闪速系统沟通处理中'
        when t1.state != 6 and plt.pno is not null and plt2.pno is not null then '闪速系统沟通处理中'
        when plt.pno is null and pct.pno is not null then '闪速超时效理赔未完成'
        when de.last_store_id = t1.ticket_pickup_store_id and plt2.pno is null then '揽件未发出'
        when t1.dst_store_id = 'PH19040F05' and plt2.pno is null then '弃件未到拍卖仓'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then 'QAQC无须追责后长期无有效路由'
        else null
    end 卡点原因
    ,de.last_store_name 当前节点
    ,datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) 最后有效路由距今天数
#     ,de.last_cn_route_action 最新一条有效路由
    ,case pr.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,convert_tz(pr.routed_at ,'+00:00', '+08:00') 最新一条有效路由时间
    ,datediff(now(), de.dst_routed_at) 目的地网点停留时间
    ,de.dst_store 目的地网点
    ,de.src_store 揽收网点
    ,de.pickup_time 揽收时间
    ,de.pick_date 揽收日期
    ,if(hold.pno is not null, 'yes', 'no' ) 是否有holding标记
    ,if(plt2.pno is not null, 'yes', 'no') 是否人工无须追责过
    ,if(pr3.pno is not null, 'yes', 'no') 是否有待退件标记
from t t1
left join fle_staging.ka_profile kp on t1.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t1.client_id
left join dwm.dwd_ex_th_parcel_details de on de.pno = t1.pno
left join
    (
        select
            plt.pno
            ,group_concat(ss.name ) should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
        left join fle_staging.sys_store ss on ss.id = wo.store_id
        where
            plt.state in (3)
            and wo.status in (1,2)
        group by 1

        union  all

        select
            plt.pno
            ,'QAQC' should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state in (1,2,4)
    ) plt on plt.pno = t1.pno
left join
    (
        select
            t2.pno
            ,cdt.negotiation_result_category
            ,di.diff_marker_category
            ,case
                when di.diff_marker_category in (20,21)  and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 0 then ss2.name
                WHEN di.diff_marker_category in (20,21) and cdt.vip_enable = 0 then ss2.name
            end sh_do
        from fle_staging.diff_info di
        join t t2 on t2.pno = di.pno
        join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
        left join bi_pro.parcel_lose_task plt on plt.source_id = cdt.id
        left join fle_staging.sys_store ss2 on ss2.id = t2.ticket_pickup_store_id
        where
            cdt.negotiation_result_category is null
    ) di on di.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.store_name
            ,pr.routed_at
            ,pr.route_action
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
        from  rot_pro.parcel_route pr
        join t t3 on t3.pno = pr.pno
        where
            pr.route_action in ('INVENTORY','RECEIVED' ,'RECEIVE_WAREHOUSE_SCAN', 'SORTING_SCAN', 'DELIVERY_TICKET_CREATION_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SHIPMENT_WAREHOUSE_SCAN', 'DETAIN_WAREHOUSE', 'DELIVERY_CONFIRM', 'DIFFICULTY_HANDOVER', 'DELIVERY_MARKER', 'REPLACE_PNO','SEAL', 'UNSEAL', 'STAFF_INFO_UPDATE_WEIGHT', 'STORE_KEEPER_UPDATE_WEIGHT', 'STORE_SORTER_UPDATE_WEIGHT', 'DISCARD_RETURN_BKK', 'DELIVERY_TRANSFER', 'PICKUP_RETURN_RECEIPT', 'FLASH_HOME_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SORTING_SCAN ', 'DELIVERY_PICKUP_STORE_SCAN', 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE', 'REFUND_CONFIRM', 'ACCEPT_PARCEL')
    ) pr on pr.pno = t1.pno and pr.rk = 1
left join
    (
        select
            plt.pno
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state = 5
            and plt.operator_id not in (10000,10001,10002)
        group by 1
    ) plt2 on plt2.pno = t1.pno
left join
    (
        select
            plt.pno
        from bi_pro.parcel_claim_task plt
        join t t4  on t4.pno = plt.pno
        where
            plt.state not in (6,7,8)
            and plt.source = 11
        group by 1
    ) pct on pct.pno = t1.pno
left join
    (
        select
            pr2.pno
        from rot_pro.parcel_route pr2
        join t t1 on t1.pno = pr2.pno
        where
            pr2.route_action = 'REFUND_CONFIRM'
        group by 1
    ) hold on hold.pno = t1.pno
left join
    (
        select
            pr2.pno
        from  rot_pro.parcel_route pr2
        join t t1 on t1.pno = pr2.pno
        where
            pr2.route_action = 'PENDING_RETURN'
        group by 1
    ) pr3 on pr3.pno = t1.pno
group by t1.pno;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,if(cdt.service_type = 2 and cdt.state in (0,2,3,4), ss.name, null  ) 待处理网点
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,if(cdt.service_type = 2 and cdt.state in (0,2,3,4), ss.name, null  ) 待处理网点
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,ss.name 待处理网点
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
        ,ss2.name pick_store
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,case sdt.pending_handle_category
        when 1 then t.pick_store
        when 2 then cg.name
        when 3 then 'QAQC'
        when 4 then 'Retail'
    end 待处理人
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
        ,ss2.name pick_store
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,case
        when sdt.pending_handle_category =  1 and ss.category = 6 then 'FH'
        when sdt.pending_handle_category =  1 and ss.category in (8,12) then 'HUB'
        when sdt.pending_handle_category =  1 and ss.category in (7) then 'SHOP'
        when sdt.pending_handle_category =  1 and ss.category in (1,10,14) then 'NW'
        when sdt.pending_handle_category =  2 then cg.name
        when sdt.pending_handle_category =  3 then 'QAQC'
        when sdt.pending_handle_category =  4 then 'Retail'
    end 待处理部门
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
        ,ss2.name pick_store
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,case
        when sdt.pending_handle_category =  1 and ss.category = 6 then 'FH'
        when sdt.pending_handle_category =  1 and ss.category in (8,12) then 'HUB'
        when sdt.pending_handle_category =  1 and ss.category in (7,5) then 'SHOP'
        when sdt.pending_handle_category =  1 and ss.category in (1,10,14) then 'NW'
        when sdt.pending_handle_category =  2 then cg.name
        when sdt.pending_handle_category =  3 then 'QAQC'
        when sdt.pending_handle_category =  4 then 'Retail'
    end 待处理部门
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
        ,ss2.name pick_store
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,case
        when sdt.pending_handle_category =  1 and ss.category = 6 then 'FH'
        when sdt.pending_handle_category =  1 and ss.category in (8,12) then 'HUB'
        when sdt.pending_handle_category =  1 and ss.category in (7,5，4) then 'SHOP'
        when sdt.pending_handle_category =  1 and ss.category in (1,10,14) then 'NW'
        when sdt.pending_handle_category =  2 then cg.name
        when sdt.pending_handle_category =  3 then 'QAQC'
        when sdt.pending_handle_category =  4 then 'Retail'
    end 待处理部门
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(di.created_at, '+00:00', '+08:00'))%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 30 day ), interval 8 hour);
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 30 day ), interval 8 hour)
    and cdt.state in (0,2,3,4);
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 30 day ), interval 8 hour)
    and cdt.state in (0,2,3,4);
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= '2023-04-30 17:00:00'
    and cdt.created_at < '2023-06-26 17:00:00'
    and cdt.state in (0,2,3,4);
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
from fle_staging.customer_diff_ticket cdt
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= '2023-04-30 17:00:00'
    and cdt.created_at < '2023-06-26 17:00:00'
    and cdt.state in (0,2,3,4);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct coalesce(am.average_merge_key, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with  a as
(
    select
        di.pno
        ,di.id
        ,ddd.CN_element
        ,convert_tz(di.created_at, '+00:00', '+07:00') di_time
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_time
        ,pi.client_id
        ,ss2.name pick_store
    from fle_staging.diff_info di
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    where
        di.state = 0
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state = 6
)
select
    t.pno
    ,t.pick_time 揽收时间
    ,t.di_time 疑难件提交时间
    ,datediff(now(), t.pick_time) 揽收至今天数
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,t.CN_element 疑难原因
    ,datediff(now(), t.di_time) 问题件处理天数
    ,case sdt.pending_handle_category
        when 1 then '待揽收网点协商'
        when 2 then '待KAM问题件处理'
        when 3 then '待QAQC判责'
        when 4 then '待客户决定'
    end 待处理人
    ,case
        when sdt.pending_handle_category =  1 and ss.category = 6 then 'FH'
        when sdt.pending_handle_category =  1 and ss.category in (8,12) then 'HUB'
        when sdt.pending_handle_category =  1 and ss.category in (7,5,4) then 'SHOP'
        when sdt.pending_handle_category =  1 and ss.category in (1,10,14) then 'NW'
        when sdt.pending_handle_category =  2 then cg.name
        when sdt.pending_handle_category =  3 then 'QAQC'
        when sdt.pending_handle_category =  4 then 'Retail'
    end 待处理部门
    ,ss.name 待处理网点
    ,case ss.category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `待处理网点类型`
    ,t.client_id
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,cg.name 客服组
    ,case sdt.state
        when 0 then '处理中'
        when 1 then '未处理'
        when 2 then '已处理'
    end 处理状态
    ,datediff(now(), convert_tz(sdt.updated_at, '+00:00', '+07:00')) 当前状态至今天数
from a t
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join a t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t.pno and pr.rk = 1
left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = t.id
left join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = t.id
left join fle_staging.ka_profile kp on t.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t.client_id
left join fle_staging.sys_store ss on ss.id = cdt.organization_id
left join fle_staging.customer_group cg on cg.id = cdt.group_id;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.returned
        ,pi.client_id
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_date
        ,pi.state
        ,pi.agent_id
        ,pi.ticket_pickup_store_id
        ,pi.dst_store_id
    from fle_staging.parcel_info pi
#     left join dwm.dwd_ex_th_parcel_details detpd
    where
        pi.created_at > '2023-02-28 17:00:00'
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state not in (5,7,8,9)
)
select
    t1.pno
    ,t1.pick_date 揽收日期
    ,if(t1.returned = 1, '退件', '正向') 包裹类型
    ,t1.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.client_id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as 客户类型
    ,datediff(curdate(), t1.pick_date) 揽收至今滞留天数
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,pr.CN_element 最新有效路由
    ,convert_tz(pr.routed_at, '+00:00', '+07:00')  最后有效路由时间
    ,datediff(curdate(),convert_tz(pr.routed_at, '+00:00', '+07:00')) 最后有效路由至今日期
    ,di.CN_element 问题件类型
    ,convert_tz(di.created_at, '+00:00', '+07:00') 最后一条问题件创建时间
    ,datediff(now(),convert_tz(di.created_at, '+00:00', '+07:00')) 问题件处理天数
    ,ppd.CN_element 最后一个留仓原因
    ,ss.name 揽收网点
    ,ss2.name 目的地网点
    ,CASE
          WHEN kp.id ='AA0622' THEN 'PMD-shein'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
          when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
          WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
          WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
          WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
          WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null THEN 'FFM'
          else 'Other'
      end as '归属部门'
from t t1
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join t t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t1.pno and pr.rk = 1
left join
     (
         select
             di.pno
            ,di.diff_marker_category
            ,ddd.CN_element
            ,di.created_at
            ,row_number() over (partition by di.pno order by di.created_at desc ) rk
         from fle_staging.diff_info di
         join t t1 on t1.pno = di.pno
         left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             di.state = 0
     ) di on di.pno = t1.pno and di.rk = 1
left join
     (
         select
             ppd.pno
            ,ppd.diff_marker_category
            ,ddd.CN_element
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc ) rk
         from fle_staging.parcel_problem_detail ppd
         join t t1 on t1.pno = ppd.pno
         left join dwm.dwd_dim_dict ddd on ppd.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             ppd.parcel_problem_type_category = 2
     ) ppd on ppd.pno = t1.pno and ppd.rk = 1
left join fle_staging.sys_store ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = t1.dst_store_id
left join fle_staging.ka_profile  AS kp on kp.id = t1.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.ka_profile kp3 on t1.`agent_id`  = kp3.`id`
left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t1.client_id;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.returned
        ,pi.client_id
        ,convert_tz(pi.created_at, '+00:00', '+07:00') pick_date
        ,pi.state
        ,pi.agent_id
        ,pi.ticket_pickup_store_id
        ,pi.dst_store_id
    from fle_staging.parcel_info pi
#     left join dwm.dwd_ex_th_parcel_details detpd
    where
        pi.created_at > '2023-02-28 17:00:00'
        and pi.created_at < '2023-06-04 17:00:00'
        and pi.state not in (5,6,7,8,9)
)
select
    t1.pno
    ,t1.pick_date 揽收日期
    ,if(t1.returned = 1, '退件', '正向') 包裹类型
    ,t1.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.client_id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as 客户类型
    ,datediff(curdate(), t1.pick_date) 揽收至今滞留天数
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,pr.store_name 当前滞留网点
    ,case pr.store_category
      when '1' then 'SP'
      when '2' then 'DC'
      when '4' then 'SHOP'
      when '5' then 'SHOP'
      when '6' then 'FH'
      when '7' then 'SHOP'
      when '8' then 'Hub'
      when '9' then 'Onsite'
      when '10' then 'BDC'
      when '11' then 'fulfillment'
      when '12' then 'B-HUB'
      when '13' then 'CDC'
      when '14' then 'PDC'
    end `当前网点类型`
    ,pr.CN_element 最新有效路由
    ,convert_tz(pr.routed_at, '+00:00', '+07:00')  最后有效路由时间
    ,datediff(curdate(),convert_tz(pr.routed_at, '+00:00', '+07:00')) 最后有效路由至今日期
    ,di.CN_element 问题件类型
    ,convert_tz(di.created_at, '+00:00', '+07:00') 最后一条问题件创建时间
    ,datediff(now(),convert_tz(di.created_at, '+00:00', '+07:00')) 问题件处理天数
    ,ppd.CN_element 最后一个留仓原因
    ,ss.name 揽收网点
    ,ss2.name 目的地网点
    ,cg.name 'KAM-VIP客服组'
    ,case
        when pr.store_category in (8,12) then 'HUB'
        when pr.store_category in (4,5,7) then 'SHOP'
        when pr.store_category in (1,10,14) then 'NW'
        when pr.store_category in (6) then 'FH'
    end 待处理部门
    ,CASE
          WHEN kp.id ='AA0622' THEN 'PMD-shein'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' THEN 'FFM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' AND if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' THEN 'KAM'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' THEN 'retail-Network'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' THEN 'retail-Bulky'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` IN ('1098','1099','1100','1101') THEN 'retail-Sales'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' THEN 'retail-shop'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' THEN 'Customer Service'
          WHEN if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' THEN 'Bulky Business Development'
          when kp3.`agent_category`= '3'  AND kp3.department_id= '388' and kp.id is null THEN 'KAM'
          WHEN ss.`category` = '1' and kp.id is null THEN 'retail-Network-c'
          WHEN ss.`category` in ('10','13') and kp.id is null THEN 'retail-Bulky-c'
          WHEN ss.`category` = '6'  and kp.id is null THEN 'FH'
          WHEN ss.`category` IN ('4','5','7') and kp.id is null THEN 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null THEN 'FFM'
          else 'Other'
      end as '归属部门'
from t t1
left join
     (
         select
             pr.pno
            ,pr.store_id
            ,pr.store_name
            ,pr.store_category
            ,ddd.CN_element
            ,pr.routed_at
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
         from rot_pro.parcel_route pr
         join t t1 on t1.pno = pr.pno
         join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.remark = 'valid'
     ) pr on pr.pno = t1.pno and pr.rk = 1
left join
     (
         select
             di.pno
            ,di.diff_marker_category
            ,ddd.CN_element
            ,di.created_at
            ,row_number() over (partition by di.pno order by di.created_at desc ) rk
         from fle_staging.diff_info di
         join t t1 on t1.pno = di.pno
         left join dwm.dwd_dim_dict ddd on di.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             di.state = 0
     ) di on di.pno = t1.pno and di.rk = 1
left join
     (
         select
             ppd.pno
            ,ppd.diff_marker_category
            ,ddd.CN_element
            ,row_number() over (partition by ppd.pno order by ppd.created_at desc ) rk
         from fle_staging.parcel_problem_detail ppd
         join t t1 on t1.pno = ppd.pno
         left join dwm.dwd_dim_dict ddd on ppd.diff_marker_category = ddd.element and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
         where
             ppd.parcel_problem_type_category = 2
     ) ppd on ppd.pno = t1.pno and ppd.rk = 1
left join fle_staging.sys_store ss on ss.id = t1.ticket_pickup_store_id
left join fle_staging.sys_store ss2 on ss2.id = t1.dst_store_id
left join fle_staging.ka_profile  AS kp on kp.id = t1.client_id
left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
left join fle_staging.ka_profile kp3 on t1.`agent_id`  = kp3.`id`
left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t1.client_id
left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = t1.client_id
left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id;
;-- -. . -..- - / . -. - .-. -.--
select
    ddd.element
from dwm.dwd_dim_dict ddd
where
    ddd.remark = 'valid';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pi.pno
        ,pi.state
        ,pi.ticket_pickup_store_id
        ,pi.returned
        ,pi.dst_store_id
        ,pi.client_id
        ,pi.cod_enabled
    from fle_staging.parcel_info pi
    where
        pi.created_at < '2023-06-06 17:00:00'
        and pi.state not in (5,7,8,9)
#         and pi.pno = 'P35231NPHV3BE'
)
select
    t1.pno
    ,if(t1.returned = 1, '退件', '正向件')  方向
    ,t1.client_id 客户ID
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.client_id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as 客户类型
    ,case t1.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case di.diff_marker_category # 疑难原因
        when 1 then '客户不在家/电话无人接听'
        when 2 then '收件人拒收'
        when 3 then '快件分错网点'
        when 4 then '外包装破损'
        when 5 then '货物破损'
        when 6 then '货物短少'
        when 7 then '货物丢失'
        when 8 then '电话联系不上'
        when 9 then '客户改约时间'
        when 10 then '客户不在'
        when 11 then '客户取消任务'
        when 12 then '无人签收'
        when 13 then '客户周末或假期不收货'
        when 14 then '客户改约时间'
        when 15 then '当日运力不足，无法派送'
        when 16 then '联系不上收件人'
        when 17 then '收件人拒收'
        when 18 then '快件分错网点'
        when 19 then '外包装破损'
        when 20 then '货物破损'
        when 21 then '货物短少'
        when 22 then '货物丢失'
        when 23 then '收件人/地址不清晰或不正确'
        when 24 then '收件地址已废弃或不存在'
        when 25 then '收件人电话号码错误'
        when 26 then 'cod金额不正确'
        when 27 then '无实际包裹'
        when 28 then '已妥投未交接'
        when 29 then '收件人电话号码是空号'
        when 30 then '快件分错网点-地址正确'
        when 31 then '快件分错网点-地址错误'
        when 32 then '禁运品'
        when 33 then '严重破损（丢弃）'
        when 34 then '退件两次尝试派送失败'
        when 35 then '不能打开locker'
        when 36 then 'locker不能使用'
        when 37 then '该地址找不到lockerstation'
        when 38 then '一票多件'
        when 39 then '多次尝试派件失败'
        when 40 then '客户不在家/电话无人接听'
        when 41 then '错过班车时间'
        when 42 then '目的地是偏远地区,留仓待次日派送'
        when 43 then '目的地是岛屿,留仓待次日派送'
        when 44 then '企业/机构当天已下班'
        when 45 then '子母件包裹未全部到达网点'
        when 46 then '不可抗力原因留仓(台风)'
        when 47 then '虚假包裹'
        when 48 then '转交FH包裹留仓'
        when 50 then '客户取消寄件'
        when 51 then '信息录入错误'
        when 52 then '客户取消寄件'
        when 53 then 'lazada仓库拒收'
        when 69 then '禁运品'
        when 70 then '客户改约时间'
        when 71 then '当日运力不足，无法派送'
        when 72 then '客户周末或假期不收货'
        when 73 then '收件人/地址不清晰或不正确'
        when 74 then '收件地址已废弃或不存在'
        when 75 then '收件人电话号码错误'
        when 76 then 'cod金额不正确'
        when 77 then '企业/机构当天已下班'
        when 78 then '收件人电话号码是空号'
        when 79 then '快件分错网点-地址错误'
        when 80 then '客户取消任务'
        when 81 then '重复下单'
        when 82 then '已完成揽件'
        when 83 then '联系不上客户'
        when 84 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 85 then '寄件人电话号码是空号'
        when 86 then '包裹不符合揽收条件超大件'
        when 87 then '包裹不符合揽收条件违禁品'
        when 88 then '寄件人地址为岛屿'
        when 89 then '运力短缺，跟客户协商推迟揽收'
        when 90 then '包裹未准备好推迟揽收'
        when 91 then '包裹包装不符合运输标准'
        when 92 then '客户提供的清单里没有此包裹'
        when 93 then '包裹不符合揽收条件（超大件、违禁物品）'
        when 94 then '客户取消寄件/客户实际不想寄此包裹'
        when 95 then '车辆/人力短缺推迟揽收'
        when 96 then '遗漏揽收(已停用)'
        when 97 then '子母件(一个单号多个包裹)'
        when 98 then '地址错误addresserror'
        when 99 then '包裹不符合揽收条件：超大件'
        when 100 then '包裹不符合揽收条件：违禁品'
        when 101 then '包裹包装不符合运输标准'
        when 102 then '包裹未准备好'
        when 103 then '运力短缺，跟客户协商推迟揽收'
        when 104 then '子母件(一个单号多个包裹)'
        when 105 then '破损包裹'
        when 106 then '空包裹'
        when 107 then '不能打开locker(密码错误)'
        when 108 then 'locker不能使用'
        when 109 then 'locker找不到'
        when 110 then '运单号与实际包裹的单号不一致'
        when 111 then 'box客户取消任务'
        when 112 then '不能打开locker(密码错误)'
        when 113 then 'locker不能使用'
        when 114 then 'locker找不到'
        when 115 then '实际重量尺寸大于客户下单的重量尺寸'
        when 116 then '客户仓库关闭'
        when 117 then '客户仓库关闭'
        when 118 then 'SHOPEE订单系统自动关闭'
        when 119 then '客户取消包裹'
        when 121 then '地址错误'
        when 122 then '当日运力不足，无法揽收'
    end as 疑难原因
    ,case
        when t1.state = 6 and di.pno is not null then di.sh_do
        when t1.state = 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is not null then plt.should_do
        when t1.state != 6 and plt.pno is null and pct.pno is not null then 'qaqc-TeamB'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then pr.store_name
        else de.last_store_name
    end 待处理节点
    ,case
        when t1.state = 6 and di.pno is not null then 'KAM/揽件网点未协商'
        when t1.state = 6 and di.pno is null  then '闪速系统沟通处理中'
        when t1.state != 6 and plt.pno is not null and plt2.pno is not null then '闪速系统沟通处理中'
        when plt.pno is null and pct.pno is not null then '闪速超时效理赔未完成'
        when de.last_store_id = t1.ticket_pickup_store_id and plt2.pno is null then '揽件未发出'
        when t1.dst_store_id = 'PH19040F05' and plt2.pno is null then '弃件未到拍卖仓'
        when t1.state != 6 and datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) > 7 and plt2.pno is not null then 'QAQC无须追责后长期无有效路由'
        else null
    end 卡点原因
    ,de.last_store_name 当前节点
    ,datediff(now(), convert_tz(pr.routed_at, '+00:00', '+08:00')) 最后有效路由距今天数
#     ,de.last_cn_route_action 最新一条有效路由
    ,case pr.route_action # 路由动作
         when 'ACCEPT_PARCEL' then '接件扫描'
         when 'ARRIVAL_GOODS_VAN_CHECK_SCAN' then '车货关联到港'
         when 'ARRIVAL_WAREHOUSE_SCAN' then '到件入仓扫描'
         when 'CANCEL_ARRIVAL_WAREHOUSE_SCAN' then '取消到件入仓扫描'
         when 'CANCEL_PARCEL' then '撤销包裹'
         when 'CANCEL_SHIPMENT_WAREHOUSE' then '取消发件出仓'
         when 'CHANGE_PARCEL_CANCEL' then '修改包裹为撤销'
         when 'CHANGE_PARCEL_CLOSE' then '修改包裹为异常关闭'
         when 'CHANGE_PARCEL_IN_TRANSIT' then '修改包裹为运输中'
         when 'CHANGE_PARCEL_INFO' then '修改包裹信息'
         when 'CHANGE_PARCEL_SIGNED' then '修改包裹为签收'
         when 'CLAIMS_CLOSE' then '理赔关闭'
         when 'CLAIMS_COMPLETE' then '理赔完成'
         when 'CLAIMS_CONTACT' then '已联系客户'
         when 'CLAIMS_TRANSFER_CS' then '转交总部cs处理'
         when 'CLOSE_ORDER' then '关闭订单'
         when 'CONTINUE_TRANSPORT' then '疑难件继续配送'
         when 'CREATE_WORK_ORDER' then '创建工单'
         when 'CUSTOMER_CHANGE_PARCEL_INFO' then '客户修改包裹信息'
         when 'CUSTOMER_OPERATING_RETURN' then '客户操作退回寄件人'
         when 'DELIVERY_CONFIRM' then '确认妥投'
         when 'DELIVERY_MARKER' then '派件标记'
         when 'DELIVERY_PICKUP_STORE_SCAN' then '自提取件扫描'
         when 'DELIVERY_TICKET_CREATION_SCAN' then '交接扫描'
         when 'DELIVERY_TRANSFER' then '派件转单'
         when 'DEPARTURE_GOODS_VAN_CK_SCAN' then '车货关联出港'
         when 'DETAIN_WAREHOUSE' then '货件留仓'
         when 'DIFFICULTY_FINISH_INDEMNITY' then '疑难件支付赔偿'
         when 'DIFFICULTY_HANDOVER' then '疑难件交接'
         when 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE' then '疑难件交接货件留仓'
         when 'DIFFICULTY_RE_TRANSIT' then '疑难件退回区域总部/重启运送'
         when 'DIFFICULTY_RETURN' then '疑难件退回寄件人'
         when 'DIFFICULTY_SEAL' then '集包异常'
         when 'DISCARD_RETURN_BKK' then '丢弃包裹的，换单后寄回BKK'
         when 'DISTRIBUTION_INVENTORY' then '分拨盘库'
         when 'DWS_WEIGHT_IMAGE' then 'DWS复秤照片'
         when 'EXCHANGE_PARCEL' then '换货'
         when 'FAKE_CANCEL_HANDLE' then '虚假撤销判责'
         when 'FLASH_HOME_SCAN' then 'FH交接扫描'
         when 'FORCE_TAKE_PHOTO' then '强制拍照路由'
         when 'HAVE_HAIR_SCAN_NO_TO' then '有发无到'
         when 'HURRY_PARCEL' then '催单'
         when 'INCOMING_CALL' then '来电接听'
         when 'INTERRUPT_PARCEL_AND_RETURN' then '中断运输并退回'
         when 'INVENTORY' then '盘库'
         when 'LOSE_PARCEL_TEAM_OPERATION' then '丢失件团队处理'
         when 'MANUAL_REMARK' then '添加备注'
         when 'MISS_PICKUP_HANDLE' then '漏包裹揽收判责'
         when 'MISSING_PARCEL_SCAN' then '丢失件包裹操作'
         when 'NOTICE_LOST_PARTS_TEAM' then '已通知丢失件团队'
         when 'PARCEL_HEADLESS_CLAIMED' then '无头件包裹已认领'
         when 'PARCEL_HEADLESS_PRINTED' then '无头件包裹已打单'
         when 'PENDING_RETURN' then '待退件'
         when 'PHONE' then '电话联系'
         when 'PICK_UP_STORE' then '待自提取件'
         when 'PICKUP_RETURN_RECEIPT' then '签回单揽收'
         when 'PRINTING' then '打印面单'
         when 'QAQC_OPERATION' then 'QAQC判责'
         when 'RECEIVE_WAREHOUSE_SCAN' then '收件入仓'
         when 'RECEIVED' then '已揽收,初始化动作，实际情况并没有作用'
         when 'REFUND_CONFIRM' then '退件妥投'
         when 'REPAIRED' then '上报问题修复路由'
         when 'REPLACE_PNO' then '换单'
         when 'REPLY_WORK_ORDER' then '回复工单'
         when 'REVISION_TIME' then '改约时间'
         when 'SEAL' then '集包'
         when 'SEAL_NUMBER_CHANGE' then '集包件数变化'
         when 'SHIPMENT_WAREHOUSE_SCAN' then '发件出仓扫描'
         when 'SORTER_WEIGHT_IMAGE' then '分拣机复秤照片'
         when 'SORTING_SCAN' then '分拣扫描'
         when 'STAFF_INFO_UPDATE_WEIGHT' then '快递员修改重量'
         when 'STORE_KEEPER_UPDATE_WEIGHT' then '仓管员复秤'
         when 'STORE_SORTER_UPDATE_WEIGHT' then '分拣机复秤'
         when 'SYSTEM_AUTO_RETURN' then '系统自动退件'
         when 'TAKE_PHOTO' then '异常打单拍照'
         when 'THIRD_EXPRESS_ROUTE' then '第三方公司路由'
         when 'THIRD_PARTY_REASON_DETAIN' then '第三方原因滞留'
         when 'TICKET_WEIGHT_IMAGE' then '揽收称重照片'
         when 'TRANSFER_LOST_PARTS_TEAM' then '已转交丢失件团队'
         when 'TRANSFER_QAQC' then '转交QAQC处理'
         when 'UNSEAL' then '拆包'
         when 'UNSEAL_NO_PARCEL' then '上报包裹不在集包里'
         when 'UNSEAL_NOT_SCANNED' then '集包已拆包，本包裹未被扫描'
         when 'VEHICLE_ACCIDENT_REG' then '车辆车祸登记'
         when 'VEHICLE_ACCIDENT_REGISTRATION' then '车辆车祸登记'
         when 'VEHICLE_WET_DAMAGE_REG' then '车辆湿损登记'
         when 'VEHICLE_WET_DAMAGE_REGISTRATION' then '车辆湿损登记'
        end as 最后一条路由
    ,convert_tz(pr.routed_at ,'+00:00', '+08:00') 最新一条有效路由时间
    ,datediff(now(), de.dst_routed_at) 目的地网点停留时间
    ,de.dst_store 目的地网点
    ,de.src_store 揽收网点
    ,de.pickup_time 揽收时间
    ,de.pick_date 揽收日期
    ,if(hold.pno is not null, 'yes', 'no' ) 是否有holding标记
    ,if(plt2.pno is not null, 'yes', 'no') 是否人工无须追责过
    ,if(pr3.pno is not null, 'yes', 'no') 是否有待退件标记
from t t1
left join fle_staging.ka_profile kp on t1.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = t1.client_id
left join dwm.dwd_ex_th_parcel_details de on de.pno = t1.pno
left join
    (
        select
            plt.pno
            ,group_concat(ss.name ) should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        left join bi_pro.work_order wo on wo.loseparcel_task_id = plt.id
        left join fle_staging.sys_store ss on ss.id = wo.store_id
        where
            plt.state in (3)
            and wo.status in (1,2)
        group by 1

        union  all

        select
            plt.pno
            ,'QAQC' should_do
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state in (1,2,4)
    ) plt on plt.pno = t1.pno
left join
    (
        select
            t2.pno
            ,cdt.negotiation_result_category
            ,di.diff_marker_category
            ,case
                when di.diff_marker_category in (20,21)  and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 1 then 'KAM'
                when di.diff_marker_category not in (20,21) and cdt.vip_enable = 0 then ss2.name
                WHEN di.diff_marker_category in (20,21) and cdt.vip_enable = 0 then ss2.name
            end sh_do
        from fle_staging.diff_info di
        join t t2 on t2.pno = di.pno
        join fle_staging.customer_diff_ticket cdt on cdt.diff_info_id = di.id
        left join bi_pro.parcel_lose_task plt on plt.source_id = cdt.id
        left join fle_staging.sys_store ss2 on ss2.id = t2.ticket_pickup_store_id
        where
            cdt.negotiation_result_category is null
    ) di on di.pno = t1.pno
left join
    (
        select
            pr.pno
            ,pr.store_name
            ,pr.routed_at
            ,pr.route_action
            ,row_number() over (partition by pr.pno order by pr.routed_at desc ) rk
        from  rot_pro.parcel_route pr
        join t t3 on t3.pno = pr.pno
        where
            pr.route_action in ('INVENTORY','RECEIVED' ,'RECEIVE_WAREHOUSE_SCAN', 'SORTING_SCAN', 'DELIVERY_TICKET_CREATION_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SHIPMENT_WAREHOUSE_SCAN', 'DETAIN_WAREHOUSE', 'DELIVERY_CONFIRM', 'DIFFICULTY_HANDOVER', 'DELIVERY_MARKER', 'REPLACE_PNO','SEAL', 'UNSEAL', 'STAFF_INFO_UPDATE_WEIGHT', 'STORE_KEEPER_UPDATE_WEIGHT', 'STORE_SORTER_UPDATE_WEIGHT', 'DISCARD_RETURN_BKK', 'DELIVERY_TRANSFER', 'PICKUP_RETURN_RECEIPT', 'FLASH_HOME_SCAN', 'ARRIVAL_WAREHOUSE_SCAN', 'SORTING_SCAN ', 'DELIVERY_PICKUP_STORE_SCAN', 'DIFFICULTY_HANDOVER_DETAIN_WAREHOUSE', 'REFUND_CONFIRM', 'ACCEPT_PARCEL')
    ) pr on pr.pno = t1.pno and pr.rk = 1
left join
    (
        select
            plt.pno
        from bi_pro.parcel_lose_task plt
        join t t1 on t1.pno = plt.pno
        where
            plt.state = 5
            and plt.operator_id not in (10000,10001,10002)
        group by 1
    ) plt2 on plt2.pno = t1.pno
left join
    (
        select
            plt.pno
        from bi_pro.parcel_claim_task plt
        join t t4  on t4.pno = plt.pno
        where
            plt.state not in (6,7,8)
            and plt.source = 11
        group by 1
    ) pct on pct.pno = t1.pno
left join
    (
        select
            pr2.pno
        from rot_pro.parcel_route pr2
        join t t1 on t1.pno = pr2.pno
        where
            pr2.route_action = 'REFUND_CONFIRM'
        group by 1
    ) hold on hold.pno = t1.pno
left join
    (
        select
            pr2.pno
        from  rot_pro.parcel_route pr2
        join t t1 on t1.pno = pr2.pno
        where
            pr2.route_action = 'PENDING_RETURN'
        group by 1
    ) pr3 on pr3.pno = t1.pno
group by t1.pno;
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 30 day ), interval 8 hour);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,if(sdt.state = 3, coalesce(ss3.name, sd.name), null) 处理问题件的网点_部门
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join bi_pro.hr_staff_info hsi3 on hsi3.staff_info_id = sdt.operator_id
    left join fle_staging.sys_store ss3 on ss3.id = hsi3.sys_store_id
    left join fle_staging.sys_department sd  on sd.id = hsi.sys_department_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,if(sdt.state = 3, coalesce(ss3.name, sd.name), null) 处理问题件的网点_部门
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join bi_pro.hr_staff_info hsi3 on hsi3.staff_info_id = sdt.operator_id
    left join fle_staging.sys_store ss3 on ss3.id = hsi3.sys_store_id
    left join fle_staging.sys_department sd  on sd.id = hsi.sys_department_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,case
            when sdt.state = 3 and sdt.operator_id not in (10000,10001,10002) then coalesce(ss3.name, sd.name)
            when sdt.state = 3 and sdt.operator_id in (10000,10001,10002) then '自动协商'
            else null
        end 处理问题件的网点_部门
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join bi_pro.hr_staff_info hsi3 on hsi3.staff_info_id = sdt.operator_id
    left join fle_staging.sys_store ss3 on ss3.id = hsi3.sys_store_id
    left join fle_staging.sys_department sd  on sd.id = hsi.sys_department_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,case
            when sdt.state = 3 and cdt.operator_id not in (10000,10001,10002) then coalesce(ss3.name, sd.name)
            when sdt.state = 3 and cdt.operator_id in (10000,10001,10002) then '自动协商'
            else null
        end 处理问题件的网点_部门
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join bi_pro.hr_staff_info hsi3 on hsi3.staff_info_id = sdt.operator_id
    left join fle_staging.sys_store ss3 on ss3.id = hsi3.sys_store_id
    left join fle_staging.sys_department sd  on sd.id = hsi.sys_department_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,case
            when cdt.state = 1 and cdt.operator_id not in (10000,10001,10002) then coalesce(ss3.name, sd.name)
            when cdt.state = 1 and cdt.operator_id in (10000,10001,10002) then '自动协商'
            else null
        end 处理问题件的网点_部门
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join bi_pro.hr_staff_info hsi3 on hsi3.staff_info_id = sdt.operator_id
    left join fle_staging.sys_store ss3 on ss3.id = hsi3.sys_store_id
    left join fle_staging.sys_department sd  on sd.id = hsi.sys_department_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,sd.name
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.operator_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,sd.name
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
select date_add('2023-03-02' ,interval 31 day);
;-- -. . -..- - / . -. - .-. -.--
select
    min(plt.created_at) min_cr
    ,max(plt.created_at) max_cr
    ,min(plt.parcel_created_at) min_pick
    ,max(plt.parcel_created_at) max_pick
from bi_pro.parcel_lose_task plt
where
    plt.state = 6
    and plt.duty_result = 1
    and plt.updated_at >= '2023-05-01'
    and plt.updated_at < '2023-06-01';
;-- -. . -..- - / . -. - .-. -.--
select

    date(plt.parcel_created_at) max_pick
from bi_pro.parcel_lose_task plt
where
    plt.state = 6
    and plt.duty_result = 1
    and plt.updated_at >= '2023-05-01'
    and plt.updated_at < '2023-06-01'
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,pcol.created_at
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
    ,pcol.action
#         ,plt.id
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
left join bi_pro.parcel_cs_operation_log pcol on pcol.task_id = plt.id and pcol.type = 1
where
    plt.updated_at >= '2023-05-01'
    and plt.updated_at < '2023-06-01'
    and plt.duty_result = 1
#     and plt.source = 12
)
select
    total.ka_type 客户分类
    ,total.total_num 5月判责丢失量
    ,b.24_in 丢失后24H内找回量
    ,b.24_out 判责丢失后24H后找回量
from
    (
        select
            case
                when bc.`client_id` is not null then bc.client_name
                when kp.id is not null and bc.id is null then '普通ka'
                when kp.`id` is null then '小c'
            end as  ka_type
            ,count(plt.id) total_num
        from bi_pro.parcel_lose_task plt
        left join fle_staging.ka_profile kp on plt.client_id = kp.id
        left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
        where
            plt.updated_at >= '2023-05-01'
            and plt.updated_at < '2023-06-01'
            and plt.state = 6
            and plt.duty_result = 1
        group by 1
    ) total
left join
    (
        select
            a.ka_type
            ,count(distinct if(a.24hour = 'y', a.闪速任务ID, null)) 24_in
            ,count(distinct if(a.24hour = 'n', a.闪速任务ID, null)) 24_out
        from
            (
                select
                    a1.id 闪速任务ID
                    ,a1.ka_type
                    ,if(timestampdiff(second, a1.created_at, a2.created_at)/3600 < 24, 'y','n') 24hour
                from
                    (
                        select
                            t1.pno
                            ,t1.id
                            ,t1.ka_type
                            ,t1.created_at
                            ,t1.action
                        from t t1
                        where
                            t1.action = 4
                    ) a1
                join
                    (
                        select
                            t1.pno
                            ,t1.id
                            ,t1.created_at
                            ,t1.action
                        from t t1
                        where
                            t1.action = 3
                    ) a2 on a2.id = a1.id
                where
                    a2.created_at > a1.created_at
            ) a
        group by 1
    ) b on b.ka_type = total.ka_type;
;-- -. . -..- - / . -. - .-. -.--
with  t as
(
select
    plt.pno
    ,plt.id
    ,plt.updated_at
    ,plt.state
    ,plt.penalties
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end as  ka_type
from bi_pro.parcel_lose_task plt
left join fle_staging.ka_profile kp on plt.client_id = kp.id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = plt.client_id
where
    plt.updated_at >= '2023-05-01'
    and plt.updated_at < '2023-06-01'
    and plt.duty_result = 1
    and plt.state = 6
#     and plt.source = 12
)
select
    b.ka_type 客户分类
    ,count(b.id) 5月判责丢失量
    ,count(if(b.24hour = 'y', b.id, null)) 丢失后24H内找回量
    ,count(if(b.24hour = 'n', b.id, null)) 判责丢失后24H后找回量
from
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_at, pr.min_prat)/3600 <= 24 then 'y'
                when timestampdiff(second, t2.updated_at, pr.min_prat)/3600 > 24 then 'n'
                else null
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_at, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
    ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
    ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
    ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
    ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
    ,cdt.client_id 客户ID
    ,di.order_info_id  订单号
    ,oi.remark 订单备注
    ,di.pno 运单号
    ,ddd.CN_element 疑难原因
    ,ddd2.CN_element 二级类型
    ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
    ,case pi.insured
        when 1 then '保价'
        when 0 then '不保价'
    end 保价情况
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
    ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
    ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
    ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
    ,case cdt.state
        when 0 then '未处理'
        when 1 then '已处理'
        when 2 then '沟通中'
        when 3 then '支付驳回'
        when 4 then '客户未处理'
        when 5 then '转交闪速系统'
        when 6 then '转交QAQC'
    end 处理状态
    ,case fdt.state
        when 0 then '未支付'
        when 1 then '已支付'
        when 2 then '驳回'
        when 3 then '取消'
        when 4 then '支付中'
        when 5 then '无需支付'
    end 财务支付状态
    ,cdt.remark 备注
    ,t.ProjectTeam
    ,t.Sub_ProjectTeam
    ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 31 day ), interval 8 hour);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    a.remark
    ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
    ) a
where
    a.rk = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,a.pno
#     ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
            and pr2.route_action = 'ARRIVAL_WAREHOUSE_SCAN'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,a.pno
#     ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
#             and pr2.route_action = 'ARRIVAL_WAREHOUSE_SCAN'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1
    and a.remark = '到件入仓扫描';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,a.pno
#     ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
#             and pr2.route_action = 'ARRIVAL_WAREHOUSE_SCAN'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1
    and ddd.CN_element = '到件入仓扫描';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
        ,case json_extract(pr.extra_value, 'forceTakePhotoCategory')
            when 1 then '打印面单'
            when 2 then '收件人拒收'
            when 3 then '滞留包裹强制拍照'
        end photo_type
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,a.photo_type
    ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.photo_type
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
#             and pr2.route_action = 'ARRIVAL_WAREHOUSE_SCAN'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1
#     and ddd.CN_element = '到件入仓扫描'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.state
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
    ,group_concat(plr.staff_id) staff
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
group by 1
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case a.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 判责结果
    ,a.staff 责任人
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,timestampdiff(hour, a.created_at, a.updated_time) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.state
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
    ,group_concat(plr.staff_id) staff
from bi_pro.parcel_lose_task plt
left join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt.id
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
group by 1
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case a.state
        when 1 then '丢失件待处理'
        when 2 then '疑似丢失件待处理'
        when 3 then '待工单回复'
        when 4 then '已工单回复'
        when 5 then '包裹未丢失'
        when 6 then '丢失件处理完成'
    end 判责结果
    ,a.staff 责任人
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,timestampdiff(hour, a.created_at, a.updated_time) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        pr.pno
        ,pr.routed_at
        ,pr.id
        ,case json_extract(pr.extra_value, '$.forceTakePhotoCategory')
            when 1 then '打印面单'
            when 2 then '收件人拒收'
            when 3 then '滞留包裹强制拍照'
        end photo_type
    from rot_pro.parcel_route pr
    where
        pr.route_action = 'TAKE_PHOTO'
        and pr.routed_at > '2023-06-14 17:00:00'
        and pr.routed_at < '2023-06-30 17:00:00'
)
select
    ddd.CN_element
    ,a.photo_type
    ,count(a.id) action_count
from
    (
        select
            t1.pno
            ,t1.id
            ,t1.photo_type
            ,pr2.remark
            ,row_number() over (partition by pr2.pno order by pr2.routed_at desc) rk
        from rot_pro.parcel_route pr2
        join t t1 on pr2.pno = t1.pno
        where
            pr2.routed_at < t1.routed_at
            and pr2.route_action = 'FORCE_TAKE_PHOTO'
            and pr2.routed_at > '2023-06-14 17:00:00'
            and pr2.routed_at < '2023-06-30 17:00:00'
#             and pr2.route_action = 'ARRIVAL_WAREHOUSE_SCAN'
    ) a
left join dwm.dwd_dim_dict ddd on ddd.element = a.remark and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
where
    a.rk = 1
#     and ddd.CN_element = '到件入仓扫描'
group by 1,2;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-04'
        and ds.stat_date <= '2023-07-04'
)

select
    a.stat_date 日期
    ,a.store_id 网点ID
    ,dp.store_name 网点名称
    ,dp.region_name 大区
    ,dp.piece_name 片区
    ,a.应交接
    ,a.已交接
    ,concat(round(a.交接率*100,2),'%') as 交接率
    ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
    ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
    ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
    ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
    ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
from
    (
        select
            t1.store_id
            ,t1.stat_date
            ,count(t1.pno) 应交接
            ,count(if(sc.pno is not null , t1.pno, null)) 已交接
            ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
            ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
            ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
            ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
            ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

            ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
            ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
            ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
            ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
        from t t1
        left join
            (
                select
                    sc.*
                from
                    (
                        select
                            pr.pno
                            ,pr.store_id
                            ,pr.store_name
                            ,t1.stat_date
                            ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                            ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                            ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                        from rot_pro.parcel_route pr
                        join t t1 on t1.pno = pr.pno
                        where
                            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                           and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                          and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                    ) sc
                where
                    sc.rk = 1
            ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
        group by 1,2
    ) a
left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
where
    dp.store_category = 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-04'
        and ds.stat_date <= '2023-07-04'
)

select
    a.stat_date 日期
    ,a.store_id 网点ID
    ,dp.store_name 网点名称
    ,dp.region_name 大区
    ,dp.piece_name 片区
    ,a.应交接
    ,a.已交接
    ,concat(round(a.交接率*100,2),'%') as 交接率
    ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
    ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
    ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
    ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
    ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
from
    (
        select
            t1.store_id
            ,t1.stat_date
            ,count(t1.pno) 应交接
            ,count(if(sc.pno is not null , t1.pno, null)) 已交接
            ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
            ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
            ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
            ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
            ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

            ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
            ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
            ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
            ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
        from t t1
        left join
            (
                select
                    sc.*
                from
                    (
                        select
                            pr.pno
                            ,pr.store_id
                            ,pr.store_name
                            ,t1.stat_date
                            ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                            ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                            ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                        from rot_pro.parcel_route pr
                        join t t1 on t1.pno = pr.pno
                        where
                            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                           and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                          and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                    ) sc
                where
                    sc.rk = 1
            ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
        group by 1,2
    ) a
left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
where
    dp.store_category in (1,10,13,14);
;-- -. . -..- - / . -. - .-. -.--
select
    distinct pls.pno '运单号เลขพัสดุ'
    ,c.created_at '首次预警时间'
    ,ds.store_name '网点名称'
    ,pls.created_at '任务生成时间เวลาที่จัดการสำเร็จ'
    ,if(
        TIMESTAMPDIFF(hour,pls.created_at,now())<48,
    concat(cast(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))%60,0)as int),'min'),
    concat('已超时',concat(cast(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())%60,0)as int),'min'))) '任务处理倒计时เวลาที่สะสม'
    ,pls.pack_no '集包号เลขแบ็กกิ้ง'
    ,pls.arrival_time '入仓时间เวลาที่เข้าคลัง'
    ,pls.parcel_created_at '揽件时间เวลาที่รับ'
    ,pls.proof_id '出车凭证ใบรับรองปล่อยรถ'
    ,case pls.state
    when 1 then '待处理'
    when 2 then '网点处理'
    when 3 then '超时自动处理'
    when 4 then 'QAQC处理'
    when 5 then '已更新路由(无需处理)'
    end  '状态สถานะ'
    ,case pls.speed
    when 1 then '是'
    when 2 then '否'
    end  'SPEED件มีพัสดุSpeed'
    ,pls.last_valid_action '最后有效路由สถานะสุดท้าย'
    ,pls.last_valid_staff_id '最后一步有效路由操作员工ID ไอดีพนักงานที่สแกนล่าสุด'
    ,pls.last_valid_at '最后操作时间เวลาสุดท้ายที่ดำเนินการ'
    ,ds2.store_name '最后有效路由所在网点สาขาสุดท้ายที่ดำเนินการ'
    ,ds.piece_name '片区District'
    ,ds.region_name '大区Area'
    ,bc.client_name '客户名称'
    ,if(pi.cod_enabled = 1, 'yes', 'no') '是否是cod เป็นพัสดุcodหรือไม่'
    ,pi.cod_amount/100 COD金额
    ,pls.arrival_time '到达网点时间 เวลาที่ถึงสาขา'
    ,datediff(curdate(), pls.arrival_time) '到达网点时长/day มาถึงสาขาแล้วกี่วัน'
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as '包裹状态 สถานะพัสดุ'
from bi_center.parcel_lose_task_sub_c pls
left join fle_staging.parcel_info pi on pi.pno = pls.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
left join dwm.dim_th_sys_store_rd ds on pls.store_id = ds.store_id and ds.stat_date = date_sub(curdate(), interval 1 day )
left join dwm.dim_th_sys_store_rd ds2 on pls.last_valid_store_id = ds2.store_id and ds2.stat_date = date_sub(curdate(), interval 1 day )
left join
    (
        select
            pls.pno
            ,plt.created_at
            ,row_number() over (partition by pls.pno order by plt.created_at) rn
        from bi_center.parcel_lose_task_sub_c pls
        left join bi_pro.parcel_lose_task plt on pls.pno = plt.pno and plt.source = 3
        where
             pls.created_at > '2023-01-09 00:00:00'
            and pls.state= 1
    ) c on c.pno = pls.pno and c.rn = 1
where
    pls.created_at > '2023-01-09 00:00:00'
    and pls.state = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
select
    distinct pls.pno '运单号เลขพัสดุ'
    ,c.created_at '首次预警时间'
    ,ds.store_name '网点名称'
    ,pls.created_at '任务生成时间เวลาที่จัดการสำเร็จ'
    ,if(
        TIMESTAMPDIFF(hour,pls.created_at,now())<48,
    concat(cast(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,now(),date_add(pls.created_at,interval 2 day))%60,0)as int),'min'),
    concat('已超时',concat(cast(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())/60 as int),'h ',cast(round(TIMESTAMPDIFF(minute,date_add(pls.created_at,interval 2 day),now())%60,0)as int),'min'))) '任务处理倒计时เวลาที่สะสม'
    ,pls.pack_no '集包号เลขแบ็กกิ้ง'
#     ,pls.arrival_time '入仓时间เวลาที่เข้าคลัง'
    ,pls.parcel_created_at '揽件时间เวลาที่รับ'
    ,pls.proof_id '出车凭证ใบรับรองปล่อยรถ'
    ,case pls.state
    when 1 then '待处理'
    when 2 then '网点处理'
    when 3 then '超时自动处理'
    when 4 then 'QAQC处理'
    when 5 then '已更新路由(无需处理)'
    end  '状态สถานะ'
    ,case pls.speed
    when 1 then '是'
    when 2 then '否'
    end  'SPEED件มีพัสดุSpeed'
    ,ddd.CN_element '最后有效路由สถานะสุดท้าย'
    ,pls.last_valid_staff_id '最后一步有效路由操作员工ID ไอดีพนักงานที่สแกนล่าสุด'
    ,pls.last_valid_at '最后操作时间เวลาสุดท้ายที่ดำเนินการ'
    ,ds2.store_name '最后有效路由所在网点สาขาสุดท้ายที่ดำเนินการ'
    ,ds.piece_name '片区District'
    ,ds.region_name '大区Area'
    ,bc.client_name '客户名称'
    ,if(pi.cod_enabled = 1, 'yes', 'no') '是否是cod เป็นพัสดุcodหรือไม่'
    ,pi.cod_amount/100 COD金额
    ,pls.arrival_time '到达网点时间 เวลาที่ถึงสาขา'
    ,datediff(curdate(), pls.arrival_time) '到达网点时长/day มาถึงสาขาแล้วกี่วัน'
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as '包裹状态 สถานะพัสดุ'
from bi_center.parcel_lose_task_sub_c pls
left join dwm.dwd_dim_dict ddd on ddd.element = pls.last_valid_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.parcel_info pi on pi.pno = pls.pno
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
left join dwm.dim_th_sys_store_rd ds on pls.store_id = ds.store_id and ds.stat_date = date_sub(curdate(), interval 1 day )
left join dwm.dim_th_sys_store_rd ds2 on pls.last_valid_store_id = ds2.store_id and ds2.stat_date = date_sub(curdate(), interval 1 day )
left join
    (
        select
            pls.pno
            ,plt.created_at
            ,row_number() over (partition by pls.pno order by plt.created_at) rn
        from bi_center.parcel_lose_task_sub_c pls
        left join bi_pro.parcel_lose_task plt on pls.pno = plt.pno and plt.source = 3
        where
             pls.created_at > '2023-01-09 00:00:00'
            and pls.state= 1
    ) c on c.pno = pls.pno and c.rn = 1
where
    pls.created_at > '2023-01-09 00:00:00'
    and pls.state = 1
group by 1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,if(sdt.state in (0,1),
        case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end, null) 待处理人
        ,if(cdt.organization_type = 1, ss3.name, sd.name) '处理问题件网点/部门'
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    left join fle_staging.sys_store ss3 on ss3.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end 待处理人
        ,if(cdt.organization_type = 1, ss3.name, sd.name) '处理问题件网点/部门'
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    left join fle_staging.sys_store ss3 on ss3.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
#         and cdt.state in (0,2,3,4)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bulky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end 待处理人
        ,if(cdt.organization_type = 1, ss3.name, sd.name) '处理问题件网点/部门'
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    left join fle_staging.sys_store ss3 on ss3.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and di.diff_marker_category not in (2,17)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.parcel_created_at 包裹揽收时间
    ,plt.created_at 任务生成时间
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,ddd.CN_element 进入闪速时的最后有效路由动作
    ,ss.name 最后有效路由操作网点名称
    ,case ss.category
        when 1 then 'SP'
        when 2 then 'DC'
        when 4 then 'SHOP'
        when 5 then 'SHOP'
        when 6 then 'FH'
        when 7 then 'SHOP'
        when 8 then 'Hub'
        when 9 then 'Onsite'
        when 10 then 'BDC'
        when 11 then 'fulfillment'
        when 12 then 'B-HUB'
        when 13 then 'CDC'
        when 14 then 'PDC'
    end 最后有效路由操作网点类型
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case plt.`link_type`
        when 0 then 'ipc计数后丢失'
        when 1 then '揽收网点已揽件，未收件入仓'
        when 2 then '揽收网点已收件入仓，未发件出仓'
        when 3 then '中转已到件入仓扫描，中转未发件出仓'
        when 4 then '揽收网点已发件出仓扫描，分拨未到件入仓(集包)'
        when 5 then '揽收网点已发件出仓扫描，分拨未到件入仓(单件)'
        when 6 then '分拨发件出仓扫描，目的地未到件入仓(集包)'
        when 7 then '分拨发件出仓扫描，目的地未到件入仓(单件)'
        when 8 then '目的地到件入仓扫描，目的地未交接,当日遗失'
        when 9 then '目的地到件入仓扫描，目的地未交接,次日遗失'
        when 10 then '目的地交接扫描，目的地未妥投'
        when 11 then '目的地妥投后丢失'
        when 12 then '途中破损/短少'
        when 13 then '妥投后破损/短少'
        when 14 then '揽收网点已揽件，未收件入仓'
        when 15 then '揽收网点已收件入仓，未发件出仓'
        when 16 then '揽收网点发件出仓到分拨了'
        when 17 then '目的地到件入仓扫描，目的地未交接'
        when 18 then '目的地交接扫描，目的地未妥投'
        when 19 then '目的地妥投后破损短少'
        when 20 then '分拨已发件出仓，下一站分拨未到件入仓(集包)'
        when 21 then '分拨已发件出仓，下一站分拨未到件入仓(单件)'
        when 22 then 'ipc计数后丢失'
        when 23 then '超时效sla'
        when 24 then '分拨发件出仓到下一站分拨了'
	end 判责环节
    ,plt2.ss2_name 责任网点
    ,plt2.ratio  责任占比
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.dwd_dim_dict ddd on ddd.element = plt.last_valid_action and ddd.db = 'rto_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.sys_store ss on ss.id = plt.last_valid_store_id
left join
    (
        select
            plr.lose_task_id
            ,ss2.name ss2_name
            ,sum(plr.duty_ratio)/100 ratio
        from bi_pro.parcel_lose_task plt2
        join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt2.id
        left join fle_staging.sys_store ss2 on ss2.id = plr.store_id
        where
            plt2.created_at >= '2023-06-01'
            and plt2.created_at < '2023-07-01'
            and plt2.state = 6
        group by 1,2
    ) plt2 on plt2.lose_task_id = plt.id
where
    plt.state = 6
    and plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-01';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.parcel_created_at 包裹揽收时间
    ,plt.created_at 任务生成时间
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,ddd.CN_element 进入闪速时的最后有效路由动作
    ,ss.name 最后有效路由操作网点名称
    ,case ss.category
        when 1 then 'SP'
        when 2 then 'DC'
        when 4 then 'SHOP'
        when 5 then 'SHOP'
        when 6 then 'FH'
        when 7 then 'SHOP'
        when 8 then 'Hub'
        when 9 then 'Onsite'
        when 10 then 'BDC'
        when 11 then 'fulfillment'
        when 12 then 'B-HUB'
        when 13 then 'CDC'
        when 14 then 'PDC'
    end 最后有效路由操作网点类型
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case plt.`link_type`
        when 0 then 'ipc计数后丢失'
        when 1 then '揽收网点已揽件，未收件入仓'
        when 2 then '揽收网点已收件入仓，未发件出仓'
        when 3 then '中转已到件入仓扫描，中转未发件出仓'
        when 4 then '揽收网点已发件出仓扫描，分拨未到件入仓(集包)'
        when 5 then '揽收网点已发件出仓扫描，分拨未到件入仓(单件)'
        when 6 then '分拨发件出仓扫描，目的地未到件入仓(集包)'
        when 7 then '分拨发件出仓扫描，目的地未到件入仓(单件)'
        when 8 then '目的地到件入仓扫描，目的地未交接,当日遗失'
        when 9 then '目的地到件入仓扫描，目的地未交接,次日遗失'
        when 10 then '目的地交接扫描，目的地未妥投'
        when 11 then '目的地妥投后丢失'
        when 12 then '途中破损/短少'
        when 13 then '妥投后破损/短少'
        when 14 then '揽收网点已揽件，未收件入仓'
        when 15 then '揽收网点已收件入仓，未发件出仓'
        when 16 then '揽收网点发件出仓到分拨了'
        when 17 then '目的地到件入仓扫描，目的地未交接'
        when 18 then '目的地交接扫描，目的地未妥投'
        when 19 then '目的地妥投后破损短少'
        when 20 then '分拨已发件出仓，下一站分拨未到件入仓(集包)'
        when 21 then '分拨已发件出仓，下一站分拨未到件入仓(单件)'
        when 22 then 'ipc计数后丢失'
        when 23 then '超时效sla'
        when 24 then '分拨发件出仓到下一站分拨了'
	end 判责环节
    ,plt2.ss2_name 责任网点
    ,plt2.ratio  责任占比
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.dwd_dim_dict ddd on ddd.element = plt.last_valid_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.sys_store ss on ss.id = plt.last_valid_store_id
left join
    (
        select
            plr.lose_task_id
            ,ss2.name ss2_name
            ,sum(plr.duty_ratio)/100 ratio
        from bi_pro.parcel_lose_task plt2
        join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt2.id
        left join fle_staging.sys_store ss2 on ss2.id = plr.store_id
        where
            plt2.created_at >= '2023-06-01'
            and plt2.created_at < '2023-07-01'
            and plt2.state = 6
        group by 1,2
    ) plt2 on plt2.lose_task_id = plt.id
where
    plt.state = 6
    and plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-01';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.parcel_created_at 包裹揽收时间
    ,plt.created_at 任务生成时间
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,ddd.CN_element 进入闪速时的最后有效路由动作
    ,ss.name 最后有效路由操作网点名称
    ,case ss.category
        when 1 then 'SP'
        when 2 then 'DC'
        when 4 then 'SHOP'
        when 5 then 'SHOP'
        when 6 then 'FH'
        when 7 then 'SHOP'
        when 8 then 'Hub'
        when 9 then 'Onsite'
        when 10 then 'BDC'
        when 11 then 'fulfillment'
        when 12 then 'B-HUB'
        when 13 then 'CDC'
        when 14 then 'PDC'
    end 最后有效路由操作网点类型
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case plt.duty_type
        when 1 then '快递员100%套餐'
        when 2 then '仓7主3套餐(仓管70%主管30%)'
        when 4 then '双黄套餐(A网点仓管40%主管10%B网点仓管40%主管10%)'
        when 5 then  '快递员721套餐(快递员70%仓管20%主管10%)'
        when 6 then  '仓管721套餐(仓管70%快递员20%主管10%)'
        when 8 then  'LH全责（LH100%）'
        when 7 then  '其他(仅勾选“该运单的责任人需要特殊处理”时才能使用该项)'
        when 21 then  '仓7主3套餐(仓管70%主管30%)'
    end 套餐
    ,case plt.`link_type`
        when 0 then 'ipc计数后丢失'
        when 1 then '揽收网点已揽件，未收件入仓'
        when 2 then '揽收网点已收件入仓，未发件出仓'
        when 3 then '中转已到件入仓扫描，中转未发件出仓'
        when 4 then '揽收网点已发件出仓扫描，分拨未到件入仓(集包)'
        when 5 then '揽收网点已发件出仓扫描，分拨未到件入仓(单件)'
        when 6 then '分拨发件出仓扫描，目的地未到件入仓(集包)'
        when 7 then '分拨发件出仓扫描，目的地未到件入仓(单件)'
        when 8 then '目的地到件入仓扫描，目的地未交接,当日遗失'
        when 9 then '目的地到件入仓扫描，目的地未交接,次日遗失'
        when 10 then '目的地交接扫描，目的地未妥投'
        when 11 then '目的地妥投后丢失'
        when 12 then '途中破损/短少'
        when 13 then '妥投后破损/短少'
        when 14 then '揽收网点已揽件，未收件入仓'
        when 15 then '揽收网点已收件入仓，未发件出仓'
        when 16 then '揽收网点发件出仓到分拨了'
        when 17 then '目的地到件入仓扫描，目的地未交接'
        when 18 then '目的地交接扫描，目的地未妥投'
        when 19 then '目的地妥投后破损短少'
        when 20 then '分拨已发件出仓，下一站分拨未到件入仓(集包)'
        when 21 then '分拨已发件出仓，下一站分拨未到件入仓(单件)'
        when 22 then 'ipc计数后丢失'
        when 23 then '超时效sla'
        when 24 then '分拨发件出仓到下一站分拨了'
	end 判责环节
    ,plt2.ss2_name 责任网点
    ,plt2.ratio  责任占比
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.dwd_dim_dict ddd on ddd.element = plt.last_valid_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.sys_store ss on ss.id = plt.last_valid_store_id
left join
    (
        select
            plr.lose_task_id
            ,ss2.name ss2_name
            ,sum(plr.duty_ratio)/100 ratio
        from bi_pro.parcel_lose_task plt2
        join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt2.id
        left join fle_staging.sys_store ss2 on ss2.id = plr.store_id
        where
            plt2.created_at >= '2023-06-01'
            and plt2.created_at < '2023-07-01'
            and plt2.state = 6
        group by 1,2
    ) plt2 on plt2.lose_task_id = plt.id
where
    plt.state = 6
    and plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-01';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.parcel_created_at 包裹揽收时间
    ,plt.created_at 任务生成时间
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,ddd.CN_element 进入闪速时的最后有效路由动作
    ,ss.name 最后有效路由操作网点名称
    ,case ss.category
        when 1 then 'SP'
        when 2 then 'DC'
        when 4 then 'SHOP'
        when 5 then 'SHOP'
        when 6 then 'FH'
        when 7 then 'SHOP'
        when 8 then 'Hub'
        when 9 then 'Onsite'
        when 10 then 'BDC'
        when 11 then 'fulfillment'
        when 12 then 'B-HUB'
        when 13 then 'CDC'
        when 14 then 'PDC'
    end 最后有效路由操作网点类型
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case plt.duty_type
        when 1 then '快递员100%套餐'
        when 2 then '仓9主1套餐(仓管90%主管10%)'
        when 3 then '仓9主1套餐(仓管90%主管10%)'
        when 4 then '双黄套餐(A网点仓管40%主管10%B网点仓管40%主管10%)'
        when 5 then '快递员721套餐(快递员70%仓管20%主管10%)'
        when 6 then '仓管721套餐(仓管70%快递员20%主管10%)'
        when 8 then 'LH全责（LH100%）'
        when 7 then '其他(仅勾选“该运单的责任人需要特殊处理”时才能使用该项)'
        when 9 then '加盟商套餐'
        when 10 then '双黄套餐(计数网点仓管40%计数网点主管10%对接分拨仓管40%对接分拨主管10%)'
        when 19 then '双黄套餐(计数网点仓管40%计数网点主管10%对接分拨仓管40%对接分拨主管10%)'
        when 20 then  '加盟商双黄套餐（加盟商50%网点仓管45%主管5%）'
    end 套餐
    ,case plt.`link_type`
        when 0 then 'ipc计数后丢失'
        when 1 then '揽收网点已揽件，未收件入仓'
        when 2 then '揽收网点已收件入仓，未发件出仓'
        when 3 then '中转已到件入仓扫描，中转未发件出仓'
        when 4 then '揽收网点已发件出仓扫描，分拨未到件入仓(集包)'
        when 5 then '揽收网点已发件出仓扫描，分拨未到件入仓(单件)'
        when 6 then '分拨发件出仓扫描，目的地未到件入仓(集包)'
        when 7 then '分拨发件出仓扫描，目的地未到件入仓(单件)'
        when 8 then '目的地到件入仓扫描，目的地未交接,当日遗失'
        when 9 then '目的地到件入仓扫描，目的地未交接,次日遗失'
        when 10 then '目的地交接扫描，目的地未妥投'
        when 11 then '目的地妥投后丢失'
        when 12 then '途中破损/短少'
        when 13 then '妥投后破损/短少'
        when 14 then '揽收网点已揽件，未收件入仓'
        when 15 then '揽收网点已收件入仓，未发件出仓'
        when 16 then '揽收网点发件出仓到分拨了'
        when 17 then '目的地到件入仓扫描，目的地未交接'
        when 18 then '目的地交接扫描，目的地未妥投'
        when 19 then '目的地妥投后破损短少'
        when 20 then '分拨已发件出仓，下一站分拨未到件入仓(集包)'
        when 21 then '分拨已发件出仓，下一站分拨未到件入仓(单件)'
        when 22 then 'ipc计数后丢失'
        when 23 then '超时效sla'
        when 24 then '分拨发件出仓到下一站分拨了'
	end 判责环节
    ,plt2.ss2_name 责任网点
    ,plt2.ratio  责任占比
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.dwd_dim_dict ddd on ddd.element = plt.last_valid_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.sys_store ss on ss.id = plt.last_valid_store_id
left join
    (
        select
            plr.lose_task_id
            ,ss2.name ss2_name
            ,sum(plr.duty_ratio)/100 ratio
        from bi_pro.parcel_lose_task plt2
        join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt2.id
        left join fle_staging.sys_store ss2 on ss2.id = plr.store_id
        where
            plt2.created_at >= '2023-06-01'
            and plt2.created_at < '2023-07-01'
            and plt2.state = 6
        group by 1,2
    ) plt2 on plt2.lose_task_id = plt.id
where
    plt.state = 6
    and plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-01';
;-- -. . -..- - / . -. - .-. -.--
select
    plt.pno 运单号
    ,plt.parcel_created_at 包裹揽收时间
    ,plt.created_at 任务生成时间
    ,case plt.source
        WHEN 1 THEN 'A-问题件-丢失'
        WHEN 2 THEN 'B-记录本-丢失'
        WHEN 3 THEN 'C-包裹状态未更新'
        WHEN 4 THEN 'D-问题件-破损/短少'
        WHEN 5 THEN 'E-记录本-索赔-丢失'
        WHEN 6 THEN 'F-记录本-索赔-破损/短少'
        WHEN 7 THEN 'G-记录本-索赔-其他'
        WHEN 8 THEN 'H-包裹状态未更新-IPC计数'
        WHEN 9 THEN 'I-问题件-外包装破损险'
        WHEN 10 THEN 'J-问题记录本-外包装破损险'
        when 11 then 'K-超时效包裹'
        when 12 then 'L-高度疑似丢失'
    end 问题来源渠道
    ,ddd.CN_element 进入闪速时的最后有效路由动作
    ,ss.name 最后有效路由操作网点名称
    ,case ss.category
        when 1 then 'SP'
        when 2 then 'DC'
        when 4 then 'SHOP'
        when 5 then 'SHOP'
        when 6 then 'FH'
        when 7 then 'SHOP'
        when 8 then 'Hub'
        when 9 then 'Onsite'
        when 10 then 'BDC'
        when 11 then 'fulfillment'
        when 12 then 'B-HUB'
        when 13 then 'CDC'
        when 14 then 'PDC'
    end 最后有效路由操作网点类型
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,plt.duty_type
    ,case plt.duty_type
        when 1 then '快递员100%套餐'
        when 2 then '仓9主1套餐(仓管90%主管10%)'
        when 3 then '仓9主1套餐(仓管90%主管10%)'
        when 4 then '双黄套餐(A网点仓管40%主管10%B网点仓管40%主管10%)'
        when 5 then '快递员721套餐(快递员70%仓管20%主管10%)'
        when 6 then '仓管721套餐(仓管70%快递员20%主管10%)'
        when 8 then 'LH全责（LH100%）'
        when 7 then '其他(仅勾选“该运单的责任人需要特殊处理”时才能使用该项)'
        when 9 then '加盟商套餐'
        when 10 then '双黄套餐(计数网点仓管40%计数网点主管10%对接分拨仓管40%对接分拨主管10%)'
        when 19 then '双黄套餐(计数网点仓管40%计数网点主管10%对接分拨仓管40%对接分拨主管10%)'
        when 20 then  '加盟商双黄套餐（加盟商50%网点仓管45%主管5%）'
    end 套餐
    ,case plt.`link_type`
        when 0 then 'ipc计数后丢失'
        when 1 then '揽收网点已揽件，未收件入仓'
        when 2 then '揽收网点已收件入仓，未发件出仓'
        when 3 then '中转已到件入仓扫描，中转未发件出仓'
        when 4 then '揽收网点已发件出仓扫描，分拨未到件入仓(集包)'
        when 5 then '揽收网点已发件出仓扫描，分拨未到件入仓(单件)'
        when 6 then '分拨发件出仓扫描，目的地未到件入仓(集包)'
        when 7 then '分拨发件出仓扫描，目的地未到件入仓(单件)'
        when 8 then '目的地到件入仓扫描，目的地未交接,当日遗失'
        when 9 then '目的地到件入仓扫描，目的地未交接,次日遗失'
        when 10 then '目的地交接扫描，目的地未妥投'
        when 11 then '目的地妥投后丢失'
        when 12 then '途中破损/短少'
        when 13 then '妥投后破损/短少'
        when 14 then '揽收网点已揽件，未收件入仓'
        when 15 then '揽收网点已收件入仓，未发件出仓'
        when 16 then '揽收网点发件出仓到分拨了'
        when 17 then '目的地到件入仓扫描，目的地未交接'
        when 18 then '目的地交接扫描，目的地未妥投'
        when 19 then '目的地妥投后破损短少'
        when 20 then '分拨已发件出仓，下一站分拨未到件入仓(集包)'
        when 21 then '分拨已发件出仓，下一站分拨未到件入仓(单件)'
        when 22 then 'ipc计数后丢失'
        when 23 then '超时效sla'
        when 24 then '分拨发件出仓到下一站分拨了'
	end 判责环节
    ,plt2.ss2_name 责任网点
    ,plt2.ratio  责任占比
from bi_pro.parcel_lose_task plt
left join fle_staging.parcel_info pi on pi.pno = plt.pno
left join dwm.dwd_dim_dict ddd on ddd.element = plt.last_valid_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action'
left join fle_staging.sys_store ss on ss.id = plt.last_valid_store_id
left join
    (
        select
            plr.lose_task_id
            ,ss2.name ss2_name
            ,sum(plr.duty_ratio)/100 ratio
        from bi_pro.parcel_lose_task plt2
        join bi_pro.parcel_lose_responsible plr on plr.lose_task_id = plt2.id
        left join fle_staging.sys_store ss2 on ss2.id = plr.store_id
        where
            plt2.created_at >= '2023-06-01'
            and plt2.created_at < '2023-07-01'
            and plt2.state = 6
        group by 1,2
    ) plt2 on plt2.lose_task_id = plt.id
where
    plt.state = 6
    and plt.created_at >= '2023-06-01'
    and plt.created_at < '2023-07-01';
;-- -. . -..- - / . -. - .-. -.--
select
    count(cdt.id)
from fle_staging.customer_diff_ticket cdt
left join fle_staging.diff_info di on di.id = cdt.diff_info_id
where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and di.diff_marker_category not in (2,17);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bul  ky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end 待处理人
        ,if(cdt.organization_type = 1, ss3.name, sd.name) '处理问题件网点/部门'
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    left join fle_staging.sys_store ss3 on ss3.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and di.diff_marker_category not in (2,17)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号
where
    am.pno = 'TH10033V0N1E3Q';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
        convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
        ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
        ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
        ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
        ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
        ,cdt.client_id 客户ID
        ,case
          when kp.id ='AA0622' then 'pmd-shein'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '20001' then 'ffm'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' and if(kp.`account_type_category` = '3',kp.`agent_id`, kp.`id`) = 'BF5633' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '388' then 'kam'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '4' then 'retail-network'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '34' then 'retail-bulky'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '40' then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' and hs.`node_department_id` in ('1098','1099','1100','1101') then 'retail-sales'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '13' then 'retail-shop'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '3' then 'customer service'
          when if(kp.`account_type_category` = '3',kp2.`department_id`, kp.`department_id`) = '545' then 'bulky business development'
          when kp3.`agent_category`= '3'  and kp3.department_id= '388' and kp.id is null then 'kam'
          when ss.`category` = '1' and kp.id is null then 'retail-network-c'
          when ss.`category` in ('10','13') and kp.id is null then 'retail-bul  ky-c'
          when ss.`category` = '6'  and kp.id is null then 'fh'
          when ss.`category` in ('4','5','7') and kp.id is null then 'retail-shop-c'
          when ss.`category` in ('11') and kp.id is null then 'ffm'
          else ss2.name
        end as '归属部门'
        ,di.order_info_id  订单号
        ,oi.remark 订单备注
        ,di.pno 运单号
        ,ddd.CN_element 疑难原因
        ,ddd2.CN_element 二级类型
        ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
        ,case pi.insured
            when 1 then '保价'
            when 0 then '不保价'
        end 保价情况
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
        ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
        ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
        ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
        ,case cdt.state
            when 0 then '未处理'
            when 1 then '已处理'
            when 2 then '沟通中'
            when 3 then '支付驳回'
            when 4 then '客户未处理'
            when 5 then '转交闪速系统'
            when 6 then '转交QAQC'
        end 处理状态
        ,ddd3.CN_element 协商结果
        ,case sdt.pending_handle_category
            when 1 then '待揽收网点协商'
            when 2 then '待KAM问题件处理'
            when 3 then '待QAQC判责'
            when 4 then '待客户决定'
        end 待处理人
        ,if(cdt.organization_type = 1, ss3.name, sd.name) '处理问题件网点/部门'
        ,case fdt.state
            when 0 then '未支付'
            when 1 then '已支付'
            when 2 then '驳回'
            when 3 then '取消'
            when 4 then '支付中'
            when 5 then '无需支付'
        end 财务支付状态
        ,cdt.remark 备注
    from fle_staging.customer_diff_ticket cdt
    left join fle_staging.store_diff_ticket sdt on sdt.diff_info_id = cdt.diff_info_id
    join fle_staging.diff_info di on di.id = cdt.diff_info_id
    left join fle_staging.parcel_info pi on pi.pno = di.pno
    left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
    left join fle_staging.order_info oi on oi.pno = di.pno
    left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
    left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd2.db = 'fle_staging' and ddd2.tablename = 'diff_info' and ddd2.fieldname = 'rejection_category'
    left join dwm.dwd_dim_dict ddd3 on ddd3.element = cdt.negotiation_result_category and ddd3.db = 'fle_staging' and ddd3.tablename = 'customer_diff_ticket' and ddd3.fieldname = 'negotiation_result_category'
    left join fle_staging.sys_store ss on ss.id = di.store_id
    left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
    left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
    left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
    left join fle_staging.ka_profile  AS kp on kp.id = pi.client_id
    left join fle_staging.ka_profile as kp2 on  kp.`agent_id` = kp2.`id` and (kp2.`agent_category` <>'3' or kp2.`agent_category` is null)
    left join fle_staging.ka_profile kp3 on pi.`agent_id`  = kp3.`id`
    left join bi_pro.hr_staff_info AS hs on kp.`staff_info_id` = hs.`staff_info_id` AND hs.`node_department_id` IN ('1098','1099','1100','1101')
    left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = pi.client_id
    left join fle_staging.customer_group_ka_relation cgkr on cgkr.ka_id = pi.client_id
    left join fle_staging.customer_group cg on cg.id = cgkr.customer_group_id
    left join fle_staging.sys_store ss2 on ss2.id = pi.ticket_pickup_store_id
    left join fle_staging.sys_department sd on sd.id = cdt.organization_id
    left join fle_staging.sys_store ss3 on ss3.id = cdt.organization_id
    where
        cdt.created_at >= '2023-04-30 17:00:00'
        and cdt.created_at < '2023-06-26 17:00:00'
        and di.diff_marker_category not in (2,17)
)
select
    t1.*
    ,am.punish_num 罚款次数
    ,am.punish_money_total 罚款总金额
from t t1
left join
    (
        select
            am.pno
            ,sum(am.punish_money) punish_money_total
            ,count(distinct if(am.abnormal_object = 0, am.id, am.average_merge_key)) punish_num
        from bi_pro.abnormal_message am
        join
            (
                select
                    t1.运单号 pno
                from t t1
                group by 1
            ) t1 on am.merge_column = t1.pno
        where
            am.punish_category = 4
            and am.isdel = 0
            and am.state = 1
        group by 1
    ) am on am.pno = t1.运单号;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-05'
        and ds.stat_date <= '2023-07-05'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)

select
    a.stat_date 日期
    ,a.store_id 网点ID
    ,dp.store_name 网点名称
    ,dp.region_name 大区
    ,dp.piece_name 片区
    ,a.应交接
    ,a.已交接
    ,concat(round(a.交接率*100,2),'%') as 交接率
    ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
    ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
    ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
    ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
    ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
from
    (
        select
            t1.store_id
            ,t1.stat_date
            ,count(t1.pno) 应交接
            ,count(if(sc.pno is not null , t1.pno, null)) 已交接
            ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
            ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
            ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
            ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
            ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

            ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
            ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
            ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
            ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
        from t t1
        left join
            (
                select
                    sc.*
                from
                    (
                        select
                            pr.pno
                            ,pr.store_id
                            ,pr.store_name
                            ,t1.stat_date
                            ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                            ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                            ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                        from rot_pro.parcel_route pr
                        join t t1 on t1.pno = pr.pno
                        where
                            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                           and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                          and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                    ) sc
                where
                    sc.rk = 1
            ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
        group by 1,2
    ) a
left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
where
    dp.store_category in (1,10,13,14);
;-- -. . -..- - / . -. - .-. -.--
select json_extract(dpr.extra_value, '$.images') from dwm.drds_parcel_route_extra dpr where  dpr.id = '1611593928971259904';
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.updated_at
    ,plt.state
    ,plt.operator_id
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case
        when  a.state = 1 then '丢失件待处理'
        when  a.state = 2 then '疑似丢失件待处理'
        when  a.state = 3 then '待工单回复'
        when  a.state = 4 then '已工单回复'
        when  a.state = 5 and a.operator_id in (10000,10001,10002) then '自动判责—包裹未丢失'
        when  a.state = 5 and a.operator_id not in (10000,10001,10002) then '人工-包裹未丢失'
        when  a.state = 6 then '丢失件处理完成'
    end 判责结果
    ,pr2.staff_info_id 拍照快递员
    ,pr2.store_name 拍照网点
    ,dt.piece_name 拍照网点片区
    ,dt.region_name 拍照网点大区
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,if(a.state in (5,6) ,timestampdiff(hour, a.created_at, a.updated_at, null)) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,sfp.id record_id
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno
left join fle_staging.stranded_force_photo_info sfp on sfp.ai_record_id = a.record_id
left join fle_staging.sys_attachment sa on sa.object_key = sfp.url
left join dwm.drds_parcel_route_extra dpr on replace(replace(replace(json_extract(dpr.extra_value, '$.images'), '"', ''),'[', ''),']', '') = sa.id
left join rot_pro.parcel_route pr2 on pr2.pno = dpr.pno and pr2.route_action = 'TAKE_PHOTO' and json_extract(pr2.extra_value, '$.routeExtraId') = dpr.route_extra_id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = pr2.store_id and dt.stat_date = date_sub(curdate(), interval 1 day);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.updated_at
    ,plt.state
    ,plt.operator_id
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case
        when  a.state = 1 then '丢失件待处理'
        when  a.state = 2 then '疑似丢失件待处理'
        when  a.state = 3 then '待工单回复'
        when  a.state = 4 then '已工单回复'
        when  a.state = 5 and a.operator_id in (10000,10001,10002) then '自动判责—包裹未丢失'
        when  a.state = 5 and a.operator_id not in (10000,10001,10002) then '人工-包裹未丢失'
        when  a.state = 6 then '丢失件处理完成'
    end 判责结果
    ,pr2.staff_info_id 拍照快递员
    ,pr2.store_name 拍照网点
    ,dt.piece_name 拍照网点片区
    ,dt.region_name 拍照网点大区
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,if(a.state in (5,6) ,timestampdiff(hour, a.created_at, a.updated_at), null) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,sfp.id record_id
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno
left join fle_staging.stranded_force_photo_info sfp on sfp.ai_record_id = a.record_id
left join fle_staging.sys_attachment sa on sa.object_key = sfp.url
left join dwm.drds_parcel_route_extra dpr on replace(replace(replace(json_extract(dpr.extra_value, '$.images'), '"', ''),'[', ''),']', '') = sa.id
left join rot_pro.parcel_route pr2 on pr2.pno = dpr.pno and pr2.route_action = 'TAKE_PHOTO' and json_extract(pr2.extra_value, '$.routeExtraId') = dpr.route_extra_id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = pr2.store_id and dt.stat_date = date_sub(curdate(), interval 1 day);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.updated_at
    ,plt.state
    ,plt.operator_id
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
)
, po as
(
    select
        pr.pno
        ,dpr.route_extra_id
        ,pr.store_id
        ,pr.staff_info_id
        ,replace(replace(replace(json_extract(dpr.extra_value, '$.images'), '"', ''),'[', ''),']', '') image
    from rot_pro.parcel_route pr
    left join dwm.drds_parcel_route_extra dpr on dpr.route_extra_id = json_extract(pr.extra_value, '$.routeExtraId')
    join
        (
            select
                t1.pno
            from t t1
            group by 1
        ) pl on pl.pno = pr.pno
    where
        pr.routed_at > '2023-06-01'
        and pr.route_action = 'TAKE_PHOTO'
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case
        when  a.state = 1 then '丢失件待处理'
        when  a.state = 2 then '疑似丢失件待处理'
        when  a.state = 3 then '待工单回复'
        when  a.state = 4 then '已工单回复'
        when  a.state = 5 and a.operator_id in (10000,10001,10002) then '自动判责—包裹未丢失'
        when  a.state = 5 and a.operator_id not in (10000,10001,10002) then '人工-包裹未丢失'
        when  a.state = 6 then '丢失件处理完成'
    end 判责结果
    ,po1.staff_info_id 拍照快递员
    ,dt.store_name 拍照网点
    ,dt.piece_name 拍照网点片区
    ,dt.region_name 拍照网点大区
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,if(a.state in (5,6) ,timestampdiff(hour, a.created_at, a.updated_at), null) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,sfp.id record_id
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno
left join fle_staging.stranded_force_photo_info sfp on sfp.ai_record_id = a.record_id
left join fle_staging.sys_attachment sa on sa.object_key = sfp.url
left join po po1 on po1.image = sa.id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = po1.store_id and dt.stat_date = date_sub(curdate(), interval 1 day);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.updated_at
    ,plt.state
    ,plt.operator_id
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
)
, po as
(
    select
        pr.pno
        ,dpr.route_extra_id
        ,pr.store_id
        ,pr.staff_info_id
        ,replace(replace(replace(json_extract(dpr.extra_value, '$.images'), '"', ''),'[', ''),']', '') image
    from rot_pro.parcel_route pr
    left join dwm.drds_parcel_route_extra dpr on dpr.route_extra_id = json_extract(pr.extra_value, '$.routeExtraId')
    join
        (
            select
                t1.pno
            from t t1
            group by 1
        ) pl on pl.pno = pr.pno
    where
        pr.routed_at > '2023-06-01'
        and pr.route_action = 'TAKE_PHOTO'
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case
        when  a.state = 1 then '丢失件待处理'
        when  a.state = 2 then '疑似丢失件待处理'
        when  a.state = 3 then '待工单回复'
        when  a.state = 4 then '已工单回复'
        when  a.state = 5 and a.operator_id in (10000,10001,10002) then '自动判责—包裹未丢失'
        when  a.state = 5 and a.operator_id not in (10000,10001,10002) then '人工-包裹未丢失'
        when  a.state = 6 then '丢失件处理完成'
    end 判责结果
    ,po1.staff_info_id 拍照快递员
    ,dt.store_name 拍照网点
    ,dt.piece_name 拍照网点片区
    ,dt.region_name 拍照网点大区
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,,case pi2.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 退件包裹包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,if(a.state in (5,6) ,timestampdiff(hour, a.created_at, a.updated_at), null) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,sfp.id record_id
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno
left join fle_staging.stranded_force_photo_info sfp on sfp.ai_record_id = a.record_id
left join fle_staging.sys_attachment sa on sa.object_key = sfp.url
left join po po1 on po1.image = sa.id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = po1.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join fle_staging.parcel_info pi2 on pi2.pno = pi.returned_pno;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
select
    plt.pno
    ,plt.id
    ,plt.created_at
    ,plt.updated_at
    ,plt.state
    ,plt.operator_id
    ,plt.client_id
    ,plt.last_valid_store_id
    ,if(plt.state = 6 and plt.duty_result = 1, plt.updated_at, null) updated_time
from bi_pro.parcel_lose_task plt
where
    plt.created_at >= '2023-06-14 17:00:00'
    and plt.created_at < '2023-06-30 17:00:00'
    and plt.source = 12
)
, po as
(
    select
        pr.pno
        ,dpr.route_extra_id
        ,pr.store_id
        ,pr.staff_info_id
        ,replace(replace(replace(json_extract(dpr.extra_value, '$.images'), '"', ''),'[', ''),']', '') image
    from rot_pro.parcel_route pr
    left join dwm.drds_parcel_route_extra dpr on dpr.route_extra_id = json_extract(pr.extra_value, '$.routeExtraId')
    join
        (
            select
                t1.pno
            from t t1
            group by 1
        ) pl on pl.pno = pr.pno
    where
        pr.routed_at > '2023-06-01'
        and pr.route_action = 'TAKE_PHOTO'
)
select
    a.pno
    ,case a.force_take_photos_type
        when 1 then '打印面单'
        when 2 then '收件人拒收'
        when 3 then '滞留强制拍照'
    end 拍照类型
    ,case
        when  a.state = 1 then '丢失件待处理'
        when  a.state = 2 then '疑似丢失件待处理'
        when  a.state = 3 then '待工单回复'
        when  a.state = 4 then '已工单回复'
        when  a.state = 5 and a.operator_id in (10000,10001,10002) then '自动判责—包裹未丢失'
        when  a.state = 5 and a.operator_id not in (10000,10001,10002) then '人工-包裹未丢失'
        when  a.state = 6 then '丢失件处理完成'
    end 判责结果
    ,po1.staff_info_id 拍照快递员
    ,dt.store_name 拍照网点
    ,dt.piece_name 拍照网点片区
    ,dt.region_name 拍照网点大区
    ,case
        when bc.`client_id` is not null then bc.client_name
        when kp.id is not null and bc.id is null then '普通ka'
        when kp.`id` is null then '小c'
    end 客户类型
    ,b.24hour 判责丢失24小时判断
    ,pi.cod_amount/100 cod金额
    ,case pi.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 包裹状态
    ,case pi2.state
        when 1 then '已揽收'
        when 2 then '运输中'
        when 3 then '派送中'
        when 4 then '已滞留'
        when 5 then '已签收'
        when 6 then '疑难件处理中'
        when 7 then '已退件'
        when 8 then '异常关闭'
        when 9 then '已撤销'
    end as 退件包裹包裹状态
    ,if(dt.双重预警 = 'Alert', '是', '否') 当日是否爆仓
    ,plt3.pl_source 进L来源同时是否有替他来源任务
    ,if(a.state in (5,6) ,timestampdiff(hour, a.created_at, a.updated_at), null) 进入L来源时间到已处理时间段_hour
from
    (
        select
            sf.*
        from
            (
                select
                    t1.*
                    ,sfp.force_take_photos_type
                    ,sfp.id record_id
                    ,row_number() over (partition by sfp.pno order by sfp.created_at desc) rk
                from fle_staging.stranded_force_photo_ai_record sfp
                join t t1 on t1.pno = sfp.pno
                where
                    sfp.created_at < date_sub(t1.created_at, interval 7 hour)
                    and (sfp.parcel_enabled = 0 or sfp.matching_enabled = 0)
                    and sfp.force_take_photos_type is not null
            ) sf
        where
            sf.rk = 1
    ) a
left join fle_staging.ka_profile kp on kp.id = a.client_id
left join dwm.tmp_ex_big_clients_id_detail bc on bc.client_id = a.client_id
left join fle_staging.parcel_info pi on pi.pno = a.pno
left join
    (
        select
            t2.*
            ,case
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 <= 24 then '1'
                when timestampdiff(second, t2.updated_time, pr.min_prat)/3600 > 24 then '2'
                else 0
            end 24hour
        from t t2
        left join
            (
                select
                    pr.pno
                    ,min(convert_tz(pr.routed_at, '+00:00', '+07:00')) min_prat
                from rot_pro.parcel_route pr
                join t t1 on t1.pno = pr.pno
                join dwm.dwd_dim_dict ddd on ddd.element = pr.route_action and ddd.db = 'rot_pro' and ddd.tablename = 'parcel_route' and ddd.fieldname = 'route_action' and ddd.remark = 'valid'
                where
                    pr.routed_at > date_sub(t1.updated_time, interval 7 hour)
                group by 1
            ) pr on pr.pno = t2.pno
    ) b on b.pno = a.pno
left join dwm.dwd_th_network_spill_detl_rd dt on dt.统计日期 = date(a.created_at) and dt.网点ID = a.last_valid_store_id
left join
    (
        select
            t1.pno
            ,group_concat(pl.plt_source) pl_source
        from
            (
                select
                    plt3.pno
                    ,plt3.source
                    ,case plt3.source
                        WHEN 1 THEN 'A'
                        WHEN 2 THEN 'B'
                        WHEN 3 THEN 'C'
                        WHEN 4 THEN 'D'
                        WHEN 5 THEN 'E'
                        WHEN 6 THEN 'F'
                        WHEN 7 THEN 'G'
                        WHEN 8 THEN 'H'
                        WHEN 9 THEN 'I'
                        WHEN 10 THEN 'J'
                        when 11 then 'K'
                        when 12 then 'L'
                    end plt_source
                    ,plt3.created_at created_time
                    ,if(plt3.state in (5,6), plt3.updated_at, now()) updated_time
                from bi_pro.parcel_lose_task plt3
                where
                    plt3.created_at >= '2023-06-14 17:00:00'
                    and plt3.created_at < '2023-06-30 17:00:00'
                    and plt3.source != 12 -- 非L来源
            ) pl
        join t t1 on t1.pno = pl.pno
        where
            pl.updated_time > t1.created_at
            and pl.created_time < t1.updated_time
        group by 1
    ) plt3 on plt3.pno = a.pno
left join fle_staging.stranded_force_photo_info sfp on sfp.ai_record_id = a.record_id
left join fle_staging.sys_attachment sa on sa.object_key = sfp.url
left join po po1 on po1.image = sa.id
left join dwm.dim_th_sys_store_rd dt on dt.store_id = po1.store_id and dt.stat_date = date_sub(curdate(), interval 1 day)
left join fle_staging.parcel_info pi2 on pi2.pno = pi.returned_pno;
;-- -. . -..- - / . -. - .-. -.--
select
#     convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
#     ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
#     ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
#     ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
#     ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
#     ,cdt.client_id 客户ID
#     ,di.order_info_id  订单号
#     ,oi.remark 订单备注
#     ,di.pno 运单号
#     ,ddd.CN_element 疑难原因
#     ,ddd2.CN_element 二级类型
#     ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
#     ,case pi.insured
#         when 1 then '保价'
#         when 0 then '不保价'
#     end 保价情况
#     ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
#     ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
#     ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
#     ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
#     ,case cdt.state
#         when 0 then '未处理'
#         when 1 then '已处理'
#         when 2 then '沟通中'
#         when 3 then '支付驳回'
#         when 4 then '客户未处理'
#         when 5 then '转交闪速系统'
#         when 6 then '转交QAQC'
#     end 处理状态
#     ,case fdt.state
#         when 0 then '未支付'
#         when 1 then '已支付'
#         when 2 then '驳回'
#         when 3 then '取消'
#         when 4 then '支付中'
#         when 5 then '无需支付'
#     end 财务支付状态
#     ,cdt.remark 备注
#     ,t.ProjectTeam
#     ,t.Sub_ProjectTeam
#     ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
    count(cdt.id) num
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 31 day ), interval 8 hour);
;-- -. . -..- - / . -. - .-. -.--
select
    count(cdt.id)
#     convert_tz(di.created_at, '+00:00', '+07:00') 疑难件提交时间
#     ,convert_tz(pi.created_at, '+00:00', '+07:00') 揽收完成时间
#     ,if(cdt.first_operated_at is not null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00')), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,convert_tz(cdt.first_operated_at, '+00:00', '+08:00'))%60, 'm' ), null ) '从提交到第一次处理时长'
#     ,if(cdt.first_operated_at is null, concat(timestampdiff(day ,convert_tz(di.created_at, '+00:00', '+08:00') ,now()), 'd', timestampdiff(hour ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%24, 'h',timestampdiff(minute ,convert_tz(di.created_at, '+00:00', '+08:00') ,now())%60, 'm' ), null ) 至今未处理时长
#     ,concat('(', di.staff_info_id, ')', hsi.name) 提交人
#     ,cdt.client_id 客户ID
#     ,di.order_info_id  订单号
#     ,oi.remark 订单备注
#     ,di.pno 运单号
#     ,ddd.CN_element 疑难原因
#     ,ddd2.CN_element 二级类型
#     ,concat('(', ss.id, ')', ss.name) 提交疑难件网点
#     ,case pi.insured
#         when 1 then '保价'
#         when 0 then '不保价'
#     end 保价情况
#     ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 首次处理时间
#     ,concat('(', cdt.first_operator_id, ')', hsi2.name) 首次处理人
#     ,convert_tz(cdt.first_operated_at, '+00:00', '+07:00') 最后处理时间
#     ,concat('(', cdt.operator_id, ')', hsi4.name) 最后处理人
#     ,case cdt.state
#         when 0 then '未处理'
#         when 1 then '已处理'
#         when 2 then '沟通中'
#         when 3 then '支付驳回'
#         when 4 then '客户未处理'
#         when 5 then '转交闪速系统'
#         when 6 then '转交QAQC'
#     end 处理状态
#     ,case fdt.state
#         when 0 then '未支付'
#         when 1 then '已支付'
#         when 2 then '驳回'
#         when 3 then '取消'
#         when 4 then '支付中'
#         when 5 then '无需支付'
#     end 财务支付状态
#     ,cdt.remark 备注
#     ,t.ProjectTeam
#     ,t.Sub_ProjectTeam
#     ,datediff(curdate(), convert_tz(di.created_at, '+00:00', '+07:00')) 处理天数
from fle_staging.customer_diff_ticket cdt
join tmpale.tmp_th_client_id_cn_th t on cdt.client_id = t.client_id
join fle_staging.diff_info di on di.id = cdt.diff_info_id
left join fle_staging.parcel_info pi on pi.pno = di.pno
left join bi_pro.hr_staff_info hsi on hsi.staff_info_id = di.staff_info_id
left join fle_staging.order_info oi on oi.pno = di.pno
left join dwm.dwd_dim_dict ddd on ddd.element = di.diff_marker_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'diff_marker_category'
left join dwm.dwd_dim_dict ddd2 on ddd2.element = di.rejection_category and ddd.db = 'fle_staging' and ddd.tablename = 'diff_info' and ddd.fieldname = 'rejection_category'
left join fle_staging.sys_store ss on ss.id = di.store_id
left join bi_pro.hr_staff_info hsi2 on hsi2.staff_info_id = cdt.first_operator_id
left join bi_pro.hr_staff_info hsi4 on hsi4.staff_info_id = cdt.operator_id
left join fle_staging.finance_diff_ticket fdt on fdt.diff_info_id = cdt.diff_info_id
where
    cdt.created_at >= date_sub(date_sub(curdate(), interval 31 day ), interval 8 hour)
    and t.projectteam not in ('LZD', 'SPX', 'TikTok');
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-06'
        and ds.stat_date <= '2023-07-06'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)

select
    a.stat_date 日期
    ,a.store_id 网点ID
    ,dp.store_name 网点名称
    ,dp.region_name 大区
    ,dp.piece_name 片区
    ,a.应交接
    ,a.已交接
    ,concat(round(a.交接率*100,2),'%') as 交接率
    ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
    ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
    ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
    ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
    ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
from
    (
        select
            t1.store_id
            ,t1.stat_date
            ,count(t1.pno) 应交接
            ,count(if(sc.pno is not null , t1.pno, null)) 已交接
            ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
            ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
            ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
            ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
            ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

            ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
            ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
            ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
            ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
        from t t1
        left join
            (
                select
                    sc.*
                from
                    (
                        select
                            pr.pno
                            ,pr.store_id
                            ,pr.store_name
                            ,t1.stat_date
                            ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                            ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                            ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                        from rot_pro.parcel_route pr
                        join t t1 on t1.pno = pr.pno
                        where
                            pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                           and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                          and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                    ) sc
                where
                    sc.rk = 1
            ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
        group by 1,2
    ) a
left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
where
    dp.store_category in (1,10,13,14);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-06'
        and ds.stat_date <= '2023-07-06'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)
, b as
(

        select
            a.stat_date 日期
            ,a.store_id 网点ID
            ,dp.store_name 网点名称
            ,if(dp.region_name in ('Area1', 'Area2', 'Area3', 'Area4', 'Area5', 'Area6', 'Area7', 'Area8', 'Area9', 'Area11', 'Area12', 'Area13', 'Area14', 'Area15', 'Area16'), 'Normal_Area', 'Bulky_Area') 区域
            ,dp.region_name 大区
            ,dp.piece_name 片区
            ,a.应交接
            ,a.已交接
            ,concat(round(a.交接率*100,2),'%') as 交接率
            ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
            ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
            ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
            ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
            ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
        from
            (
                select
                    t1.store_id
                    ,t1.stat_date
                    ,count(t1.pno) 应交接
                    ,count(if(sc.pno is not null , t1.pno, null)) 已交接
                    ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
                    ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
                    ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
                    ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
                    ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

                    ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
                    ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
                    ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
                    ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
                from t t1
                left join
                    (
                        select
                            sc.*
                        from
                            (
                                select
                                    pr.pno
                                    ,pr.store_id
                                    ,pr.store_name
                                    ,t1.stat_date
                                    ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                                    ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                                from rot_pro.parcel_route pr
                                join t t1 on t1.pno = pr.pno
                                where
                                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                                   and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                                  and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                            ) sc
                        where
                            sc.rk = 1
                    ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
                group by 1,2
            ) a
        left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
        where
            dp.store_category in (1,10,13)
)
select
    *
from b b1;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-06'
        and ds.stat_date <= '2023-07-06'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)
, b as
(

        select
            a.stat_date 日期
            ,a.store_id 网点ID
            ,dp.store_name 网点名称
            ,if(dp.region_name in ('Area1', 'Area2', 'Area3', 'Area4', 'Area5', 'Area6', 'Area7', 'Area8', 'Area9', 'Area11', 'Area12', 'Area13', 'Area14', 'Area15', 'Area16'), 'Normal_Area', 'Bulky_Area') 区域
            ,dp.region_name 大区
            ,dp.piece_name 片区
            ,a.应交接
            ,a.已交接
            ,concat(round(a.交接率*100,2),'%') as 交接率
            ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
            ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
            ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
            ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
            ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
        from
            (
                select
                    t1.store_id
                    ,t1.stat_date
                    ,count(t1.pno) 应交接
                    ,count(if(sc.pno is not null , t1.pno, null)) 已交接
                    ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
                    ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
                    ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
                    ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
                    ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

                    ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
                    ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
                    ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
                    ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
                from t t1
                left join
                    (
                        select
                            sc.*
                        from
                            (
                                select
                                    pr.pno
                                    ,pr.store_id
                                    ,pr.store_name
                                    ,t1.stat_date
                                    ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                                    ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                                from rot_pro.parcel_route pr
                                join t t1 on t1.pno = pr.pno
                                where
                                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                                   and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                                  and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                            ) sc
                        where
                            sc.rk = 1
                    ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
                group by 1,2
            ) a
        left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
        where
            dp.store_category in (1,10,13)
)
select
    b1.日期
    ,b1.区域
    ,b1.大区
    ,count(b1.网点ID) store_num
from b b1
group by 1,2,3;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-06'
        and ds.stat_date <= '2023-07-06'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)
, b as
(

        select
            a.stat_date 日期
            ,a.store_id 网点ID
            ,dp.store_name 网点名称
            ,if(dp.region_name in ('Area1', 'Area2', 'Area3', 'Area4', 'Area5', 'Area6', 'Area7', 'Area8', 'Area9', 'Area11', 'Area12', 'Area13', 'Area14', 'Area15', 'Area16'), 'Normal_Area', 'Bulky_Area') 区域
            ,dp.region_name 大区
            ,dp.piece_name 片区
            ,a.应交接
            ,a.已交接
            ,concat(round(a.交接率*100,2),'%') as 交接率
            ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
            ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
            ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
            ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
            ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
        from
            (
                select
                    t1.store_id
                    ,t1.stat_date
                    ,count(t1.pno) 应交接
                    ,count(if(sc.pno is not null , t1.pno, null)) 已交接
                    ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
                    ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
                    ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
                    ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
                    ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

                    ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
                    ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
                    ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
                    ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
                from t t1
                left join
                    (
                        select
                            sc.*
                        from
                            (
                                select
                                    pr.pno
                                    ,pr.store_id
                                    ,pr.store_name
                                    ,t1.stat_date
                                    ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                                    ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                                from rot_pro.parcel_route pr
                                join t t1 on t1.pno = pr.pno
                                where
                                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                                   and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                                  and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                            ) sc
                        where
                            sc.rk = 1
                    ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
                group by 1,2
            ) a
        left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
        where
            dp.store_category in (1,10,13)
)
select
    b1.日期
    ,b1.区域
    ,b1.大区
    ,b1.交接评级
    ,count(b1.网点ID) store_num
from b b1
group by 1,2,3,4;
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-07'
        and ds.stat_date <= '2023-07-07'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)
# , b as
# (

        select
            a.stat_date 日期
            ,a.store_id 网点ID
            ,dp.store_name 网点名称
            ,if(dp.region_name in ('Area1', 'Area2', 'Area3', 'Area4', 'Area5', 'Area6', 'Area7', 'Area8', 'Area9', 'Area11', 'Area12', 'Area13', 'Area14', 'Area15', 'Area16'), 'Normal_Area', 'Bulky_Area') 区域
            ,dp.region_name 大区
            ,dp.piece_name 片区
            ,a.应交接
            ,a.已交接
            ,concat(round(a.交接率*100,2),'%') as 交接率
            ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
            ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
            ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
            ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
            ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
        from
            (
                select
                    t1.store_id
                    ,t1.stat_date
                    ,count(t1.pno) 应交接
                    ,count(if(sc.pno is not null , t1.pno, null)) 已交接
                    ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
                    ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
                    ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
                    ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
                    ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

                    ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
                    ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
                    ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
                    ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
                from t t1
                left join
                    (
                        select
                            sc.*
                        from
                            (
                                select
                                    pr.pno
                                    ,pr.store_id
                                    ,pr.store_name
                                    ,t1.stat_date
                                    ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                                    ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                                from rot_pro.parcel_route pr
                                join t t1 on t1.pno = pr.pno
                                where
                                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                                   and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                                  and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                            ) sc
                        where
                            sc.rk = 1
                    ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
                group by 1,2
            ) a
        left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
        where
            dp.store_category in (1,10,13);
;-- -. . -..- - / . -. - .-. -.--
with t as
(
    select
         ds.store_id
        ,ds.pno
        ,ds.stat_date
    from bi_pro.dc_should_delivery_today ds
    where
        ds.stat_date >= '2023-07-07'
        and ds.stat_date <= '2023-07-07'
        and ds.arrival_scan_route_at < concat(ds.stat_date, ' 09:00:00')
)
, b as
(

        select
            a.stat_date 日期
            ,a.store_id 网点ID
            ,dp.store_name 网点名称
            ,if(dp.region_name in ('Area1', 'Area2', 'Area3', 'Area4', 'Area5', 'Area6', 'Area7', 'Area8', 'Area9', 'Area11', 'Area12', 'Area13', 'Area14', 'Area15', 'Area16'), 'Normal_Area', 'Bulky_Area') 区域
            ,dp.region_name 大区
            ,dp.piece_name 片区
            ,a.应交接
            ,a.已交接
            ,concat(round(a.交接率*100,2),'%') as 交接率
            ,concat(ifnull(a.a_check,''), ifnull(a.b_check,''), ifnull(a.d_check,''), ifnull(a.e_check,''),if(a.a_check is null  and a.d_check is null and a.b_check is null and a.e_check is null, 'C', '')) 交接评级
            ,concat(round(a.A_rate * 100,2),'%')  'A时段（<0930 ）'
            ,concat(round(a.B_rate * 100,2),'%') 'B时段（0930<=X<1200）'
            ,concat(round(a.C_rate * 100,2),'%')'C时段（1200<=X<1600 ）'
            ,concat(round(a.D_rate * 100,2),'%')'D时段（>=1600）'
        from
            (
                select
                    t1.store_id
                    ,t1.stat_date
                    ,count(t1.pno) 应交接
                    ,count(if(sc.pno is not null , t1.pno, null)) 已交接
                    ,count(if(sc.pno is not null , t1.pno, null))/count(t1.pno) 交接率
                    ,count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as A_rate
                    ,count(if(time(sc.route_time) >= '09:30:00' and time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as B_rate
                    ,count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as C_rate
                    ,count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) as D_rate

                    ,if(count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.95, 'A', null ) a_check
                    ,if(count(if(time(sc.route_time) < '12:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.98 and count(if(time(sc.route_time) < '09:30:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) <= 0.95, 'B', null ) b_check
                    ,if(count(if(time(sc.route_time) >= '12:00:00' and time(sc.route_time) < '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03, 'D', null ) d_check
                    ,if(count(if(time(sc.route_time) >= '16:00:00', t1.pno, null))/count(if(sc.pno is not null , t1.pno, null)) > 0.03 , 'E', null ) e_check
                from t t1
                left join
                    (
                        select
                            sc.*
                        from
                            (
                                select
                                    pr.pno
                                    ,pr.store_id
                                    ,pr.store_name
                                    ,t1.stat_date
                                    ,convert_tz(pr.routed_at, '+00:00', '+07:00') route_time
                                    ,date(convert_tz(pr.routed_at, '+00:00', '+07:00')) route_date
                                    ,row_number() over (partition by pr.pno,t1.stat_date order by pr.routed_at) rk
                                from rot_pro.parcel_route pr
                                join t t1 on t1.pno = pr.pno
                                where
                                    pr.route_action = 'DELIVERY_TICKET_CREATION_SCAN'
                                   and pr.routed_at >= date_sub(t1.stat_date, interval 7 hour)
                                  and pr.routed_at < date_add(t1.stat_date, interval 17 hour )
                            ) sc
                        where
                            sc.rk = 1
                    ) sc on sc.pno = t1.pno and t1.stat_date = sc.stat_date
                group by 1,2
            ) a
        left join dwm.dim_th_sys_store_rd dp on dp.store_id = a.store_id and dp.stat_date = date_sub(curdate(), interval 1 day)
        where
            dp.store_category in (1,10,13)
)

select
    b1.日期
    ,b1.区域
    ,b1.大区
    ,count(if(b1.交接评级 regexp 'C|D|E' and b1.交接评级 not regexp 'A|B', b1.网点ID, null))/count(b1.网点ID) 占比
from b b1
group by 1,2,3

union all

select
    b1.日期
    ,b1.区域
    ,'Total' 大区
    ,count(if(b1.交接评级 regexp 'C|D|E' and b1.交接评级 not regexp 'A|B', b1.网点ID, null))/count(b1.网点ID) 占比
from b b1
group by 1,2

union all

select
    b1.日期
    ,'Grand Total' 区域
    ,'Total' 大区
    ,count(if(b1.交接评级 regexp 'C|D|E' and b1.交接评级 not regexp 'A|B', b1.网点ID, null))/count(b1.网点ID) 占比
from b b1
group by 1;